{
	"schemaVersion": "2.0",
	"id": 0,
	"name": "XERNERX",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "build/XernerxBaseBuilder",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "XernerxBaseBuilder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 3,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 18,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L18"
								}
							],
							"signatures": [
								{
									"id": 4,
									"name": "XernerxBaseBuilder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Constructs a new instance of the XernerxBaseBuilder class."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxBaseBuilder.ts",
											"line": 18,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L18"
										}
									],
									"parameters": [
										{
											"id": 5,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A unique identifier for the builder instance."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 6,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Configuration options for the builder, which can be either\n                 XernerxSlashCommandBuilderOptions or XernerxEventBuilderOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 887,
														"name": "XernerxEventBuilderOptions",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 930,
														"name": "XernerxSlashCommandBuilderOptions",
														"package": "xernerx"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 2,
										"name": "XernerxBaseBuilder",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 8,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							}
						},
						{
							"id": 7,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								3
							]
						},
						{
							"title": "Properties",
							"children": [
								8,
								7
							]
						}
					],
					"sources": [
						{
							"fileName": "src/build/XernerxBaseBuilder.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L7"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder"
						},
						{
							"type": "reference",
							"target": 26,
							"name": "XernerxMessageCommandBuilder"
						},
						{
							"type": "reference",
							"target": 43,
							"name": "XernerxSlashCommandBuilder"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "src/build/XernerxBaseBuilder.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L1"
				}
			]
		},
		{
			"id": 9,
			"name": "build/XernerxEventBuilder",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 10,
					"name": "XernerxEventBuilder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 11,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 16,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L16"
								}
							],
							"signatures": [
								{
									"id": 12,
									"name": "XernerxEventBuilder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/build/XernerxEventBuilder.ts",
											"line": 16,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L16"
										}
									],
									"parameters": [
										{
											"id": 13,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 14,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 887,
												"name": "XernerxEventBuilderOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 10,
										"name": "XernerxEventBuilder",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 4,
										"name": "XernerxBaseBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 3,
								"name": "XernerxBaseBuilder.constructor"
							}
						},
						{
							"id": 24,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 8,
								"name": "XernerxBaseBuilder.client"
							}
						},
						{
							"id": 18,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 15,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							}
						},
						{
							"id": 23,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 7,
								"name": "XernerxBaseBuilder.id"
							}
						},
						{
							"id": 16,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 17,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							}
						},
						{
							"id": 19,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 20,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 36,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L36"
								}
							],
							"signatures": [
								{
									"id": 21,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxEventBuilder.ts",
											"line": 36,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L36"
										}
									],
									"parameters": [
										{
											"id": 22,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A variable number of arguments that are passed to the event handler.\n              These arguments are specific to the event being handled."
													}
												]
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								11
							]
						},
						{
							"title": "Properties",
							"children": [
								24,
								18,
								15,
								23,
								16,
								19
							]
						},
						{
							"title": "Methods",
							"children": [
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "src/build/XernerxEventBuilder.ts",
							"line": 10,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L10"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 2,
							"name": "XernerxBaseBuilder",
							"package": "xernerx"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 677,
							"name": "XernerxClientReadyEvent"
						},
						{
							"type": "reference",
							"target": 698,
							"name": "XernerxEntitlementCreateEvent"
						},
						{
							"type": "reference",
							"target": 714,
							"name": "XernerxInteractionCreateEvent"
						},
						{
							"type": "reference",
							"target": 728,
							"name": "XernerxMessageCreateEvent"
						},
						{
							"type": "reference",
							"target": 742,
							"name": "XernerxMessageDeleteEvent"
						},
						{
							"type": "reference",
							"target": 756,
							"name": "XernerxMessageUpdateEvent"
						},
						{
							"type": "reference",
							"target": 771,
							"name": "XernerxSlashCommandInteractionEvent"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "src/build/XernerxEventBuilder.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L1"
				}
			]
		},
		{
			"id": 25,
			"name": "build/XernerxMessageCommandBuilder",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 26,
					"name": "XernerxMessageCommandBuilder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 27,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 27,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L27"
								}
							],
							"signatures": [
								{
									"id": 28,
									"name": "XernerxMessageCommandBuilder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Constructs an instance of XernerxMessageCommandBuilder."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxMessageCommandBuilder.ts",
											"line": 27,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L27"
										}
									],
									"parameters": [
										{
											"id": 29,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A unique identifier for the command."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 30,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An object containing configuration options for the command."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 893,
												"name": "XernerxMessageCommandBuilderOptions",
												"package": "xernerx",
												"highlightedProperties": {
													"name": [
														{
															"kind": "text",
															"text": "The name of the command."
														}
													],
													"alias": [
														{
															"kind": "text",
															"text": "An alias or an array of aliases for the command."
														}
													],
													"prefix": [
														{
															"kind": "text",
															"text": "A prefix or an array of prefixes for the command."
														}
													],
													"premium": [
														{
															"kind": "text",
															"text": "An array indicating premium features or settings."
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 26,
										"name": "XernerxMessageCommandBuilder",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 4,
										"name": "XernerxBaseBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 3,
								"name": "XernerxBaseBuilder.constructor"
							}
						},
						{
							"id": 34,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L13"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 41,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 8,
								"name": "XernerxBaseBuilder.client"
							}
						},
						{
							"id": 33,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L12"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 31,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 10,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L10"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxMessageCommand"
							}
						},
						{
							"id": 40,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 7,
								"name": "XernerxBaseBuilder.id"
							}
						},
						{
							"id": 32,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L11"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 35,
							"name": "prefix",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L14"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 36,
							"name": "premium",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 15,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L15"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 37,
							"name": "exec",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxMessageCommandBuilder.ts",
									"line": 57,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L57"
								}
							],
							"signatures": [
								{
									"id": 38,
									"name": "exec",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the command logic. This function is intended to be overridden by subclasses.\nIf not overridden, it will log a warning indicating that the command will not respond."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to any value, depending on the implementation."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxMessageCommandBuilder.ts",
											"line": 57,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L57"
										}
									],
									"parameters": [
										{
											"id": 39,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A variable number of arguments that can be passed to the command execution."
													}
												]
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								27
							]
						},
						{
							"title": "Properties",
							"children": [
								34,
								41,
								33,
								31,
								40,
								32,
								35,
								36
							]
						},
						{
							"title": "Methods",
							"children": [
								37
							]
						}
					],
					"sources": [
						{
							"fileName": "src/build/XernerxMessageCommandBuilder.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L9"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 2,
							"name": "XernerxBaseBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						26
					]
				}
			],
			"sources": [
				{
					"fileName": "src/build/XernerxMessageCommandBuilder.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxMessageCommandBuilder.ts#L1"
				}
			]
		},
		{
			"id": 42,
			"name": "build/XernerxSlashCommandBuilder",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 43,
					"name": "XernerxSlashCommandBuilder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 44,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 61,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L61"
								}
							],
							"signatures": [
								{
									"id": 45,
									"name": "XernerxSlashCommandBuilder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 61,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L61"
										}
									],
									"parameters": [
										{
											"id": 46,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 47,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 930,
												"name": "XernerxSlashCommandBuilderOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 43,
										"name": "XernerxSlashCommandBuilder",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 4,
										"name": "XernerxBaseBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 3,
								"name": "XernerxBaseBuilder.constructor"
							}
						},
						{
							"id": 63,
							"name": "category",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 52,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L52"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 105,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 8,
								"name": "XernerxBaseBuilder.client"
							}
						},
						{
							"id": 64,
							"name": "cooldown",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 53,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L53"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 51,
							"name": "data",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 41,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L41"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@discordjs/builders",
									"packagePath": "dist/index.d.mts",
									"qualifiedName": "SlashCommandBuilder"
								},
								"name": "SlashCommandBuilder",
								"package": "@discordjs/builders"
							}
						},
						{
							"id": 56,
							"name": "defer",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 48,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L48"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 57,
							"name": "deploy",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 49,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L49"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 58,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 59,
											"name": "global",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 49,
													"character": 36,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L49"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 60,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 49,
													"character": 54,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L49"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												59,
												60
											]
										}
									],
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 49,
											"character": 34,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L49"
										}
									]
								}
							}
						},
						{
							"id": 49,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 39,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L39"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 83,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Static"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 59,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L59"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxSlashCommand"
							}
						},
						{
							"id": 54,
							"name": "groups",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 44,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L44"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 996,
									"name": "XernerxSlashCommandBuilderGroup",
									"package": "xernerx"
								}
							}
						},
						{
							"id": 104,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 7,
								"name": "XernerxBaseBuilder.id"
							}
						},
						{
							"id": 76,
							"name": "ignore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 56,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 77,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 80,
											"name": "channels",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 56,
													"character": 76,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 81,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 56,
													"character": 102,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 78,
											"name": "owner",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 56,
													"character": 36,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 82,
											"name": "types",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 56,
													"character": 126,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "payloads/v10/channel.ts",
													"qualifiedName": "ChannelType"
												},
												"name": "ChannelType",
												"package": "discord-api-types"
											}
										},
										{
											"id": 79,
											"name": "users",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 56,
													"character": 53,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												80,
												81,
												78,
												82,
												79
											]
										}
									],
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 56,
											"character": 34,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L56"
										}
									]
								}
							}
						},
						{
							"id": 61,
							"name": "info",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 50,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L50"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 50,
							"name": "integration",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 40,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L40"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@discordjs/builders",
									"packagePath": "dist/index.d.mts",
									"qualifiedName": "RestOrArray"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord-api-types",
											"packagePath": "payloads/v10/_interactions/applicationCommands.ts",
											"qualifiedName": "InteractionContextType"
										},
										"name": "InteractionContextType",
										"package": "discord-api-types"
									}
								],
								"name": "RestOrArray",
								"package": "@discordjs/builders"
							}
						},
						{
							"id": 48,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Discord"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 38,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L38"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 52,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 42,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L42"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 971,
									"name": "XernerxSlashCommandBuilderOption",
									"package": "xernerx"
								}
							}
						},
						{
							"id": 65,
							"name": "permissions",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 54,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L54"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 66,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 67,
											"name": "client",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 54,
													"character": 40,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L54"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													}
												]
											}
										},
										{
											"id": 68,
											"name": "user",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 54,
													"character": 86,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L54"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												67,
												68
											]
										}
									],
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 54,
											"character": 38,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L54"
										}
									]
								}
							}
						},
						{
							"id": 55,
							"name": "premium",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Xernerx"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 47,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L47"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 69,
							"name": "strict",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 55,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 70,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 73,
											"name": "channels",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 55,
													"character": 76,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 74,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 55,
													"character": 102,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 71,
											"name": "owner",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 55,
													"character": 36,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 75,
											"name": "types",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 55,
													"character": 126,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "payloads/v10/channel.ts",
													"qualifiedName": "ChannelType"
												},
												"name": "ChannelType",
												"package": "discord-api-types"
											}
										},
										{
											"id": 72,
											"name": "users",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/build/XernerxSlashCommandBuilder.ts",
													"line": 55,
													"character": 53,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												73,
												74,
												71,
												75,
												72
											]
										}
									],
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 55,
											"character": 34,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L55"
										}
									]
								}
							}
						},
						{
							"id": 53,
							"name": "subcommands",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 43,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L43"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 988,
									"name": "XernerxSlashCommandBuilderSubcommand",
									"package": "xernerx"
								}
							}
						},
						{
							"id": 62,
							"name": "usage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isOptional": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 51,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L51"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 84,
							"name": "autocomplete",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 197,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L197"
								}
							],
							"signatures": [
								{
									"id": 85,
									"name": "autocomplete",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Handles the autocomplete functionality for a slash command."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to either void or any value, depending on the implementation."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 197,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L197"
										}
									],
									"parameters": [
										{
											"id": 86,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The arguments for the autocomplete function, which include the context and options for the command."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 925,
												"name": "XernerxSlashCommandAutocomplete",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 87,
							"name": "conditions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 205,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L205"
								}
							],
							"signatures": [
								{
									"id": 88,
									"name": "conditions",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates conditions for executing a slash command."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to either void or any value, depending on the implementation."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 205,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L205"
										}
									],
									"parameters": [
										{
											"id": 89,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The arguments for the conditions function, which include the context and options for the command."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 915,
												"name": "XernerxSlashCommand",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 90,
							"name": "exec",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxSlashCommandBuilder.ts",
									"line": 213,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L213"
								}
							],
							"signatures": [
								{
									"id": 91,
									"name": "exec",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the slash command."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to either void or any value, depending on the implementation."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/build/XernerxSlashCommandBuilder.ts",
											"line": 213,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L213"
										}
									],
									"parameters": [
										{
											"id": 92,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The arguments for the exec function, which include the context and options for the command."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 915,
												"name": "XernerxSlashCommand",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								44
							]
						},
						{
							"title": "Properties",
							"children": [
								63,
								105,
								64,
								51,
								56,
								57,
								49,
								83,
								54,
								104,
								76,
								61,
								50,
								48,
								52,
								65,
								55,
								69,
								53,
								62
							]
						},
						{
							"title": "Methods",
							"children": [
								84,
								87,
								90
							]
						}
					],
					"sources": [
						{
							"fileName": "src/build/XernerxSlashCommandBuilder.ts",
							"line": 36,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L36"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 2,
							"name": "XernerxBaseBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						43
					]
				}
			],
			"sources": [
				{
					"fileName": "src/build/XernerxSlashCommandBuilder.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxSlashCommandBuilder.ts#L1"
				}
			]
		},
		{
			"id": 106,
			"name": "client/XernerxClient",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 107,
					"name": "XernerxClient",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 152,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 51,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L51"
								}
							],
							"signatures": [
								{
									"id": 153,
									"name": "XernerxClient",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 51,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L51"
										}
									],
									"parameters": [
										{
											"id": 154,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "ClientOptions"
														},
														"name": "ClientOptions",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": 862,
														"name": "XernerxClientOptions",
														"package": "xernerx"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 107,
										"name": "XernerxClient",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "Client.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Client.constructor"
							}
						},
						{
							"id": 189,
							"name": "application",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1095,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientApplication"
										},
										"name": "ClientApplication",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.application"
							}
						},
						{
							"id": 168,
							"name": "cache",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 38,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L38"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 169,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 170,
											"name": "messages",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 38,
													"character": 34,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L38"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										},
										{
											"id": 171,
											"name": "slash",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 38,
													"character": 72,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L38"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												170,
												171
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 38,
											"character": 32,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L38"
										}
									]
								}
							}
						},
						{
							"id": 190,
							"name": "channels",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1096,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "ChannelManager"
								},
								"name": "ChannelManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.channels"
							}
						},
						{
							"id": 167,
							"name": "cluster",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 37,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L37"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Core/ClusterClient.ts",
											"qualifiedName": "ClusterClient"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "DjsDiscordClient"
												},
												"name": "DjsDiscordClient",
												"package": "discord-hybrid-sharding"
											}
										],
										"name": "ClusterClient",
										"package": "discord-hybrid-sharding"
									}
								]
							}
						},
						{
							"id": 176,
							"name": "commands",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Collections"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 42,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L42"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 177,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 178,
											"name": "message",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 43,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L43"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										},
										{
											"id": 179,
											"name": "slash",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 44,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L44"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												178,
												179
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 42,
											"character": 35,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L42"
										}
									]
								}
							}
						},
						{
							"id": 180,
							"name": "events",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 46,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L46"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@discordjs/collection",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "Collection"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 10,
										"name": "XernerxEventBuilder",
										"package": "xernerx"
									}
								],
								"name": "Collection",
								"package": "@discordjs/collection"
							}
						},
						{
							"id": 193,
							"name": "guilds",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1098,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "GuildManager"
								},
								"name": "GuildManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.guilds"
							}
						},
						{
							"id": 172,
							"name": "handler",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 39,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L39"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 173,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 174,
											"name": "message",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 39,
													"character": 36,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L39"
												}
											],
											"type": {
												"type": "reference",
												"target": 899,
												"name": "XernerxMessageCommandHandlerOptions",
												"package": "xernerx"
											}
										},
										{
											"id": 175,
											"name": "slash",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 39,
													"character": 82,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L39"
												}
											],
											"type": {
												"type": "reference",
												"target": 1005,
												"name": "XernerxSlashCommandHandlerOptions",
												"package": "xernerx"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												174,
												175
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 39,
											"character": 34,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L39"
										}
									]
								}
							}
						},
						{
							"id": 181,
							"name": "modules",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Handlers"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 49,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L49"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 182,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 184,
											"name": "commandHandler",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 49,
													"character": 64,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L49"
												}
											],
											"type": {
												"type": "reference",
												"target": 785,
												"name": "CommandHandler",
												"package": "xernerx"
											}
										},
										{
											"id": 183,
											"name": "eventHandler",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 49,
													"character": 36,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L49"
												}
											],
											"type": {
												"type": "reference",
												"target": 818,
												"name": "EventHandler",
												"package": "xernerx"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												184,
												183
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 49,
											"character": 34,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L49"
										}
									]
								}
							}
						},
						{
							"id": 163,
							"name": "monitisation",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Setup"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 35,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L35"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 164,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 165,
											"name": "skus",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 35,
													"character": 41,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L35"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPISKUsResult"
												},
												"name": "RESTGetAPISKUsResult",
												"package": "discord-api-types"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												165
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 35,
											"character": 39,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L35"
										}
									]
								}
							}
						},
						{
							"id": 194,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1099,
									"character": 9
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Omit"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "ClientOptions"
												},
												"name": "ClientOptions",
												"package": "discord.js"
											},
											{
												"type": "literal",
												"value": "intents"
											}
										],
										"name": "Omit",
										"package": "typescript"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 195,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"children": [
												{
													"id": 196,
													"name": "intents",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1099,
															"character": 53
														}
													],
													"type": {
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "IntentsBitField"
														},
														"name": "IntentsBitField",
														"package": "discord.js"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														196
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/discord.js/typings/index.d.mts",
													"line": 1099,
													"character": 51
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.options"
							}
						},
						{
							"id": 158,
							"name": "premium",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 28,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L28"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 159,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 161,
											"name": "consume",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 30,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L30"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 160,
											"name": "owners",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 29,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L29"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 162,
											"name": "synchronize",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/client/XernerxClient.ts",
													"line": 31,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L31"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												161,
												160,
												162
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 28,
											"character": 34,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L28"
										}
									]
								}
							}
						},
						{
							"id": 199,
							"name": "readyTimestamp",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1101,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.readyTimestamp"
							}
						},
						{
							"id": 316,
							"name": "rest",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 570,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@discordjs/rest",
									"packagePath": "dist/index.d.mts",
									"qualifiedName": "REST"
								},
								"name": "REST",
								"package": "@discordjs/rest"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.rest"
							}
						},
						{
							"id": 157,
							"name": "settings",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 27,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L27"
								}
							],
							"type": {
								"type": "reference",
								"target": 862,
								"name": "XernerxClientOptions",
								"package": "xernerx"
							}
						},
						{
							"id": 201,
							"name": "shard",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1103,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ShardClientUtil"
										},
										"name": "ShardClientUtil",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.shard"
							}
						},
						{
							"id": 156,
							"name": "sharded",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 26,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L26"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 166,
							"name": "stats",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 36,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L36"
								}
							],
							"type": {
								"type": "reference",
								"target": 873,
								"name": "XernerxClientStats",
								"package": "xernerx"
							}
						},
						{
							"id": 200,
							"name": "sweepers",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1102,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "Sweepers"
								},
								"name": "Sweepers",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.sweepers"
							}
						},
						{
							"id": 155,
							"name": "token",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Config"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 25,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L25"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Client.token"
							}
						},
						{
							"id": 204,
							"name": "user",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1106,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientUser"
										},
										"name": "ClientUser",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.user"
							}
						},
						{
							"id": 205,
							"name": "users",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1107,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "UserManager"
								},
								"name": "UserManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.users"
							}
						},
						{
							"id": 206,
							"name": "voice",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1108,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "ClientVoiceManager"
								},
								"name": "ClientVoiceManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.voice"
							}
						},
						{
							"id": 207,
							"name": "ws",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1109,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "WebSocketManager"
								},
								"name": "WebSocketManager",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.ws"
							}
						},
						{
							"id": 150,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
									},
									{
										"kind": "code",
										"text": "`captureRejections`"
									},
									{
										"kind": "text",
										"text": " option on all new "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 458,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.captureRejections"
							}
						},
						{
							"id": 149,
							"name": "captureRejectionSymbol",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: "
									},
									{
										"kind": "code",
										"text": "`Symbol.for('nodejs.rejection')`"
									},
									{
										"kind": "text",
										"text": "\n\nSee how to write a custom "
									},
									{
										"kind": "code",
										"text": "`rejection handler`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 451,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 149,
									"name": "captureRejectionSymbol",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.captureRejectionSymbol"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.captureRejectionSymbol"
							}
						},
						{
							"id": 151,
							"name": "defaultMaxListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, a maximum of "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances\nusing the "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " method. To change the default\nfor _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " property\ncan be used. If this value is not a positive number, a "
									},
									{
										"kind": "code",
										"text": "`RangeError`"
									},
									{
										"kind": "text",
										"text": " is thrown.\n\nTake caution when setting the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " because the\nchange affects _all_ "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, including those created before\nthe change is made. However, calling "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " still has\nprecedence over "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis is not a hard limit. The "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`emitter.getMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`--trace-warnings`"
									},
									{
										"kind": "text",
										"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
									},
									{
										"kind": "code",
										"text": "`process.on('warning')`"
									},
									{
										"kind": "text",
										"text": " and will\nhave the additional "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`count`"
									},
									{
										"kind": "text",
										"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`'MaxListenersExceededWarning'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 497,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.defaultMaxListeners"
							}
						},
						{
							"id": 148,
							"name": "errorMonitor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This symbol shall be used to install a listener for only monitoring "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " events. Listeners installed using this symbol are called before the regular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is emitted. Therefore, the process will still crash if no\nregular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listener is installed."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 444,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 148,
									"name": "errorMonitor",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.errorMonitor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.errorMonitor"
							}
						},
						{
							"id": 191,
							"name": "emojis",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1097,
									"character": 13
								}
							],
							"getSignature": {
								"id": 192,
								"name": "emojis",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1097,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"packageName": "discord.js",
										"packagePath": "typings/index.d.mts",
										"qualifiedName": "BaseGuildEmojiManager"
									},
									"name": "BaseGuildEmojiManager",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Client.emojis"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.emojis"
							}
						},
						{
							"id": 197,
							"name": "readyAt",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1100,
									"character": 13
								}
							],
							"getSignature": {
								"id": 198,
								"name": "readyAt",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1100,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"packageName": "discord.js",
										"packagePath": "typings/index.d.mts",
										"qualifiedName": "If"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"packageName": "discord.js",
												"packagePath": "typings/index.d.mts",
												"qualifiedName": "Client.Ready"
											},
											"name": "Ready",
											"package": "discord.js",
											"qualifiedName": "Client.Ready",
											"refersToTypeParameter": true
										},
										{
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Date"
											},
											"name": "Date",
											"package": "typescript"
										}
									],
									"name": "If",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Client.readyAt"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.readyAt"
							}
						},
						{
							"id": 202,
							"name": "uptime",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1105,
									"character": 13
								}
							],
							"getSignature": {
								"id": 203,
								"name": "uptime",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 1105,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"packageName": "discord.js",
										"packagePath": "typings/index.d.mts",
										"qualifiedName": "If"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"packageName": "discord.js",
												"packagePath": "typings/index.d.mts",
												"qualifiedName": "Client.Ready"
											},
											"name": "Ready",
											"package": "discord.js",
											"qualifiedName": "Client.Ready",
											"refersToTypeParameter": true
										},
										{
											"type": "intrinsic",
											"name": "number"
										}
									],
									"name": "If",
									"package": "discord.js"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "Client.uptime"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.uptime"
							}
						},
						{
							"id": 317,
							"name": "[asyncDispose]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 573,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 318,
									"name": "[asyncDispose]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 573,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.[asyncDispose]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.[asyncDispose]"
							}
						},
						{
							"id": 319,
							"name": "[captureRejectionSymbol]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 320,
									"name": "[captureRejectionSymbol]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 136,
											"character": 8
										}
									],
									"typeParameters": [
										{
											"id": 321,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 322,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										},
										{
											"id": 323,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 324,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "AnyRest"
												},
												"name": "AnyRest",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.[captureRejectionSymbol]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.[captureRejectionSymbol]"
							}
						},
						{
							"id": 325,
							"name": "addListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 596,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 326,
									"name": "addListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.on(eventName, listener)`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 596,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 327,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 328,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 329,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 330,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 331,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 332,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.addListener"
							}
						},
						{
							"id": 185,
							"name": "connect",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/client/XernerxClient.ts",
									"line": 124,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L124"
								}
							],
							"signatures": [
								{
									"id": 186,
									"name": "connect",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Connects the client to Discord and initializes various client statistics and handlers."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the client successfully logs in, or rejects with an error message if the login fails."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/client/XernerxClient.ts",
											"line": 124,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L124"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 210,
							"name": "deleteWebhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1111,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 211,
									"name": "deleteWebhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1111,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 212,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 213,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "WebhookDeleteOptions"
												},
												"name": "WebhookDeleteOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.deleteWebhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.deleteWebhook"
							}
						},
						{
							"id": 208,
							"name": "destroy",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1110,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 209,
									"name": "destroy",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1110,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.destroy"
							}
						},
						{
							"id": 285,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1140,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1141,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 286,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronously calls each of the listeners registered for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " if the event had listeners, "
											},
											{
												"kind": "code",
												"text": "`false`"
											},
											{
												"kind": "text",
												"text": " otherwise.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1140,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 287,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 288,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 287,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 289,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": 287,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.emit"
									}
								},
								{
									"id": 290,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1141,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 291,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 292,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 291,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"packageName": "discord.js",
																"packagePath": "typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 293,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.emit"
							}
						},
						{
							"id": 375,
							"name": "eventNames",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 921,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 376,
									"name": "eventNames",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
											},
											{
												"kind": "code",
												"text": "`Symbol`"
											},
											{
												"kind": "text",
												"text": "s.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 921,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.eventNames"
							}
						},
						{
							"id": 214,
							"name": "fetchGuildPreview",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1112,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 215,
									"name": "fetchGuildPreview",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1112,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 216,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "GuildResolvable"
												},
												"name": "GuildResolvable",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "GuildPreview"
												},
												"name": "GuildPreview",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchGuildPreview"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchGuildPreview"
							}
						},
						{
							"id": 221,
							"name": "fetchGuildTemplate",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1114,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 222,
									"name": "fetchGuildTemplate",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1114,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 223,
											"name": "template",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "GuildTemplate"
												},
												"name": "GuildTemplate",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchGuildTemplate"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchGuildTemplate"
							}
						},
						{
							"id": 242,
							"name": "fetchGuildWidget",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1122,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 243,
									"name": "fetchGuildWidget",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1122,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 244,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "GuildResolvable"
												},
												"name": "GuildResolvable",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Widget"
												},
												"name": "Widget",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchGuildWidget"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchGuildWidget"
							}
						},
						{
							"id": 217,
							"name": "fetchInvite",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1113,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 218,
									"name": "fetchInvite",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1113,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 219,
											"name": "invite",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 220,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "ClientFetchInviteOptions"
												},
												"name": "ClientFetchInviteOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Invite"
												},
												"name": "Invite",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchInvite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchInvite"
							}
						},
						{
							"id": 236,
							"name": "fetchPremiumStickerPacks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1120,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 237,
									"name": "fetchPremiumStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Use "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "Client.fetchStickerPacks",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Client.fetchStickerPacks"
														}
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1120,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "StickerPack"
														},
														"name": "StickerPack",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchPremiumStickerPacks"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchPremiumStickerPacks"
							}
						},
						{
							"id": 226,
							"name": "fetchSticker",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1116,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 227,
									"name": "fetchSticker",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1116,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 228,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Sticker"
												},
												"name": "Sticker",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchSticker"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchSticker"
							}
						},
						{
							"id": 229,
							"name": "fetchStickerPacks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1117,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1118,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 230,
									"name": "fetchStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1117,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 231,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 232,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 233,
															"name": "packId",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1117,
																	"character": 38
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																233
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1117,
															"character": 36
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "StickerPack"
												},
												"name": "StickerPack",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchStickerPacks"
									}
								},
								{
									"id": 234,
									"name": "fetchStickerPacks",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1118,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 235,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "StickerPackFetchOptions"
												},
												"name": "StickerPackFetchOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "StickerPack"
														},
														"name": "StickerPack",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchStickerPacks"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchStickerPacks"
							}
						},
						{
							"id": 224,
							"name": "fetchVoiceRegions",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1115,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 225,
									"name": "fetchVoiceRegions",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1115,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "@discordjs/collection",
													"packagePath": "dist/index.d.ts",
													"qualifiedName": "Collection"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "VoiceRegion"
														},
														"name": "VoiceRegion",
														"package": "discord.js"
													}
												],
												"name": "Collection",
												"package": "@discordjs/collection"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchVoiceRegions"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchVoiceRegions"
							}
						},
						{
							"id": 238,
							"name": "fetchWebhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1121,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 239,
									"name": "fetchWebhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1121,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 240,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 241,
											"name": "token",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Webhook"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord-api-types",
															"packagePath": "payloads/v10/webhook.ts",
															"qualifiedName": "WebhookType"
														},
														"name": "WebhookType",
														"package": "discord-api-types"
													}
												],
												"name": "Webhook",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.fetchWebhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.fetchWebhook"
							}
						},
						{
							"id": 245,
							"name": "generateInvite",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1123,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 246,
									"name": "generateInvite",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1123,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 247,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "InviteGenerationOptions"
												},
												"name": "InviteGenerationOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.generateInvite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.generateInvite"
							}
						},
						{
							"id": 344,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 773,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 345,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current max listener value for the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " which is either\nset by "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners(n)`"
											},
											{
												"kind": "text",
												"text": " or defaults to "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "EventEmitter.defaultMaxListeners",
												"target": 151
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v1.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 773,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.getMaxListeners"
							}
						},
						{
							"id": 251,
							"name": "isReady",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1125,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 252,
									"name": "isReady",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1125,
											"character": 9
										}
									],
									"type": {
										"type": "predicate",
										"name": "this",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": {
												"packageName": "discord.js",
												"packagePath": "typings/index.d.mts",
												"qualifiedName": "Client"
											},
											"typeArguments": [
												{
													"type": "literal",
													"value": true
												}
											],
											"name": "Client",
											"package": "discord.js"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.isReady"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.isReady"
							}
						},
						{
							"id": 354,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 867,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 355,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the number of listeners listening for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\nIf "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v3.2.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 867,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 356,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 357,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 358,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event handler function"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Function"
												},
												"name": "Function",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.listenerCount"
							}
						},
						{
							"id": 346,
							"name": "listeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 786,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 347,
									"name": "listeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 786,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 348,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 349,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.listeners"
							}
						},
						{
							"id": 248,
							"name": "login",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1124,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 249,
									"name": "login",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1124,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 250,
											"name": "token",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.login"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.login"
							}
						},
						{
							"id": 294,
							"name": "off",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1143,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1144,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 295,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.removeListener()`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v10.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1143,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 296,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 297,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 296,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 298,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 299,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1143,
															"character": 71
														}
													],
													"signatures": [
														{
															"id": 300,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1143,
																	"character": 71
																}
															],
															"parameters": [
																{
																	"id": 301,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 296,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord.js",
																				"packagePath": "typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.off"
									}
								},
								{
									"id": 302,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1144,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 303,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 304,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 303,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"packageName": "discord.js",
																"packagePath": "typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 305,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 306,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1146,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 307,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1146,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 308,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.off"
							}
						},
						{
							"id": 255,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1128,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1129,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 256,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the end of the listeners array for the event\nnamed "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has already\nbeen added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " and\n"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.101"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1128,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 257,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 258,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 257,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 259,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 260,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1128,
															"character": 70
														}
													],
													"signatures": [
														{
															"id": 261,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1128,
																	"character": 70
																}
															],
															"parameters": [
																{
																	"id": 262,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 257,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord.js",
																				"packagePath": "typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.on"
									}
								},
								{
									"id": 263,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1129,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 264,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 265,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 264,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"packageName": "discord.js",
																"packagePath": "typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 266,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 267,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1131,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 268,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1131,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 269,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.on"
							}
						},
						{
							"id": 270,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1134,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1135,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 271,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time** "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". The\nnext time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this listener is removed and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The "
											},
											{
												"kind": "code",
												"text": "`emitter.prependOnceListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1134,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 272,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 273,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 272,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 274,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 275,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1134,
															"character": 72
														}
													],
													"signatures": [
														{
															"id": 276,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1134,
																	"character": 72
																}
															],
															"parameters": [
																{
																	"id": 277,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": 272,
																			"name": "Event",
																			"package": "discord.js",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord.js",
																				"packagePath": "typings/index.d.mts",
																				"qualifiedName": "ClientEvents"
																			},
																			"name": "ClientEvents",
																			"package": "discord.js"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.once"
									}
								},
								{
									"id": 278,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1135,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 279,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 280,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 279,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"packageName": "discord.js",
																"packagePath": "typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										},
										{
											"id": 281,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 282,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1137,
															"character": 14
														}
													],
													"signatures": [
														{
															"id": 283,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1137,
																	"character": 14
																}
															],
															"parameters": [
																{
																	"id": 284,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.once"
							}
						},
						{
							"id": 359,
							"name": "prependListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 885,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 360,
									"name": "prependListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the _beginning_ of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "\nand "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 885,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 361,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 362,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 363,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 364,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 365,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 366,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.prependListener"
							}
						},
						{
							"id": 367,
							"name": "prependOnceListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 901,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 368,
									"name": "prependOnceListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " to the _beginning_ of the listeners array. The next time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 901,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 369,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 370,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 371,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 372,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 373,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 374,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.prependOnceListener"
							}
						},
						{
							"id": 350,
							"name": "rawListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 817,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 351,
									"name": "rawListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ",\nincluding any wrappers (such as those created by "
											},
											{
												"kind": "code",
												"text": "`.once()`"
											},
											{
												"kind": "text",
												"text": ").\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 817,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 352,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 353,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.rawListeners"
							}
						},
						{
							"id": 309,
							"name": "removeAllListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1149,
									"character": 9
								},
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1150,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 310,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes all listeners, or those of the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1149,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 311,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 312,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": 311,
												"name": "Event",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.removeAllListeners"
									}
								},
								{
									"id": 313,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1150,
											"character": 9
										}
									],
									"typeParameters": [
										{
											"id": 314,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 315,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Exclude"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 314,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													{
														"type": "typeOperator",
														"operator": "keyof",
														"target": {
															"type": "reference",
															"target": {
																"packageName": "discord.js",
																"packagePath": "typings/index.d.mts",
																"qualifiedName": "ClientEvents"
															},
															"name": "ClientEvents",
															"package": "discord.js"
														}
													}
												],
												"name": "Exclude",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.removeAllListeners"
							}
						},
						{
							"id": 333,
							"name": "removeListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 741,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 334,
									"name": "removeListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes the specified "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " from the listener array for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
											},
											{
												"kind": "text",
												"text": "\n\n"
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", then "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`removeAllListeners()`"
											},
											{
												"kind": "text",
												"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
											},
											{
												"kind": "code",
												"text": "`emit()`"
											},
											{
												"kind": "text",
												"text": " in progress. Subsequent events behave as expected.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
											},
											{
												"kind": "code",
												"text": "`emitter.listeners()`"
											},
											{
												"kind": "text",
												"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove the most\nrecently added instance. In the example the "
											},
											{
												"kind": "code",
												"text": "`once('ping')`"
											},
											{
												"kind": "text",
												"text": " listener is removed:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 741,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 335,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 336,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 337,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 338,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 339,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 340,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.removeListener"
							}
						},
						{
							"id": 341,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 767,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 342,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "By default "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s will print a warning if more than "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners()`"
											},
											{
												"kind": "text",
												"text": " method allows the limit to be\nmodified for this specific "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance. The value can be set to "
											},
											{
												"kind": "code",
												"text": "`Infinity`"
											},
											{
												"kind": "text",
												"text": " (or "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.5"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 767,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 343,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.setMaxListeners"
							}
						},
						{
							"id": 253,
							"name": "toJSON",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1126,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 254,
									"name": "toJSON",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1126,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.toJSON"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.toJSON"
							}
						},
						{
							"id": 141,
							"name": "addAbortListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 436,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 142,
									"name": "addAbortListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Listens once to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on the provided "
											},
											{
												"kind": "code",
												"text": "`signal`"
											},
											{
												"kind": "text",
												"text": ".\n\nListening to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
											},
											{
												"kind": "code",
												"text": "`e.stopImmediatePropagation()`"
											},
											{
												"kind": "text",
												"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
											},
											{
												"kind": "code",
												"text": "`stopImmediatePropagation`"
											},
											{
												"kind": "text",
												"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v20.5.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Disposable that removes the "
													},
													{
														"kind": "code",
														"text": "`abort`"
													},
													{
														"kind": "text",
														"text": " listener."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 436,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 143,
											"name": "signal",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "web-globals/abortcontroller.d.ts",
													"qualifiedName": "__global.AbortSignal"
												},
												"name": "AbortSignal",
												"package": "@types/node",
												"qualifiedName": "__global.AbortSignal"
											}
										},
										{
											"id": 144,
											"name": "resource",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 145,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 436,
															"character": 63
														}
													],
													"signatures": [
														{
															"id": 146,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 436,
																	"character": 63
																}
															],
															"parameters": [
																{
																	"id": 147,
																	"name": "event",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "@types/node",
																			"packagePath": "web-globals/events.d.ts",
																			"qualifiedName": "__global.Event"
																		},
																		"name": "Event",
																		"package": "@types/node",
																		"qualifiedName": "__global.Event"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.esnext.disposable.d.ts",
											"qualifiedName": "Disposable"
										},
										"name": "Disposable",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.addAbortListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.addAbortListener"
							}
						},
						{
							"id": 130,
							"name": "getEventListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 131,
									"name": "getEventListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.listeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.2.0, v14.17.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 358,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 132,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "@types/node",
																	"packagePath": "events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "web-globals/events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										},
										{
											"id": 133,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.getEventListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.getEventListeners"
							}
						},
						{
							"id": 134,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 135,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the currently set max amount of listeners.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.getMaxListeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v19.9.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 387,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 136,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "@types/node",
																	"packagePath": "events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "web-globals/events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.getMaxListeners"
							}
						},
						{
							"id": 126,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 127,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A class method that returns the number of listeners for the given "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " registered on the given "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.9.12"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Since v3.2.0 - Use "
													},
													{
														"kind": "code",
														"text": "`listenerCount`"
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 330,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 128,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The emitter to query"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 129,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event name"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.listenerCount"
							}
						},
						{
							"id": 117,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1089,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 118,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											},
											{
												"kind": "text",
												"text": "\n\nUse the "
											},
											{
												"kind": "code",
												"text": "`close`"
											},
											{
												"kind": "text",
												"text": " option to specify an array of event names that will end the iteration:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An "
													},
													{
														"kind": "code",
														"text": "`AsyncIterator`"
													},
													{
														"kind": "text",
														"text": " that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1089,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 119,
											"name": "Emitter",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node"
											}
										},
										{
											"id": 120,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 121,
											"name": "eventEmitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 119,
												"name": "Emitter",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 122,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 119,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "reference",
													"target": 120,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												}
											}
										},
										{
											"id": 123,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 124,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 125,
															"name": "signal",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1092,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "@types/node",
																	"packagePath": "web-globals/abortcontroller.d.ts",
																	"qualifiedName": "__global.AbortSignal"
																},
																"name": "AbortSignal",
																"package": "@types/node",
																"qualifiedName": "__global.AbortSignal"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																125
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1092,
															"character": 14
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "AsyncEventIterator"
										},
										"typeArguments": [
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 119,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": 120,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "ClientEvents"
														},
														"name": "ClientEvents",
														"package": "discord.js"
													}
												},
												"falseType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											}
										],
										"name": "AsyncEventIterator",
										"package": "discord.js"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.on"
							}
						},
						{
							"id": 108,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 1084,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 109,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Override inherited static EventEmitter methods, with added type checks for Client events."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 1084,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 110,
											"name": "Emitter",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "EventEmitter"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "events.d.ts",
															"qualifiedName": "DefaultEventMap"
														},
														"name": "DefaultEventMap",
														"package": "@types/node"
													}
												],
												"name": "EventEmitter",
												"package": "@types/node"
											}
										},
										{
											"id": 111,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "ClientEvents"
													},
													"name": "ClientEvents",
													"package": "discord.js"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 112,
											"name": "eventEmitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": 110,
												"name": "Emitter",
												"package": "discord.js",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 113,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 110,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "reference",
													"target": 111,
													"name": "Event",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"falseType": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "symbol"
														}
													]
												}
											}
										},
										{
											"id": 114,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 115,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 116,
															"name": "signal",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord.js/typings/index.d.mts",
																	"line": 1087,
																	"character": 16
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "@types/node",
																	"packagePath": "web-globals/abortcontroller.d.ts",
																	"qualifiedName": "__global.AbortSignal"
																},
																"name": "AbortSignal",
																"package": "@types/node",
																"qualifiedName": "__global.AbortSignal"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																116
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord.js/typings/index.d.mts",
															"line": 1087,
															"character": 14
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "conditional",
												"checkType": {
													"type": "reference",
													"target": 110,
													"name": "Emitter",
													"package": "discord.js",
													"refersToTypeParameter": true
												},
												"extendsType": {
													"type": "reference",
													"target": {
														"packageName": "discord.js",
														"packagePath": "typings/index.d.mts",
														"qualifiedName": "Client"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "boolean"
														}
													],
													"name": "Client",
													"package": "discord.js"
												},
												"trueType": {
													"type": "indexedAccess",
													"indexType": {
														"type": "reference",
														"target": 111,
														"name": "Event",
														"package": "discord.js",
														"refersToTypeParameter": true
													},
													"objectType": {
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "ClientEvents"
														},
														"name": "ClientEvents",
														"package": "discord.js"
													}
												},
												"falseType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.once"
							}
						},
						{
							"id": 137,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 138,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 402,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 139,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A non-negative number. The maximum number of listeners per "
													},
													{
														"kind": "code",
														"text": "`EventTarget`"
													},
													{
														"kind": "text",
														"text": " event."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 140,
											"name": "eventTargets",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, "
													},
													{
														"kind": "code",
														"text": "`n`"
													},
													{
														"kind": "text",
														"text": " is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
													}
												]
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": {
																"packageName": "@types/node",
																"packagePath": "events.d.ts",
																"qualifiedName": "__global.NodeJS.EventEmitter"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": {
																		"packageName": "@types/node",
																		"packagePath": "events.d.ts",
																		"qualifiedName": "DefaultEventMap"
																	},
																	"name": "DefaultEventMap",
																	"package": "@types/node"
																}
															],
															"name": "EventEmitter",
															"package": "@types/node",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														{
															"type": "reference",
															"target": {
																"packageName": "@types/node",
																"packagePath": "web-globals/events.d.ts",
																"qualifiedName": "__global.EventTarget"
															},
															"name": "EventTarget",
															"package": "@types/node",
															"qualifiedName": "__global.EventTarget"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "Client.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Client.setMaxListeners"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								152
							]
						},
						{
							"title": "Properties",
							"children": [
								189,
								168,
								190,
								167,
								176,
								180,
								193,
								172,
								181,
								163,
								194,
								158,
								199,
								316,
								157,
								201,
								156,
								166,
								200,
								155,
								204,
								205,
								206,
								207,
								150,
								149,
								151,
								148
							]
						},
						{
							"title": "Accessors",
							"children": [
								191,
								197,
								202
							]
						},
						{
							"title": "Methods",
							"children": [
								317,
								319,
								325,
								185,
								210,
								208,
								285,
								375,
								214,
								221,
								242,
								217,
								236,
								226,
								229,
								224,
								238,
								245,
								344,
								251,
								354,
								346,
								248,
								294,
								255,
								270,
								359,
								367,
								350,
								309,
								333,
								341,
								253,
								141,
								130,
								134,
								126,
								117,
								108,
								137
							]
						}
					],
					"sources": [
						{
							"fileName": "src/client/XernerxClient.ts",
							"line": 23,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L23"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "discord.js",
								"packagePath": "typings/index.d.mts",
								"qualifiedName": "Client"
							},
							"name": "Client",
							"package": "discord.js"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						107
					]
				}
			],
			"sources": [
				{
					"fileName": "src/client/XernerxClient.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxClient.ts#L1"
				}
			]
		},
		{
			"id": 377,
			"name": "client/XernerxShardClient",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 378,
					"name": "XernerxShardClient",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 423,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/client/XernerxShardClient.ts",
									"line": 23,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L23"
								}
							],
							"signatures": [
								{
									"id": 424,
									"name": "XernerxShardClient",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/client/XernerxShardClient.ts",
											"line": 23,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L23"
										}
									],
									"parameters": [
										{
											"id": 425,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord-hybrid-sharding",
															"packagePath": "src/types/shared.ts",
															"qualifiedName": "ClusterManagerOptions"
														},
														"name": "ClusterManagerOptions",
														"package": "discord-hybrid-sharding"
													},
													{
														"type": "reference",
														"target": 912,
														"name": "XernerxShardClientOptions",
														"package": "xernerx"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 378,
										"name": "XernerxShardClient",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.constructor"
							}
						},
						{
							"id": 439,
							"name": "clusterData",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Data, which is passed to the workerData or the processEnv"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.clusterData"
							}
						},
						{
							"id": 453,
							"name": "clusterList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An Array of IDS[Number], which should be assigned to the spawned Clusters"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 71,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.clusterList"
							}
						},
						{
							"id": 440,
							"name": "clusterOptions",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Options, which is passed when forking a child or creating a thread"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 28,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 441,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											}
										}
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Structures/Child.ts",
											"qualifiedName": "ChildProcessOptions"
										},
										"name": "ChildProcessOptions",
										"package": "discord-hybrid-sharding"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Structures/Worker.ts",
											"qualifiedName": "WorkerThreadOptions"
										},
										"name": "WorkerThreadOptions",
										"package": "discord-hybrid-sharding"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.clusterOptions"
							}
						},
						{
							"id": 451,
							"name": "clusters",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A collection of all clusters the manager spawned"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 66,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es2015.collection.d.ts",
									"qualifiedName": "Map"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Core/Cluster.ts",
											"qualifiedName": "Cluster"
										},
										"name": "Cluster",
										"package": "discord-hybrid-sharding"
									}
								],
								"name": "Map",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.clusters"
							}
						},
						{
							"id": 547,
							"name": "emit",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 172,
									"character": 4
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 548,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 172,
													"character": 11
												}
											],
											"signatures": [
												{
													"id": 549,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 172,
															"character": 11
														}
													],
													"typeParameters": [
														{
															"id": 550,
															"name": "K",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-hybrid-sharding",
																		"packagePath": "src/types/shared.ts",
																		"qualifiedName": "ClusterManagerEvents"
																	},
																	"name": "ClusterManagerEvents",
																	"package": "discord-hybrid-sharding"
																}
															}
														}
													],
													"parameters": [
														{
															"id": 551,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": 550,
																"name": "K",
																"package": "discord-hybrid-sharding",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 552,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"target": 550,
																	"name": "K",
																	"package": "discord-hybrid-sharding",
																	"refersToTypeParameter": true
																},
																"objectType": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-hybrid-sharding",
																		"packagePath": "src/types/shared.ts",
																		"qualifiedName": "ClusterManagerEvents"
																	},
																	"name": "ClusterManagerEvents",
																	"package": "discord-hybrid-sharding"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 553,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 172,
													"character": 109
												}
											],
											"signatures": [
												{
													"id": 554,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 172,
															"character": 109
														}
													],
													"typeParameters": [
														{
															"id": 555,
															"name": "S",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															}
														}
													],
													"parameters": [
														{
															"id": 556,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "typescript",
																	"packagePath": "lib/lib.es5.d.ts",
																	"qualifiedName": "Exclude"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 555,
																		"name": "S",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "typeOperator",
																		"operator": "keyof",
																		"target": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord-hybrid-sharding",
																				"packagePath": "src/types/shared.ts",
																				"qualifiedName": "ClusterManagerEvents"
																			},
																			"name": "ClusterManagerEvents",
																			"package": "discord-hybrid-sharding"
																		}
																	}
																],
																"name": "Exclude",
																"package": "typescript"
															}
														},
														{
															"id": 557,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.emit"
							}
						},
						{
							"id": 448,
							"name": "execArgv",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of arguments to pass to the executable (only when "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "ClusterManager#mode",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Core/ClusterManager.ts",
											"qualifiedName": "ClusterManager.mode"
										}
									},
									{
										"kind": "text",
										"text": " is "
									},
									{
										"kind": "code",
										"text": "`process`"
									},
									{
										"kind": "text",
										"text": ")"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 54,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.execArgv"
							}
						},
						{
							"id": 442,
							"name": "file",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Path to the bot script file"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 32,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.file"
							}
						},
						{
							"id": 457,
							"name": "heartbeat",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "HeartbeatManager Plugin"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 76,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/Plugins/HeartbeatSystem.ts",
									"qualifiedName": "HeartbeatManager"
								},
								"name": "HeartbeatManager",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.heartbeat"
							}
						},
						{
							"id": 459,
							"name": "hooks",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Containing some useful hook funtions"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 80,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/Structures/ManagerHooks.ts",
									"qualifiedName": "ClusterManagerHooks"
								},
								"name": "ClusterManagerHooks",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.hooks"
							}
						},
						{
							"id": 446,
							"name": "mode",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Mode for Clusters to spawn with"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 46,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "process"
									},
									{
										"type": "literal",
										"value": "worker"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.mode"
							}
						},
						{
							"id": 558,
							"name": "off",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 173,
									"character": 4
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 559,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 173,
													"character": 10
												}
											],
											"signatures": [
												{
													"id": 560,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 173,
															"character": 10
														}
													],
													"typeParameters": [
														{
															"id": 561,
															"name": "K",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-hybrid-sharding",
																		"packagePath": "src/types/shared.ts",
																		"qualifiedName": "ClusterManagerEvents"
																	},
																	"name": "ClusterManagerEvents",
																	"package": "discord-hybrid-sharding"
																}
															}
														}
													],
													"parameters": [
														{
															"id": 562,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": 561,
																"name": "K",
																"package": "discord-hybrid-sharding",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 563,
															"name": "listener",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 564,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																			"line": 173,
																			"character": 69
																		}
																	],
																	"signatures": [
																		{
																			"id": 565,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {
																				"isExternal": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 173,
																					"character": 69
																				}
																			],
																			"parameters": [
																				{
																					"id": 566,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isExternal": true,
																						"isRest": true
																					},
																					"type": {
																						"type": "indexedAccess",
																						"indexType": {
																							"type": "reference",
																							"target": 561,
																							"name": "K",
																							"package": "discord-hybrid-sharding",
																							"refersToTypeParameter": true
																						},
																						"objectType": {
																							"type": "reference",
																							"target": {
																								"packageName": "discord-hybrid-sharding",
																								"packagePath": "src/types/shared.ts",
																								"qualifiedName": "ClusterManagerEvents"
																							},
																							"name": "ClusterManagerEvents",
																							"package": "discord-hybrid-sharding"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 567,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 173,
													"character": 125
												}
											],
											"signatures": [
												{
													"id": 568,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 173,
															"character": 125
														}
													],
													"typeParameters": [
														{
															"id": 569,
															"name": "S",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															}
														}
													],
													"parameters": [
														{
															"id": 570,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "typescript",
																	"packagePath": "lib/lib.es5.d.ts",
																	"qualifiedName": "Exclude"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 569,
																		"name": "S",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "typeOperator",
																		"operator": "keyof",
																		"target": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord-hybrid-sharding",
																				"packagePath": "src/types/shared.ts",
																				"qualifiedName": "ClusterManagerEvents"
																			},
																			"name": "ClusterManagerEvents",
																			"package": "discord-hybrid-sharding"
																		}
																	}
																],
																"name": "Exclude",
																"package": "typescript"
															}
														},
														{
															"id": 571,
															"name": "listener",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 572,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																			"line": 173,
																			"character": 210
																		}
																	],
																	"signatures": [
																		{
																			"id": 573,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {
																				"isExternal": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 173,
																					"character": 210
																				}
																			],
																			"parameters": [
																				{
																					"id": 574,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isExternal": true,
																						"isRest": true
																					},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.off"
							}
						},
						{
							"id": 575,
							"name": "on",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 174,
									"character": 4
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 576,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 174,
													"character": 9
												}
											],
											"signatures": [
												{
													"id": 577,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 174,
															"character": 9
														}
													],
													"typeParameters": [
														{
															"id": 578,
															"name": "K",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-hybrid-sharding",
																		"packagePath": "src/types/shared.ts",
																		"qualifiedName": "ClusterManagerEvents"
																	},
																	"name": "ClusterManagerEvents",
																	"package": "discord-hybrid-sharding"
																}
															}
														}
													],
													"parameters": [
														{
															"id": 579,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": 578,
																"name": "K",
																"package": "discord-hybrid-sharding",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 580,
															"name": "listener",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 581,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																			"line": 174,
																			"character": 68
																		}
																	],
																	"signatures": [
																		{
																			"id": 582,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {
																				"isExternal": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 174,
																					"character": 68
																				}
																			],
																			"parameters": [
																				{
																					"id": 583,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isExternal": true,
																						"isRest": true
																					},
																					"type": {
																						"type": "indexedAccess",
																						"indexType": {
																							"type": "reference",
																							"target": 578,
																							"name": "K",
																							"package": "discord-hybrid-sharding",
																							"refersToTypeParameter": true
																						},
																						"objectType": {
																							"type": "reference",
																							"target": {
																								"packageName": "discord-hybrid-sharding",
																								"packagePath": "src/types/shared.ts",
																								"qualifiedName": "ClusterManagerEvents"
																							},
																							"name": "ClusterManagerEvents",
																							"package": "discord-hybrid-sharding"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 584,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 174,
													"character": 124
												}
											],
											"signatures": [
												{
													"id": 585,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 174,
															"character": 124
														}
													],
													"typeParameters": [
														{
															"id": 586,
															"name": "S",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															}
														}
													],
													"parameters": [
														{
															"id": 587,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "typescript",
																	"packagePath": "lib/lib.es5.d.ts",
																	"qualifiedName": "Exclude"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 586,
																		"name": "S",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "typeOperator",
																		"operator": "keyof",
																		"target": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord-hybrid-sharding",
																				"packagePath": "src/types/shared.ts",
																				"qualifiedName": "ClusterManagerEvents"
																			},
																			"name": "ClusterManagerEvents",
																			"package": "discord-hybrid-sharding"
																		}
																	}
																],
																"name": "Exclude",
																"package": "typescript"
															}
														},
														{
															"id": 588,
															"name": "listener",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 589,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																			"line": 174,
																			"character": 209
																		}
																	],
																	"signatures": [
																		{
																			"id": 590,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {
																				"isExternal": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 174,
																					"character": 209
																				}
																			],
																			"parameters": [
																				{
																					"id": 591,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isExternal": true,
																						"isRest": true
																					},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.on"
							}
						},
						{
							"id": 592,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 175,
									"character": 4
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 593,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 175,
													"character": 11
												}
											],
											"signatures": [
												{
													"id": 594,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 175,
															"character": 11
														}
													],
													"typeParameters": [
														{
															"id": 595,
															"name": "K",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-hybrid-sharding",
																		"packagePath": "src/types/shared.ts",
																		"qualifiedName": "ClusterManagerEvents"
																	},
																	"name": "ClusterManagerEvents",
																	"package": "discord-hybrid-sharding"
																}
															}
														}
													],
													"parameters": [
														{
															"id": 596,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": 595,
																"name": "K",
																"package": "discord-hybrid-sharding",
																"refersToTypeParameter": true
															}
														},
														{
															"id": 597,
															"name": "listener",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 598,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																			"line": 175,
																			"character": 70
																		}
																	],
																	"signatures": [
																		{
																			"id": 599,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {
																				"isExternal": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 175,
																					"character": 70
																				}
																			],
																			"parameters": [
																				{
																					"id": 600,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isExternal": true,
																						"isRest": true
																					},
																					"type": {
																						"type": "indexedAccess",
																						"indexType": {
																							"type": "reference",
																							"target": 595,
																							"name": "K",
																							"package": "discord-hybrid-sharding",
																							"refersToTypeParameter": true
																						},
																						"objectType": {
																							"type": "reference",
																							"target": {
																								"packageName": "discord-hybrid-sharding",
																								"packagePath": "src/types/shared.ts",
																								"qualifiedName": "ClusterManagerEvents"
																							},
																							"name": "ClusterManagerEvents",
																							"package": "discord-hybrid-sharding"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 601,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 175,
													"character": 126
												}
											],
											"signatures": [
												{
													"id": 602,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 175,
															"character": 126
														}
													],
													"typeParameters": [
														{
															"id": 603,
															"name": "S",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															}
														}
													],
													"parameters": [
														{
															"id": 604,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "typescript",
																	"packagePath": "lib/lib.es5.d.ts",
																	"qualifiedName": "Exclude"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 603,
																		"name": "S",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "typeOperator",
																		"operator": "keyof",
																		"target": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord-hybrid-sharding",
																				"packagePath": "src/types/shared.ts",
																				"qualifiedName": "ClusterManagerEvents"
																			},
																			"name": "ClusterManagerEvents",
																			"package": "discord-hybrid-sharding"
																		}
																	}
																],
																"name": "Exclude",
																"package": "typescript"
															}
														},
														{
															"id": 605,
															"name": "listener",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 606,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																			"line": 175,
																			"character": 211
																		}
																	],
																	"signatures": [
																		{
																			"id": 607,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {
																				"isExternal": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 175,
																					"character": 211
																				}
																			],
																			"parameters": [
																				{
																					"id": 608,
																					"name": "args",
																					"variant": "param",
																					"kind": 32768,
																					"flags": {
																						"isExternal": true,
																						"isRest": true
																					},
																					"type": {
																						"type": "array",
																						"elementType": {
																							"type": "intrinsic",
																							"name": "any"
																						}
																					}
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.once"
							}
						},
						{
							"id": 426,
							"name": "onlineShards",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxShardClient.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L14"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es2015.collection.d.ts",
									"qualifiedName": "Set"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Core/Cluster.ts",
											"qualifiedName": "Cluster"
										},
										"name": "Cluster",
										"package": "discord-hybrid-sharding"
									}
								],
								"name": "Set",
								"package": "typescript"
							}
						},
						{
							"id": 456,
							"name": "promise",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 74,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/Structures/PromiseHandler.ts",
									"qualifiedName": "PromiseHandler"
								},
								"name": "PromiseHandler",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.promise"
							}
						},
						{
							"id": 455,
							"name": "queue",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 73,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/Structures/Queue.ts",
									"qualifiedName": "Queue"
								},
								"name": "Queue",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.queue"
							}
						},
						{
							"id": 458,
							"name": "recluster",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Reclustering Plugin"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 78,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/Plugins/ReCluster.ts",
									"qualifiedName": "ReClusterManager"
								},
								"name": "ReClusterManager",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.recluster"
							}
						},
						{
							"id": 609,
							"name": "removeAllListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 176,
									"character": 4
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 610,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 176,
													"character": 25
												}
											],
											"signatures": [
												{
													"id": 611,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 176,
															"character": 25
														}
													],
													"typeParameters": [
														{
															"id": 612,
															"name": "K",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "typeOperator",
																"operator": "keyof",
																"target": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-hybrid-sharding",
																		"packagePath": "src/types/shared.ts",
																		"qualifiedName": "ClusterManagerEvents"
																	},
																	"name": "ClusterManagerEvents",
																	"package": "discord-hybrid-sharding"
																}
															}
														}
													],
													"parameters": [
														{
															"id": 613,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"target": 612,
																"name": "K",
																"package": "discord-hybrid-sharding",
																"refersToTypeParameter": true
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 614,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
													"line": 176,
													"character": 87
												}
											],
											"signatures": [
												{
													"id": 615,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 176,
															"character": 87
														}
													],
													"typeParameters": [
														{
															"id": 616,
															"name": "S",
															"variant": "typeParam",
															"kind": 131072,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "symbol"
																	}
																]
															}
														}
													],
													"parameters": [
														{
															"id": 617,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "typescript",
																	"packagePath": "lib/lib.es5.d.ts",
																	"qualifiedName": "Exclude"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 616,
																		"name": "S",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	},
																	{
																		"type": "typeOperator",
																		"operator": "keyof",
																		"target": {
																			"type": "reference",
																			"target": {
																				"packageName": "discord-hybrid-sharding",
																				"packagePath": "src/types/shared.ts",
																				"qualifiedName": "ClusterManagerEvents"
																			},
																			"name": "ClusterManagerEvents",
																			"package": "discord-hybrid-sharding"
																		}
																	}
																],
																"name": "Exclude",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "this"
													}
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.removeAllListeners"
							}
						},
						{
							"id": 437,
							"name": "respawn",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Whether clusters should automatically respawn upon exiting"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 16,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.respawn"
							}
						},
						{
							"id": 438,
							"name": "restarts",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "How many times a cluster can maximally restart in the given interval"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/types/shared.ts",
									"qualifiedName": "ClusterRestartOptions"
								},
								"name": "ClusterRestartOptions",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.restarts"
							}
						},
						{
							"id": 447,
							"name": "shardArgs",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An array of arguments to pass to clusters (only when "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "ClusterManager#mode",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Core/ClusterManager.ts",
											"qualifiedName": "ClusterManager.mode"
										}
									},
									{
										"kind": "text",
										"text": " is "
									},
									{
										"kind": "code",
										"text": "`process`"
									},
									{
										"kind": "text",
										"text": ")"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 50,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.shardArgs"
							}
						},
						{
							"id": 452,
							"name": "shardClusterList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 67,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.shardClusterList"
							}
						},
						{
							"id": 449,
							"name": "shardList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "List of internal shard ids this cluster manager spawns"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 58,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.shardList"
							}
						},
						{
							"id": 445,
							"name": "shardsPerClusters",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Amount of Shards per Clusters"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.shardsPerClusters"
							}
						},
						{
							"id": 454,
							"name": "spawnOptions",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 72,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord-hybrid-sharding",
									"packagePath": "src/types/shared.ts",
									"qualifiedName": "ClusterManagerSpawnOptions"
								},
								"name": "ClusterManagerSpawnOptions",
								"package": "discord-hybrid-sharding"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.spawnOptions"
							}
						},
						{
							"id": 427,
							"name": "stats",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/client/XernerxShardClient.ts",
									"line": 15,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L15"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 428,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 430,
											"name": "guildCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxShardClient.ts",
													"line": 17,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L17"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 429,
											"name": "onlineSince",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxShardClient.ts",
													"line": 16,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L16"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 432,
											"name": "shardCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxShardClient.ts",
													"line": 19,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L19"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 434,
											"name": "shards",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxShardClient.ts",
													"line": 21,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L21"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "tuple"
													}
												]
											}
										},
										{
											"id": 431,
											"name": "userCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxShardClient.ts",
													"line": 18,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L18"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 433,
											"name": "voteCount",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/XernerxShardClient.ts",
													"line": 20,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L20"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												430,
												429,
												432,
												434,
												431,
												433
											]
										}
									],
									"sources": [
										{
											"fileName": "src/client/XernerxShardClient.ts",
											"line": 15,
											"character": 32,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L15"
										}
									]
								}
							}
						},
						{
							"id": 450,
							"name": "token",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Token to use for obtaining the automatic internal shards count, and passing to bot script"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 62,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.token"
							}
						},
						{
							"id": 444,
							"name": "totalClusters",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Amount of total clusters to spawn"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 40,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.totalClusters"
							}
						},
						{
							"id": 443,
							"name": "totalShards",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Amount of internal shards in total"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.totalShards"
							}
						},
						{
							"id": 421,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
									},
									{
										"kind": "code",
										"text": "`captureRejections`"
									},
									{
										"kind": "text",
										"text": " option on all new "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 458,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.captureRejections"
							}
						},
						{
							"id": 420,
							"name": "captureRejectionSymbol",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: "
									},
									{
										"kind": "code",
										"text": "`Symbol.for('nodejs.rejection')`"
									},
									{
										"kind": "text",
										"text": "\n\nSee how to write a custom "
									},
									{
										"kind": "code",
										"text": "`rejection handler`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 451,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 149,
									"name": "captureRejectionSymbol",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.captureRejectionSymbol"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.captureRejectionSymbol"
							}
						},
						{
							"id": 422,
							"name": "defaultMaxListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, a maximum of "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances\nusing the "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " method. To change the default\nfor _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " property\ncan be used. If this value is not a positive number, a "
									},
									{
										"kind": "code",
										"text": "`RangeError`"
									},
									{
										"kind": "text",
										"text": " is thrown.\n\nTake caution when setting the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " because the\nchange affects _all_ "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, including those created before\nthe change is made. However, calling "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " still has\nprecedence over "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis is not a hard limit. The "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`emitter.getMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " methods can be used to\ntemporarily avoid this warning:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`--trace-warnings`"
									},
									{
										"kind": "text",
										"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
									},
									{
										"kind": "code",
										"text": "`process.on('warning')`"
									},
									{
										"kind": "text",
										"text": " and will\nhave the additional "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`count`"
									},
									{
										"kind": "text",
										"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`'MaxListenersExceededWarning'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 497,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.defaultMaxListeners"
							}
						},
						{
							"id": 419,
							"name": "errorMonitor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This symbol shall be used to install a listener for only monitoring "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " events. Listeners installed using this symbol are called before the regular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is emitted. Therefore, the process will still crash if no\nregular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listener is installed."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 444,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 148,
									"name": "errorMonitor",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.errorMonitor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.errorMonitor"
							}
						},
						{
							"id": 543,
							"name": "_debug",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 169,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 544,
									"name": "_debug",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Logs out the Debug Messages\n<warn>Using this method just emits the Debug Event.</warn>\n<info>This is usually not necessary to manually specify.</info>"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 169,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 545,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 546,
											"name": "cluster",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager._debug"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager._debug"
							}
						},
						{
							"id": 618,
							"name": "[captureRejectionSymbol]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isOptional": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 136,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 619,
									"name": "[captureRejectionSymbol]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 136,
											"character": 8
										}
									],
									"typeParameters": [
										{
											"id": 620,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 621,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										},
										{
											"id": 622,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 623,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "AnyRest"
												},
												"name": "AnyRest",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.[captureRejectionSymbol]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.[captureRejectionSymbol]"
							}
						},
						{
							"id": 624,
							"name": "addListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 596,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 625,
									"name": "addListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "code",
												"text": "`emitter.on(eventName, listener)`"
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 596,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 626,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 627,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 628,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 629,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 630,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 631,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.addListener"
							}
						},
						{
							"id": 463,
							"name": "broadcast",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 89,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 464,
									"name": "broadcast",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message to all clusters."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 89,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 465,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/Structures/IPCMessage.ts",
													"qualifiedName": "BaseMessage"
												},
												"name": "BaseMessage",
												"package": "discord-hybrid-sharding"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcast"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.broadcast"
							}
						},
						{
							"id": 472,
							"name": "broadcastEval",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 101,
									"character": 4
								},
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 102,
									"character": 4
								},
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 103,
									"character": 4
								},
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 104,
									"character": 4
								},
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 108,
									"character": 4
								},
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 109,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 473,
									"name": "broadcastEval",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates a script on all clusters, or a given cluster, in the context of the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Client"
											},
											{
												"kind": "text",
												"text": "s."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Results of the script execution"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 101,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 474,
											"name": "script",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcastEval"
									}
								},
								{
									"id": 475,
									"name": "broadcastEval",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates a script on all clusters, or a given cluster, in the context of the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Client"
											},
											{
												"kind": "text",
												"text": "s."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Results of the script execution"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 102,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 476,
											"name": "script",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 477,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "evalOptions"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "object"
													}
												],
												"name": "evalOptions",
												"package": "discord-hybrid-sharding"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcastEval"
									}
								},
								{
									"id": 478,
									"name": "broadcastEval",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates a script on all clusters, or a given cluster, in the context of the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Client"
											},
											{
												"kind": "text",
												"text": "s."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Results of the script execution"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 103,
											"character": 4
										}
									],
									"typeParameters": [
										{
											"id": 479,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 480,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 481,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 103,
															"character": 25
														}
													],
													"signatures": [
														{
															"id": 482,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 103,
																	"character": 25
																}
															],
															"parameters": [
																{
																	"id": 483,
																	"name": "client",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "discord-hybrid-sharding",
																			"packagePath": "src/types/shared.ts",
																			"qualifiedName": "DjsDiscordClient"
																		},
																		"name": "DjsDiscordClient",
																		"package": "discord-hybrid-sharding"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "discord-hybrid-sharding",
																	"packagePath": "src/types/shared.ts",
																	"qualifiedName": "Awaitable"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 479,
																		"name": "T",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	}
																],
																"name": "Awaitable",
																"package": "discord-hybrid-sharding"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"packageName": "discord-hybrid-sharding",
														"packagePath": "src/types/shared.ts",
														"qualifiedName": "Serialized"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 479,
															"name": "T",
															"package": "discord-hybrid-sharding",
															"refersToTypeParameter": true
														}
													],
													"name": "Serialized",
													"package": "discord-hybrid-sharding"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcastEval"
									}
								},
								{
									"id": 484,
									"name": "broadcastEval",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates a script on all clusters, or a given cluster, in the context of the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Client"
											},
											{
												"kind": "text",
												"text": "s."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Results of the script execution"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 104,
											"character": 4
										}
									],
									"typeParameters": [
										{
											"id": 485,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 486,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 487,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 104,
															"character": 25
														}
													],
													"signatures": [
														{
															"id": 488,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 104,
																	"character": 25
																}
															],
															"parameters": [
																{
																	"id": 489,
																	"name": "client",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "discord-hybrid-sharding",
																			"packagePath": "src/types/shared.ts",
																			"qualifiedName": "DjsDiscordClient"
																		},
																		"name": "DjsDiscordClient",
																		"package": "discord-hybrid-sharding"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "discord-hybrid-sharding",
																	"packagePath": "src/types/shared.ts",
																	"qualifiedName": "Awaitable"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 485,
																		"name": "T",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	}
																],
																"name": "Awaitable",
																"package": "discord-hybrid-sharding"
															}
														}
													]
												}
											}
										},
										{
											"id": 490,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 491,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 492,
															"name": "cluster",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 105,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 493,
															"name": "timeout",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 106,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																492,
																493
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 104,
															"character": 79
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "Serialized"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 485,
														"name": "T",
														"package": "discord-hybrid-sharding",
														"refersToTypeParameter": true
													}
												],
												"name": "Serialized",
												"package": "discord-hybrid-sharding"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcastEval"
									}
								},
								{
									"id": 494,
									"name": "broadcastEval",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates a script on all clusters, or a given cluster, in the context of the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Client"
											},
											{
												"kind": "text",
												"text": "s."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Results of the script execution"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 108,
											"character": 4
										}
									],
									"typeParameters": [
										{
											"id": 495,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										},
										{
											"id": 496,
											"name": "P",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 497,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 498,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 108,
															"character": 28
														}
													],
													"signatures": [
														{
															"id": 499,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 108,
																	"character": 28
																}
															],
															"parameters": [
																{
																	"id": 500,
																	"name": "client",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "discord-hybrid-sharding",
																			"packagePath": "src/types/shared.ts",
																			"qualifiedName": "DjsDiscordClient"
																		},
																		"name": "DjsDiscordClient",
																		"package": "discord-hybrid-sharding"
																	}
																},
																{
																	"id": 501,
																	"name": "context",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "discord-hybrid-sharding",
																			"packagePath": "src/types/shared.ts",
																			"qualifiedName": "Serialized"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 496,
																				"name": "P",
																				"package": "discord-hybrid-sharding",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Serialized",
																		"package": "discord-hybrid-sharding"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "discord-hybrid-sharding",
																	"packagePath": "src/types/shared.ts",
																	"qualifiedName": "Awaitable"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 495,
																		"name": "T",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	}
																],
																"name": "Awaitable",
																"package": "discord-hybrid-sharding"
															}
														}
													]
												}
											}
										},
										{
											"id": 502,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "evalOptions"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 496,
														"name": "P",
														"package": "discord-hybrid-sharding",
														"refersToTypeParameter": true
													}
												],
												"name": "evalOptions",
												"package": "discord-hybrid-sharding"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"packageName": "discord-hybrid-sharding",
														"packagePath": "src/types/shared.ts",
														"qualifiedName": "Serialized"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 495,
															"name": "T",
															"package": "discord-hybrid-sharding",
															"refersToTypeParameter": true
														}
													],
													"name": "Serialized",
													"package": "discord-hybrid-sharding"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcastEval"
									}
								},
								{
									"id": 503,
									"name": "broadcastEval",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Evaluates a script on all clusters, or a given cluster, in the context of the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Client"
											},
											{
												"kind": "text",
												"text": "s."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Results of the script execution"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 109,
											"character": 4
										}
									],
									"typeParameters": [
										{
											"id": 504,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										},
										{
											"id": 505,
											"name": "P",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 506,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 507,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 109,
															"character": 28
														}
													],
													"signatures": [
														{
															"id": 508,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 109,
																	"character": 28
																}
															],
															"parameters": [
																{
																	"id": 509,
																	"name": "client",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "discord-hybrid-sharding",
																			"packagePath": "src/types/shared.ts",
																			"qualifiedName": "DjsDiscordClient"
																		},
																		"name": "DjsDiscordClient",
																		"package": "discord-hybrid-sharding"
																	}
																},
																{
																	"id": 510,
																	"name": "context",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "discord-hybrid-sharding",
																			"packagePath": "src/types/shared.ts",
																			"qualifiedName": "Serialized"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 505,
																				"name": "P",
																				"package": "discord-hybrid-sharding",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Serialized",
																		"package": "discord-hybrid-sharding"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": {
																	"packageName": "discord-hybrid-sharding",
																	"packagePath": "src/types/shared.ts",
																	"qualifiedName": "Awaitable"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": 504,
																		"name": "T",
																		"package": "discord-hybrid-sharding",
																		"refersToTypeParameter": true
																	}
																],
																"name": "Awaitable",
																"package": "discord-hybrid-sharding"
															}
														}
													]
												}
											}
										},
										{
											"id": 511,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "evalOptions"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 505,
														"name": "P",
														"package": "discord-hybrid-sharding",
														"refersToTypeParameter": true
													}
												],
												"name": "evalOptions",
												"package": "discord-hybrid-sharding"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "Serialized"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 504,
														"name": "T",
														"package": "discord-hybrid-sharding",
														"refersToTypeParameter": true
													}
												],
												"name": "Serialized",
												"package": "discord-hybrid-sharding"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.broadcastEval"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.broadcastEval"
							}
						},
						{
							"id": 466,
							"name": "createCluster",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 96,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 467,
									"name": "createCluster",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a single cluster.\n<warn>Using this method is usually not necessary if you use the spawn method.</warn>\n<info>This is usually not necessary to manually specify.</info>"
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Note that the created cluster needs to be explicitly spawned using its spawn method."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 96,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 468,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 469,
											"name": "shardsToSpawn",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										},
										{
											"id": 470,
											"name": "totalShards",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 471,
											"name": "recluster",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "discord-hybrid-sharding",
											"packagePath": "src/Core/Cluster.ts",
											"qualifiedName": "Cluster"
										},
										"name": "Cluster",
										"package": "discord-hybrid-sharding"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.createCluster"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.createCluster"
							}
						},
						{
							"id": 523,
							"name": "evalOnManager",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 142,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 524,
									"name": "evalOnManager",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Runs a method with given arguments on the Manager itself"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 142,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 525,
											"name": "script",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 526,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 528,
															"name": "_error",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 144,
																	"character": 8
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": null
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 529,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {
																				"isExternal": true
																			},
																			"children": [
																				{
																					"id": 531,
																					"name": "message",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																							"line": 146,
																							"character": 12
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 530,
																					"name": "name",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																							"line": 145,
																							"character": 12
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 532,
																					"name": "stack",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																							"line": 147,
																							"character": 12
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						]
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [
																						531,
																						530,
																						532
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																					"line": 144,
																					"character": 16
																				}
																			]
																		}
																	}
																]
															}
														},
														{
															"id": 527,
															"name": "_result",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 143,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																528,
																527
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 142,
															"character": 43
														}
													]
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.evalOnManager"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.evalOnManager"
							}
						},
						{
							"id": 674,
							"name": "eventNames",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 921,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 675,
									"name": "eventNames",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
											},
											{
												"kind": "code",
												"text": "`Symbol`"
											},
											{
												"kind": "text",
												"text": "s.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 921,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.eventNames"
							}
						},
						{
							"id": 537,
							"name": "extend",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 159,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 538,
									"name": "extend",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a plugin to the cluster manager"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 159,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 539,
											"name": "plugins",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"packageName": "discord-hybrid-sharding",
														"packagePath": "src/types/shared.ts",
														"qualifiedName": "Plugin"
													},
													"name": "Plugin",
													"package": "discord-hybrid-sharding"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.extend"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.extend"
							}
						},
						{
							"id": 512,
							"name": "fetchClientValues",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 119,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 513,
									"name": "fetchClientValues",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fetches a client property value of each cluster, or a given cluster."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nmanager.fetchClientValues('guilds.cache.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);\n```"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 119,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 514,
											"name": "prop",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Name of the client property to get, using periods for nesting"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 515,
											"name": "cluster",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Cluster to fetch property from, all if undefined"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.fetchClientValues"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.fetchClientValues"
							}
						},
						{
							"id": 643,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 773,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 644,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current max listener value for the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " which is either\nset by "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners(n)`"
											},
											{
												"kind": "text",
												"text": " or defaults to "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "EventEmitter.defaultMaxListeners",
												"target": 151
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v1.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 773,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.getMaxListeners"
							}
						},
						{
							"id": 653,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 867,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 654,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the number of listeners listening for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\nIf "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v3.2.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 867,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 655,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 656,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 657,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event handler function"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Function"
												},
												"name": "Function",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.listenerCount"
							}
						},
						{
							"id": 645,
							"name": "listeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 786,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 646,
									"name": "listeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 786,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 647,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 648,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.listeners"
							}
						},
						{
							"id": 658,
							"name": "prependListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 885,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 659,
									"name": "prependListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the _beginning_ of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "\nand "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple times.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 885,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 660,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 661,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 662,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 663,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 664,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 665,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.prependListener"
							}
						},
						{
							"id": 666,
							"name": "prependOnceListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 901,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 667,
									"name": "prependOnceListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " to the _beginning_ of the listeners array. The next time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 901,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 668,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 669,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 670,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 671,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 672,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 673,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.prependOnceListener"
							}
						},
						{
							"id": 649,
							"name": "rawListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 817,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 650,
									"name": "rawListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ",\nincluding any wrappers (such as those created by "
											},
											{
												"kind": "code",
												"text": "`.once()`"
											},
											{
												"kind": "text",
												"text": ").\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 817,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 651,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 652,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.rawListeners"
							}
						},
						{
							"id": 632,
							"name": "removeListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 741,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 633,
									"name": "removeListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Removes the specified "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " from the listener array for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
											},
											{
												"kind": "text",
												"text": "\n\n"
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ", then "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`removeAllListeners()`"
											},
											{
												"kind": "text",
												"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
											},
											{
												"kind": "code",
												"text": "`emit()`"
											},
											{
												"kind": "text",
												"text": " in progress. Subsequent events behave as expected.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
											},
											{
												"kind": "code",
												"text": "`emitter.listeners()`"
											},
											{
												"kind": "text",
												"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
											},
											{
												"kind": "code",
												"text": "`removeListener()`"
											},
											{
												"kind": "text",
												"text": " will remove the most\nrecently added instance. In the example the "
											},
											{
												"kind": "code",
												"text": "`once('ping')`"
											},
											{
												"kind": "text",
												"text": " listener is removed:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 741,
											"character": 16
										}
									],
									"typeParameters": [
										{
											"id": 634,
											"name": "K",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											}
										}
									],
									"parameters": [
										{
											"id": 635,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 636,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 637,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 117,
															"character": 42
														}
													],
													"signatures": [
														{
															"id": 638,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 117,
																	"character": 42
																}
															],
															"parameters": [
																{
																	"id": 639,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.removeListener"
							}
						},
						{
							"id": 516,
							"name": "respawnAll",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 134,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 517,
									"name": "respawnAll",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Kills all running clusters and respawns them."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 134,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 518,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Options for respawning shards"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 519,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 520,
															"name": "clusterDelay",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 135,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 521,
															"name": "respawnDelay",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 136,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 522,
															"name": "timeout",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
																	"line": 137,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																520,
																521,
																522
															]
														}
													],
													"sources": [
														{
															"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
															"line": 134,
															"character": 58
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es2015.collection.d.ts",
													"qualifiedName": "Map"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord-hybrid-sharding",
															"packagePath": "src/Core/Cluster.ts",
															"qualifiedName": "Cluster"
														},
														"name": "Cluster",
														"package": "discord-hybrid-sharding"
													}
												],
												"name": "Map",
												"package": "typescript"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.respawnAll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.respawnAll"
							}
						},
						{
							"id": 640,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 767,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 641,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "By default "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s will print a warning if more than "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners()`"
											},
											{
												"kind": "text",
												"text": " method allows the limit to be\nmodified for this specific "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance. The value can be set to "
											},
											{
												"kind": "code",
												"text": "`Infinity`"
											},
											{
												"kind": "text",
												"text": " (or "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.5"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 767,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 642,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "this"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.setMaxListeners"
							}
						},
						{
							"id": 460,
							"name": "spawn",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 85,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 461,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Spawns multiple internal shards."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 85,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 462,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-hybrid-sharding",
													"packagePath": "src/types/shared.ts",
													"qualifiedName": "ClusterManagerSpawnOptions"
												},
												"name": "ClusterManagerSpawnOptions",
												"package": "discord-hybrid-sharding"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.spawn"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.spawn"
							}
						},
						{
							"id": 540,
							"name": "triggerMaintenance",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
									"line": 163,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 541,
									"name": "triggerMaintenance",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord-hybrid-sharding/dist/Core/ClusterManager.d.ts",
											"line": 163,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 542,
											"name": "reason",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "If maintenance should be enabled on all clusters with a given reason or disabled when nonce provided"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.triggerMaintenance"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.triggerMaintenance"
							}
						},
						{
							"id": 412,
							"name": "addAbortListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 436,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 413,
									"name": "addAbortListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Listens once to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on the provided "
											},
											{
												"kind": "code",
												"text": "`signal`"
											},
											{
												"kind": "text",
												"text": ".\n\nListening to the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
											},
											{
												"kind": "code",
												"text": "`e.stopImmediatePropagation()`"
											},
											{
												"kind": "text",
												"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
											},
											{
												"kind": "code",
												"text": "`stopImmediatePropagation`"
											},
											{
												"kind": "text",
												"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v20.5.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "Disposable that removes the "
													},
													{
														"kind": "code",
														"text": "`abort`"
													},
													{
														"kind": "text",
														"text": " listener."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 436,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 414,
											"name": "signal",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "web-globals/abortcontroller.d.ts",
													"qualifiedName": "__global.AbortSignal"
												},
												"name": "AbortSignal",
												"package": "@types/node",
												"qualifiedName": "__global.AbortSignal"
											}
										},
										{
											"id": 415,
											"name": "resource",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 416,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 436,
															"character": 63
														}
													],
													"signatures": [
														{
															"id": 417,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 436,
																	"character": 63
																}
															],
															"parameters": [
																{
																	"id": 418,
																	"name": "event",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"target": {
																			"packageName": "@types/node",
																			"packagePath": "web-globals/events.d.ts",
																			"qualifiedName": "__global.Event"
																		},
																		"name": "Event",
																		"package": "@types/node",
																		"qualifiedName": "__global.Event"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.esnext.disposable.d.ts",
											"qualifiedName": "Disposable"
										},
										"name": "Disposable",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.addAbortListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.addAbortListener"
							}
						},
						{
							"id": 401,
							"name": "getEventListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 402,
									"name": "getEventListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.listeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.2.0, v14.17.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 358,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 403,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "@types/node",
																	"packagePath": "events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "web-globals/events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										},
										{
											"id": 404,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"packageName": "typescript",
												"packagePath": "lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.getEventListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.getEventListeners"
							}
						},
						{
							"id": 405,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 387,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 406,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the currently set max amount of listeners.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.getMaxListeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v19.9.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 387,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 407,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "@types/node",
																	"packagePath": "events.d.ts",
																	"qualifiedName": "DefaultEventMap"
																},
																"name": "DefaultEventMap",
																"package": "@types/node"
															}
														],
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "@types/node",
															"packagePath": "web-globals/events.d.ts",
															"qualifiedName": "__global.EventTarget"
														},
														"name": "EventTarget",
														"package": "@types/node",
														"qualifiedName": "__global.EventTarget"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.getMaxListeners"
							}
						},
						{
							"id": 397,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 330,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 398,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A class method that returns the number of listeners for the given "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " registered on the given "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.9.12"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Since v3.2.0 - Use "
													},
													{
														"kind": "code",
														"text": "`listenerCount`"
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 330,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 399,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The emitter to query"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 400,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event name"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.listenerCount"
							}
						},
						{
							"id": 388,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 303,
									"character": 15
								},
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 308,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 389,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											},
											{
												"kind": "text",
												"text": "\n\nUse the "
											},
											{
												"kind": "code",
												"text": "`close`"
											},
											{
												"kind": "text",
												"text": " option to specify an array of event names that will end the iteration:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An "
													},
													{
														"kind": "code",
														"text": "`AsyncIterator`"
													},
													{
														"kind": "text",
														"text": " that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 303,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 390,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 391,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 392,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "StaticEventEmitterIteratorOptions"
												},
												"name": "StaticEventEmitterIteratorOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@types/node",
											"packagePath": "compatibility/iterators.d.ts",
											"qualifiedName": "NodeJS.AsyncIterator"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "AsyncIterator",
										"package": "@types/node",
										"qualifiedName": "NodeJS.AsyncIterator"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.on"
									}
								},
								{
									"id": 393,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											},
											{
												"kind": "text",
												"text": "\n\nUse the "
											},
											{
												"kind": "code",
												"text": "`close`"
											},
											{
												"kind": "text",
												"text": " option to specify an array of event names that will end the iteration:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An "
													},
													{
														"kind": "code",
														"text": "`AsyncIterator`"
													},
													{
														"kind": "text",
														"text": " that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 308,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 394,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "web-globals/events.d.ts",
													"qualifiedName": "__global.EventTarget"
												},
												"name": "EventTarget",
												"package": "@types/node",
												"qualifiedName": "__global.EventTarget"
											}
										},
										{
											"id": 395,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 396,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "StaticEventEmitterIteratorOptions"
												},
												"name": "StaticEventEmitterIteratorOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "@types/node",
											"packagePath": "compatibility/iterators.d.ts",
											"qualifiedName": "NodeJS.AsyncIterator"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "AsyncIterator",
										"package": "@types/node",
										"qualifiedName": "NodeJS.AsyncIterator"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.on"
							}
						},
						{
							"id": 379,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 217,
									"character": 15
								},
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 222,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 380,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " that is fulfilled when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits the given\nevent or that is rejected if the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " while waiting.\nThe "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event\nsemantics and does not listen to the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThe special handling of the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event is only used when "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": " is used to wait for another event. If "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": " is used to wait for the\n'"
											},
											{
												"kind": "code",
												"text": "`error'`"
											},
											{
												"kind": "text",
												"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting for the event:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v11.13.0, v10.16.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 217,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 381,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 382,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 383,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "StaticEventEmitterOptions"
												},
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.once"
									}
								},
								{
									"id": 384,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " that is fulfilled when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits the given\nevent or that is rejected if the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " while waiting.\nThe "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event\nsemantics and does not listen to the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThe special handling of the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event is only used when "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": " is used to wait for another event. If "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": " is used to wait for the\n'"
											},
											{
												"kind": "code",
												"text": "`error'`"
											},
											{
												"kind": "text",
												"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting for the event:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v11.13.0, v10.16.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 222,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 385,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "web-globals/events.d.ts",
													"qualifiedName": "__global.EventTarget"
												},
												"name": "EventTarget",
												"package": "@types/node",
												"qualifiedName": "__global.EventTarget"
											}
										},
										{
											"id": 386,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 387,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@types/node",
													"packagePath": "events.d.ts",
													"qualifiedName": "StaticEventEmitterOptions"
												},
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.once"
							}
						},
						{
							"id": 408,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 402,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 409,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 402,
											"character": 15
										}
									],
									"parameters": [
										{
											"id": 410,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A non-negative number. The maximum number of listeners per "
													},
													{
														"kind": "code",
														"text": "`EventTarget`"
													},
													{
														"kind": "text",
														"text": " event."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 411,
											"name": "eventTargets",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, "
													},
													{
														"kind": "code",
														"text": "`n`"
													},
													{
														"kind": "text",
														"text": " is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
													}
												]
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": {
																"packageName": "@types/node",
																"packagePath": "events.d.ts",
																"qualifiedName": "__global.NodeJS.EventEmitter"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": {
																		"packageName": "@types/node",
																		"packagePath": "events.d.ts",
																		"qualifiedName": "DefaultEventMap"
																	},
																	"name": "DefaultEventMap",
																	"package": "@types/node"
																}
															],
															"name": "EventEmitter",
															"package": "@types/node",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														{
															"type": "reference",
															"target": {
																"packageName": "@types/node",
																"packagePath": "web-globals/events.d.ts",
																"qualifiedName": "__global.EventTarget"
															},
															"name": "EventTarget",
															"package": "@types/node",
															"qualifiedName": "__global.EventTarget"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "ClusterManager.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "ClusterManager.setMaxListeners"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								423
							]
						},
						{
							"title": "Properties",
							"children": [
								439,
								453,
								440,
								451,
								547,
								448,
								442,
								457,
								459,
								446,
								558,
								575,
								592,
								426,
								456,
								455,
								458,
								609,
								437,
								438,
								447,
								452,
								449,
								445,
								454,
								427,
								450,
								444,
								443,
								421,
								420,
								422,
								419
							]
						},
						{
							"title": "Methods",
							"children": [
								543,
								618,
								624,
								463,
								472,
								466,
								523,
								674,
								537,
								512,
								643,
								653,
								645,
								658,
								666,
								649,
								632,
								516,
								640,
								460,
								540,
								412,
								401,
								405,
								397,
								388,
								379,
								408
							]
						}
					],
					"sources": [
						{
							"fileName": "src/client/XernerxShardClient.ts",
							"line": 13,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L13"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "discord-hybrid-sharding",
								"packagePath": "src/Core/ClusterManager.ts",
								"qualifiedName": "ClusterManager"
							},
							"name": "ClusterManager",
							"package": "discord-hybrid-sharding"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						378
					]
				}
			],
			"sources": [
				{
					"fileName": "src/client/XernerxShardClient.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/client/XernerxShardClient.ts#L1"
				}
			]
		},
		{
			"id": 676,
			"name": "events/clientReady",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 677,
					"name": "XernerxClientReadyEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 678,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/clientReady.ts",
									"line": 19,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L19"
								}
							],
							"signatures": [
								{
									"id": 679,
									"name": "XernerxClientReadyEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/clientReady.ts",
											"line": 19,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L19"
										}
									],
									"type": {
										"type": "reference",
										"target": 677,
										"name": "XernerxClientReadyEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 696,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 693,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 690,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 695,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 691,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 692,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 694,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 687,
							"name": "put",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/clientReady.ts",
									"line": 71,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L71"
								}
							],
							"signatures": [
								{
									"id": 688,
									"name": "put",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/clientReady.ts",
											"line": 71,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L71"
										}
									],
									"parameters": [
										{
											"id": 689,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 107,
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1210,
														"name": "XernerxInfo",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 684,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/clientReady.ts",
									"line": 32,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L32"
								}
							],
							"signatures": [
								{
									"id": 685,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/clientReady.ts",
											"line": 32,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L32"
										}
									],
									"parameters": [
										{
											"id": 686,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 107,
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								678
							]
						},
						{
							"title": "Properties",
							"children": [
								696,
								693,
								690,
								695,
								691,
								694
							]
						},
						{
							"title": "Methods",
							"children": [
								687,
								684
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/clientReady.ts",
							"line": 13,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L13"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						677
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/clientReady.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/clientReady.ts#L1"
				}
			]
		},
		{
			"id": 697,
			"name": "events/entitlementCreate",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 698,
					"name": "XernerxEntitlementCreateEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 699,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/entitlementCreate.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/entitlementCreate.ts#L6"
								}
							],
							"signatures": [
								{
									"id": 700,
									"name": "XernerxEntitlementCreateEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/entitlementCreate.ts",
											"line": 6,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/entitlementCreate.ts#L6"
										}
									],
									"type": {
										"type": "reference",
										"target": 698,
										"name": "XernerxEntitlementCreateEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 712,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 709,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 706,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 711,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 707,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 708,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 710,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 701,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/entitlementCreate.ts",
									"line": 14,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/entitlementCreate.ts#L14"
								}
							],
							"signatures": [
								{
									"id": 702,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/entitlementCreate.ts",
											"line": 14,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/entitlementCreate.ts#L14"
										}
									],
									"parameters": [
										{
											"id": 703,
											"name": "a",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 704,
											"name": "b",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 705,
											"name": "c",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								699
							]
						},
						{
							"title": "Properties",
							"children": [
								712,
								709,
								706,
								711,
								707,
								710
							]
						},
						{
							"title": "Methods",
							"children": [
								701
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/entitlementCreate.ts",
							"line": 5,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/entitlementCreate.ts#L5"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						698
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/entitlementCreate.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/entitlementCreate.ts#L1"
				}
			]
		},
		{
			"id": 713,
			"name": "events/interactionCreate",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 714,
					"name": "XernerxInteractionCreateEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 715,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/interactionCreate.ts",
									"line": 11,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/interactionCreate.ts#L11"
								}
							],
							"signatures": [
								{
									"id": 716,
									"name": "XernerxInteractionCreateEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/interactionCreate.ts",
											"line": 11,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/interactionCreate.ts#L11"
										}
									],
									"type": {
										"type": "reference",
										"target": 714,
										"name": "XernerxInteractionCreateEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 726,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 723,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 720,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 725,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 721,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 722,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 724,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 717,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/interactionCreate.ts",
									"line": 19,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/interactionCreate.ts#L19"
								}
							],
							"signatures": [
								{
									"id": 718,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/interactionCreate.ts",
											"line": 19,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/interactionCreate.ts#L19"
										}
									],
									"parameters": [
										{
											"id": 719,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Interaction"
												},
												"name": "Interaction",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								715
							]
						},
						{
							"title": "Properties",
							"children": [
								726,
								723,
								720,
								725,
								721,
								724
							]
						},
						{
							"title": "Methods",
							"children": [
								717
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/interactionCreate.ts",
							"line": 10,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/interactionCreate.ts#L10"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						714
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/interactionCreate.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/interactionCreate.ts#L1"
				}
			]
		},
		{
			"id": 727,
			"name": "events/messageCreate",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 728,
					"name": "XernerxMessageCreateEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 729,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/messageCreate.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageCreate.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 730,
									"name": "XernerxMessageCreateEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/messageCreate.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageCreate.ts#L10"
										}
									],
									"type": {
										"type": "reference",
										"target": 728,
										"name": "XernerxMessageCreateEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 740,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 737,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 734,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 739,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 735,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 736,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 738,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 731,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/messageCreate.ts",
									"line": 18,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageCreate.ts#L18"
								}
							],
							"signatures": [
								{
									"id": 732,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/messageCreate.ts",
											"line": 18,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageCreate.ts#L18"
										}
									],
									"parameters": [
										{
											"id": 733,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"name": "Message",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								729
							]
						},
						{
							"title": "Properties",
							"children": [
								740,
								737,
								734,
								739,
								735,
								738
							]
						},
						{
							"title": "Methods",
							"children": [
								731
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/messageCreate.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageCreate.ts#L9"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						728
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/messageCreate.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageCreate.ts#L1"
				}
			]
		},
		{
			"id": 741,
			"name": "events/messageDelete",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 742,
					"name": "XernerxMessageDeleteEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 743,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/messageDelete.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageDelete.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 744,
									"name": "XernerxMessageDeleteEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/messageDelete.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageDelete.ts#L10"
										}
									],
									"type": {
										"type": "reference",
										"target": 742,
										"name": "XernerxMessageDeleteEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 754,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 751,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 748,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 753,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 749,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 750,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 752,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 745,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/messageDelete.ts",
									"line": 18,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageDelete.ts#L18"
								}
							],
							"signatures": [
								{
									"id": 746,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/messageDelete.ts",
											"line": 18,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageDelete.ts#L18"
										}
									],
									"parameters": [
										{
											"id": 747,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"name": "Message",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								743
							]
						},
						{
							"title": "Properties",
							"children": [
								754,
								751,
								748,
								753,
								749,
								752
							]
						},
						{
							"title": "Methods",
							"children": [
								745
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/messageDelete.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageDelete.ts#L9"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						742
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/messageDelete.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageDelete.ts#L1"
				}
			]
		},
		{
			"id": 755,
			"name": "events/messageUpdate",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 756,
					"name": "XernerxMessageUpdateEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 757,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/messageUpdate.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageUpdate.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 758,
									"name": "XernerxMessageUpdateEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/messageUpdate.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageUpdate.ts#L10"
										}
									],
									"type": {
										"type": "reference",
										"target": 756,
										"name": "XernerxMessageUpdateEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 769,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 766,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 763,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 768,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 764,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 765,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 767,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 759,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/messageUpdate.ts",
									"line": 18,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageUpdate.ts#L18"
								}
							],
							"signatures": [
								{
									"id": 760,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/messageUpdate.ts",
											"line": 18,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageUpdate.ts#L18"
										}
									],
									"parameters": [
										{
											"id": 761,
											"name": "oldMessage",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"name": "Message",
												"package": "discord.js"
											}
										},
										{
											"id": 762,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"name": "Message",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								757
							]
						},
						{
							"title": "Properties",
							"children": [
								769,
								766,
								763,
								768,
								764,
								767
							]
						},
						{
							"title": "Methods",
							"children": [
								759
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/messageUpdate.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageUpdate.ts#L9"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						756
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/messageUpdate.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/messageUpdate.ts#L1"
				}
			]
		},
		{
			"id": 770,
			"name": "events/slashCommandInteraction",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 771,
					"name": "XernerxSlashCommandInteractionEvent",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 772,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/slashCommandInteraction.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/slashCommandInteraction.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 773,
									"name": "XernerxSlashCommandInteractionEvent",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/events/slashCommandInteraction.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/slashCommandInteraction.ts#L10"
										}
									],
									"type": {
										"type": "reference",
										"target": 771,
										"name": "XernerxSlashCommandInteractionEvent",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 12,
										"name": "XernerxEventBuilder.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 11,
								"name": "XernerxEventBuilder.constructor"
							}
						},
						{
							"id": 783,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 9,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 24,
								"name": "XernerxEventBuilder.client"
							}
						},
						{
							"id": 780,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 13,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 18,
								"name": "XernerxEventBuilder.emitter"
							}
						},
						{
							"id": 777,
							"name": "filetype",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L11"
								}
							],
							"type": {
								"type": "literal",
								"value": "XernerxEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 15,
								"name": "XernerxEventBuilder.filetype"
							}
						},
						{
							"id": 782,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxBaseBuilder.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxBaseBuilder.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 23,
								"name": "XernerxEventBuilder.id"
							}
						},
						{
							"id": 778,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 779,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 16,
								"name": "XernerxEventBuilder.name"
							}
						},
						{
							"id": 781,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/build/XernerxEventBuilder.ts",
									"line": 14,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/build/XernerxEventBuilder.ts#L14"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 19,
								"name": "XernerxEventBuilder.once"
							}
						},
						{
							"id": 774,
							"name": "run",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/events/slashCommandInteraction.ts",
									"line": 18,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/slashCommandInteraction.ts#L18"
								}
							],
							"signatures": [
								{
									"id": 775,
									"name": "run",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Executes the event logic. This method should be overridden in subclasses to provide specific event handling."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event handling is complete.\n         The resolved value can be any type, depending on the implementation in subclasses."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/events/slashCommandInteraction.ts",
											"line": 18,
											"character": 16,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/slashCommandInteraction.ts#L18"
										}
									],
									"parameters": [
										{
											"id": 776,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "ChatInputCommandInteraction"
												},
												"name": "ChatInputCommandInteraction",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"overwrites": {
										"type": "reference",
										"target": 21,
										"name": "XernerxEventBuilder.run"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 20,
								"name": "XernerxEventBuilder.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								772
							]
						},
						{
							"title": "Properties",
							"children": [
								783,
								780,
								777,
								782,
								778,
								781
							]
						},
						{
							"title": "Methods",
							"children": [
								774
							]
						}
					],
					"sources": [
						{
							"fileName": "src/events/slashCommandInteraction.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/slashCommandInteraction.ts#L9"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 10,
							"name": "XernerxEventBuilder",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						771
					]
				}
			],
			"sources": [
				{
					"fileName": "src/events/slashCommandInteraction.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/events/slashCommandInteraction.ts#L1"
				}
			]
		},
		{
			"id": 784,
			"name": "handler/CommandHandler",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 785,
					"name": "CommandHandler",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 786,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/CommandHandler.ts",
									"line": 23,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L23"
								}
							],
							"signatures": [
								{
									"id": 787,
									"name": "CommandHandler",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handler/CommandHandler.ts",
											"line": 23,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L23"
										}
									],
									"parameters": [
										{
											"id": 788,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 107,
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 785,
										"name": "CommandHandler",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 846,
										"name": "Handler.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 845,
								"name": "Handler.constructor"
							}
						},
						{
							"id": 804,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L12"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 848,
								"name": "Handler.client"
							}
						},
						{
							"id": 811,
							"name": "importFile",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 77,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L77"
								}
							],
							"signatures": [
								{
									"id": 812,
									"name": "importFile",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Imports a file by registering it with the client based on its type."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The builder object after it has been registered with the client.\n         If the builder is of type XernerxEvent, it is registered as an event listener.\n         If the builder is of type XernerxMessageCommand or XernerxSlashCommand, it is registered as a command."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 77,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L77"
										}
									],
									"parameters": [
										{
											"id": 813,
											"name": "builder",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An instance of XernerxEventBuilder, XernerxMessageCommandBuilder, or XernerxSlashCommandBuilder.\n                 This object contains the necessary information to register the file with the client."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 10,
														"name": "XernerxEventBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										},
										{
											"id": 814,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An optional string representing the name of the file being imported.\n                  Used for error reporting if the builder ID is not unique."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 10,
														"name": "XernerxEventBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 856,
										"name": "Handler.importFile"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 855,
								"name": "Handler.importFile"
							}
						},
						{
							"id": 808,
							"name": "loadFile",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 46,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L46"
								}
							],
							"signatures": [
								{
									"id": 809,
									"name": "loadFile",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Asynchronously loads a JavaScript file and imports its default export."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the file is successfully loaded and imported.\n         If the file does not have a default export, an error is thrown."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 46,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L46"
										}
									],
									"parameters": [
										{
											"id": 810,
											"name": "file",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The path to the JavaScript file to be loaded."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 853,
										"name": "Handler.loadFile"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 852,
								"name": "Handler.loadFile"
							}
						},
						{
							"id": 805,
							"name": "loadFiles",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 26,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L26"
								}
							],
							"signatures": [
								{
									"id": 806,
									"name": "loadFiles",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads JavaScript files from a specified directory."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An array of file paths for JavaScript files in the specified directory.\n         Returns an empty array if an error occurs during the file reading process."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 26,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L26"
										}
									],
									"parameters": [
										{
											"id": 807,
											"name": "dir",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The directory path from which to load the files."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 850,
										"name": "Handler.loadFiles"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 849,
								"name": "Handler.loadFiles"
							}
						},
						{
							"id": 789,
							"name": "loadMessageCommand",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/handler/CommandHandler.ts",
									"line": 35,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L35"
								}
							],
							"signatures": [
								{
									"id": 790,
									"name": "loadMessageCommand",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads a message command from a specified file."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the file has been successfully loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/CommandHandler.ts",
											"line": 35,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L35"
										}
									],
									"parameters": [
										{
											"id": 791,
											"name": "file",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The path to the file containing the message command to be loaded."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 792,
							"name": "loadMessageCommands",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/handler/CommandHandler.ts",
									"line": 45,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L45"
								}
							],
							"signatures": [
								{
									"id": 793,
									"name": "loadMessageCommands",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads message commands based on the provided options."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when all message commands have been successfully loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/CommandHandler.ts",
											"line": 45,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L45"
										}
									],
									"parameters": [
										{
											"id": 794,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Configuration options for loading message commands, including directory, prefix, mention, separator, handleEdits, handleDeletions, and ignore settings."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 899,
												"name": "XernerxMessageCommandHandlerOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 795,
							"name": "loadSlashCommand",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/handler/CommandHandler.ts",
									"line": 91,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L91"
								}
							],
							"signatures": [
								{
									"id": 796,
									"name": "loadSlashCommand",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads a slash command from a specified file."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the file has been successfully loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/CommandHandler.ts",
											"line": 91,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L91"
										}
									],
									"parameters": [
										{
											"id": 797,
											"name": "file",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The path to the file containing the slash command to be loaded."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 798,
							"name": "loadSlashCommands",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/handler/CommandHandler.ts",
									"line": 101,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L101"
								}
							],
							"signatures": [
								{
									"id": 799,
									"name": "loadSlashCommands",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads slash commands based on the provided options."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when all slash commands have been successfully loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/CommandHandler.ts",
											"line": 101,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L101"
										}
									],
									"parameters": [
										{
											"id": 800,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Configuration options for loading slash commands, including the directory where the command files are located."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 1005,
												"name": "XernerxSlashCommandHandlerOptions",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								786
							]
						},
						{
							"title": "Properties",
							"children": [
								804
							]
						},
						{
							"title": "Methods",
							"children": [
								811,
								808,
								805,
								789,
								792,
								795,
								798
							]
						}
					],
					"sources": [
						{
							"fileName": "src/handler/CommandHandler.ts",
							"line": 22,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L22"
						}
					],
					"indexSignatures": [
						{
							"id": 815,
							"name": "__index",
							"variant": "signature",
							"kind": 8192,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/CommandHandler.ts",
									"line": 22,
									"character": 13,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L22"
								}
							],
							"parameters": [
								{
									"id": 816,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 844,
							"name": "Handler",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						785
					]
				}
			],
			"sources": [
				{
					"fileName": "src/handler/CommandHandler.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/CommandHandler.ts#L1"
				}
			]
		},
		{
			"id": 817,
			"name": "handler/EventHandler",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 818,
					"name": "EventHandler",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 819,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/EventHandler.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 820,
									"name": "EventHandler",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handler/EventHandler.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L10"
										}
									],
									"parameters": [
										{
											"id": 821,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 107,
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 818,
										"name": "EventHandler",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 846,
										"name": "Handler.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 845,
								"name": "Handler.constructor"
							}
						},
						{
							"id": 830,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L12"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 848,
								"name": "Handler.client"
							}
						},
						{
							"id": 837,
							"name": "importFile",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 77,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L77"
								}
							],
							"signatures": [
								{
									"id": 838,
									"name": "importFile",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Imports a file by registering it with the client based on its type."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The builder object after it has been registered with the client.\n         If the builder is of type XernerxEvent, it is registered as an event listener.\n         If the builder is of type XernerxMessageCommand or XernerxSlashCommand, it is registered as a command."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 77,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L77"
										}
									],
									"parameters": [
										{
											"id": 839,
											"name": "builder",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An instance of XernerxEventBuilder, XernerxMessageCommandBuilder, or XernerxSlashCommandBuilder.\n                 This object contains the necessary information to register the file with the client."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 10,
														"name": "XernerxEventBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										},
										{
											"id": 840,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An optional string representing the name of the file being imported.\n                  Used for error reporting if the builder ID is not unique."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 10,
														"name": "XernerxEventBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 856,
										"name": "Handler.importFile"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 855,
								"name": "Handler.importFile"
							}
						},
						{
							"id": 822,
							"name": "loadEvent",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/handler/EventHandler.ts",
									"line": 20,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L20"
								}
							],
							"signatures": [
								{
									"id": 823,
									"name": "loadEvent",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads a single event file."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the event file has been successfully loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/EventHandler.ts",
											"line": 20,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L20"
										}
									],
									"parameters": [
										{
											"id": 824,
											"name": "file",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The path to the event file to be loaded."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 825,
							"name": "loadEvents",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/handler/EventHandler.ts",
									"line": 31,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L31"
								}
							],
							"signatures": [
								{
									"id": 826,
									"name": "loadEvents",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads all event files from the specified directory and initializes them."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when all events have been loaded."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/EventHandler.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L31"
										}
									],
									"parameters": [
										{
											"id": 827,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An object containing options for loading events."
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 828,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 829,
															"name": "directory",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The directory path where event files are located."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/handler/EventHandler.ts",
																	"line": 31,
																	"character": 36,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L31"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																829
															]
														}
													],
													"sources": [
														{
															"fileName": "src/handler/EventHandler.ts",
															"line": 31,
															"character": 34,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L31"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 834,
							"name": "loadFile",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 46,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L46"
								}
							],
							"signatures": [
								{
									"id": 835,
									"name": "loadFile",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Asynchronously loads a JavaScript file and imports its default export."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the file is successfully loaded and imported.\n         If the file does not have a default export, an error is thrown."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 46,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L46"
										}
									],
									"parameters": [
										{
											"id": 836,
											"name": "file",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The path to the JavaScript file to be loaded."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 853,
										"name": "Handler.loadFile"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 852,
								"name": "Handler.loadFile"
							}
						},
						{
							"id": 831,
							"name": "loadFiles",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 26,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L26"
								}
							],
							"signatures": [
								{
									"id": 832,
									"name": "loadFiles",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads JavaScript files from a specified directory."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An array of file paths for JavaScript files in the specified directory.\n         Returns an empty array if an error occurs during the file reading process."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 26,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L26"
										}
									],
									"parameters": [
										{
											"id": 833,
											"name": "dir",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The directory path from which to load the files."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 850,
										"name": "Handler.loadFiles"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 849,
								"name": "Handler.loadFiles"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								819
							]
						},
						{
							"title": "Properties",
							"children": [
								830
							]
						},
						{
							"title": "Methods",
							"children": [
								837,
								822,
								825,
								834,
								831
							]
						}
					],
					"sources": [
						{
							"fileName": "src/handler/EventHandler.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L9"
						}
					],
					"indexSignatures": [
						{
							"id": 841,
							"name": "__index",
							"variant": "signature",
							"kind": 8192,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/EventHandler.ts",
									"line": 9,
									"character": 13,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L9"
								}
							],
							"parameters": [
								{
									"id": 842,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 844,
							"name": "Handler",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						818
					]
				}
			],
			"sources": [
				{
					"fileName": "src/handler/EventHandler.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/EventHandler.ts#L1"
				}
			]
		},
		{
			"id": 843,
			"name": "handler/Handler",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 844,
					"name": "Handler",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 845,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 15,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L15"
								}
							],
							"signatures": [
								{
									"id": 846,
									"name": "Handler",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 15,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L15"
										}
									],
									"parameters": [
										{
											"id": 847,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 107,
												"name": "XernerxClient",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 844,
										"name": "Handler",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 848,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L12"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							}
						},
						{
							"id": 855,
							"name": "importFile",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 77,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L77"
								}
							],
							"signatures": [
								{
									"id": 856,
									"name": "importFile",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Imports a file by registering it with the client based on its type."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The builder object after it has been registered with the client.\n         If the builder is of type XernerxEvent, it is registered as an event listener.\n         If the builder is of type XernerxMessageCommand or XernerxSlashCommand, it is registered as a command."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 77,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L77"
										}
									],
									"parameters": [
										{
											"id": 857,
											"name": "builder",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An instance of XernerxEventBuilder, XernerxMessageCommandBuilder, or XernerxSlashCommandBuilder.\n                 This object contains the necessary information to register the file with the client."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 10,
														"name": "XernerxEventBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										},
										{
											"id": 858,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An optional string representing the name of the file being imported.\n                  Used for error reporting if the builder ID is not unique."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 10,
														"name": "XernerxEventBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 852,
							"name": "loadFile",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 46,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L46"
								}
							],
							"signatures": [
								{
									"id": 853,
									"name": "loadFile",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Asynchronously loads a JavaScript file and imports its default export."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the file is successfully loaded and imported.\n         If the file does not have a default export, an error is thrown."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 46,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L46"
										}
									],
									"parameters": [
										{
											"id": 854,
											"name": "file",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The path to the JavaScript file to be loaded."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": 1201,
														"name": "XernerxError",
														"package": "xernerx"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 849,
							"name": "loadFiles",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 26,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L26"
								}
							],
							"signatures": [
								{
									"id": 850,
									"name": "loadFiles",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Loads JavaScript files from a specified directory."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "An array of file paths for JavaScript files in the specified directory.\n         Returns an empty array if an error occurs during the file reading process."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/handler/Handler.ts",
											"line": 26,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L26"
										}
									],
									"parameters": [
										{
											"id": 851,
											"name": "dir",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The directory path from which to load the files."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								845
							]
						},
						{
							"title": "Properties",
							"children": [
								848
							]
						},
						{
							"title": "Methods",
							"children": [
								855,
								852,
								849
							]
						}
					],
					"sources": [
						{
							"fileName": "src/handler/Handler.ts",
							"line": 11,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L11"
						}
					],
					"indexSignatures": [
						{
							"id": 859,
							"name": "__index",
							"variant": "signature",
							"kind": 8192,
							"flags": {},
							"sources": [
								{
									"fileName": "src/handler/Handler.ts",
									"line": 13,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L13"
								}
							],
							"parameters": [
								{
									"id": 860,
									"name": "index",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 785,
							"name": "CommandHandler"
						},
						{
							"type": "reference",
							"target": 818,
							"name": "EventHandler"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						844
					]
				}
			],
			"sources": [
				{
					"fileName": "src/handler/Handler.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/handler/Handler.ts#L1"
				}
			]
		},
		{
			"id": 861,
			"name": "interfaces/XernerxClientOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 862,
					"name": "XernerxClientOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 864,
							"name": "global",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientOptions.ts",
									"line": 5,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L5"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 865,
							"name": "guildId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientOptions.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L6"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 866,
							"name": "owners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientOptions.ts",
									"line": 7,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L7"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 867,
							"name": "premium",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientOptions.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L8"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 868,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 870,
											"name": "consume",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxClientOptions.ts",
													"line": 10,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L10"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 869,
											"name": "owners",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxClientOptions.ts",
													"line": 9,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L9"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 871,
											"name": "synchronize",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxClientOptions.ts",
													"line": 11,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L11"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												870,
												869,
												871
											]
										}
									],
									"sources": [
										{
											"fileName": "src/interfaces/XernerxClientOptions.ts",
											"line": 8,
											"character": 11,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L8"
										}
									]
								}
							}
						},
						{
							"id": 863,
							"name": "token",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientOptions.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								864,
								865,
								866,
								867,
								863
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxClientOptions.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						862
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxClientOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientOptions.ts#L1"
				}
			]
		},
		{
			"id": 872,
			"name": "interfaces/XernerxClientStats",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 873,
					"name": "XernerxClientStats",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 875,
							"name": "guildCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 5,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L5"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 874,
							"name": "onlineSince",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L4"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 879,
							"name": "shard",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 9,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L9"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 880,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 883,
													"name": "guildCount",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "src/interfaces/XernerxClientStats.ts",
															"line": 12,
															"character": 2,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L12"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 882,
													"name": "onlineSince",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "src/interfaces/XernerxClientStats.ts",
															"line": 11,
															"character": 2,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L11"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 881,
													"name": "shardId",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "src/interfaces/XernerxClientStats.ts",
															"line": 10,
															"character": 2,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L10"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 884,
													"name": "userCount",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"sources": [
														{
															"fileName": "src/interfaces/XernerxClientStats.ts",
															"line": 13,
															"character": 2,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L13"
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														883,
														882,
														881,
														884
													]
												}
											],
											"sources": [
												{
													"fileName": "src/interfaces/XernerxClientStats.ts",
													"line": 9,
													"character": 8,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L9"
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 877,
							"name": "shardCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 7,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L7"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 885,
							"name": "shards",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 15,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L15"
								}
							],
							"type": {
								"type": "tuple"
							}
						},
						{
							"id": 876,
							"name": "userCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L6"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 878,
							"name": "voteCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxClientStats.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L8"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								875,
								874,
								879,
								877,
								885,
								876,
								878
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxClientStats.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						873
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxClientStats.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxClientStats.ts#L1"
				}
			]
		},
		{
			"id": 886,
			"name": "interfaces/XernerxEventBuilderOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 887,
					"name": "XernerxEventBuilderOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 890,
							"name": "emitter",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxEventBuilderOptions.ts",
									"line": 7,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxEventBuilderOptions.ts#L7"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 888,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxEventBuilderOptions.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxEventBuilderOptions.ts#L6"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "ClientEvents"
										},
										"name": "ClientEvents",
										"package": "discord.js"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 889,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "keyof ClientEvents"
									}
								]
							}
						},
						{
							"id": 891,
							"name": "once",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxEventBuilderOptions.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxEventBuilderOptions.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								890,
								888,
								891
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxEventBuilderOptions.ts",
							"line": 5,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxEventBuilderOptions.ts#L5"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						887
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxEventBuilderOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxEventBuilderOptions.ts#L1"
				}
			]
		},
		{
			"id": 892,
			"name": "interfaces/XernerxMessageCommandBuilderOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 893,
					"name": "XernerxMessageCommandBuilderOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 895,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
									"line": 5,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandBuilderOptions.ts#L5"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 894,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandBuilderOptions.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 896,
							"name": "prefix",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandBuilderOptions.ts#L6"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 897,
							"name": "premium",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
									"line": 7,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandBuilderOptions.ts#L7"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								895,
								894,
								896,
								897
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandBuilderOptions.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						893
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandBuilderOptions.ts#L1"
				}
			]
		},
		{
			"id": 898,
			"name": "interfaces/XernerxMessageCommandHandlerOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 899,
					"name": "XernerxMessageCommandHandlerOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 900,
							"name": "directory",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L4"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 905,
							"name": "handleDeletions",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 9,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 904,
							"name": "handleEdits",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L8"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 906,
							"name": "ignore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L10"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 907,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 909,
											"name": "bots",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
													"line": 12,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L12"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 910,
											"name": "self",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
													"line": 13,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L13"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 908,
											"name": "system",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
													"line": 11,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L11"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												909,
												910,
												908
											]
										}
									],
									"sources": [
										{
											"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
											"line": 10,
											"character": 10,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L10"
										}
									]
								}
							}
						},
						{
							"id": 902,
							"name": "mention",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L6"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 901,
							"name": "prefix",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 5,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L5"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 903,
							"name": "seperator",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
									"line": 7,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L7"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								900,
								905,
								904,
								906,
								902,
								901,
								903
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						899
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxMessageCommandHandlerOptions.ts#L1"
				}
			]
		},
		{
			"id": 911,
			"name": "interfaces/XernerxShardClientOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 912,
					"name": "XernerxShardClientOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 913,
							"name": "file",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxShardClientOptions.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxShardClientOptions.ts#L4"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								913
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxShardClientOptions.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxShardClientOptions.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						912
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxShardClientOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxShardClientOptions.ts#L1"
				}
			]
		},
		{
			"id": 914,
			"name": "interfaces/XernerxSlashCommand",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 915,
					"name": "XernerxSlashCommand",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 924,
							"name": "command",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 12,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L12"
								}
							],
							"type": {
								"type": "reference",
								"target": 43,
								"name": "XernerxSlashCommandBuilder",
								"package": "xernerx"
							}
						},
						{
							"id": 923,
							"name": "group",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 11,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L11"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 916,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L8"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "ChatInputCommandInteraction"
								},
								"name": "ChatInputCommandInteraction",
								"package": "discord.js"
							}
						},
						{
							"id": 917,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 9,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L9"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 918,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 919,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommand.ts",
																	"line": 9,
																	"character": 28,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L9"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 920,
															"name": "type",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommand.ts",
																	"line": 9,
																	"character": 42,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L9"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 921,
															"name": "value",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommand.ts",
																	"line": 9,
																	"character": 56,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L9"
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intrinsic",
																		"name": "boolean"
																	},
																	{
																		"type": "intrinsic",
																		"name": "object"
																	}
																]
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																919,
																920,
																921
															]
														}
													],
													"sources": [
														{
															"fileName": "src/interfaces/XernerxSlashCommand.ts",
															"line": 9,
															"character": 26,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L9"
														}
													]
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 922,
							"name": "subcommand",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L10"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								924,
								923,
								916,
								917,
								922
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommand.ts",
							"line": 7,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L7"
						}
					]
				},
				{
					"id": 925,
					"name": "XernerxSlashCommandAutocomplete",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 927,
							"name": "focused",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 17,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L17"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "AutocompleteFocusedOption"
								},
								"name": "AutocompleteFocusedOption",
								"package": "discord.js"
							}
						},
						{
							"id": 926,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 16,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L16"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "AutocompleteInteraction"
								},
								"name": "AutocompleteInteraction",
								"package": "discord.js"
							}
						},
						{
							"id": 928,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommand.ts",
									"line": 18,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L18"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								927,
								926,
								928
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommand.ts",
							"line": 15,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L15"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						915,
						925
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxSlashCommand.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommand.ts#L1"
				}
			]
		},
		{
			"id": 929,
			"name": "interfaces/XernerxSlashCommandBuilderOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 996,
					"name": "XernerxSlashCommandBuilderGroup",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 998,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 67,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L67"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1000,
							"name": "locales",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 69,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L69"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Partial"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/common.ts",
													"qualifiedName": "Locale"
												},
												"name": "Locale",
												"package": "discord-api-types"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1001,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 1003,
															"name": "description",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 69,
																	"character": 50,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L69"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1002,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 69,
																	"character": 36,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L69"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																1003,
																1002
															]
														}
													],
													"sources": [
														{
															"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
															"line": 69,
															"character": 34,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L69"
														}
													]
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Partial",
								"package": "typescript"
							}
						},
						{
							"id": 997,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 66,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L66"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 999,
							"name": "subcommands",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 68,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L68"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 988,
									"name": "XernerxSlashCommandBuilderSubcommand",
									"package": "xernerx"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								998,
								1000,
								997,
								999
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
							"line": 65,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L65"
						}
					]
				},
				{
					"id": 971,
					"name": "XernerxSlashCommandBuilderOption",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 980,
							"name": "autocomplete",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 51,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L51"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 983,
							"name": "choices",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 55,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L55"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 984,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"children": [
											{
												"id": 987,
												"name": "locales",
												"variant": "declaration",
												"kind": 1024,
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
														"line": 55,
														"character": 48,
														"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L55"
													}
												],
												"type": {
													"type": "reference",
													"target": {
														"packageName": "typescript",
														"packagePath": "lib/lib.es5.d.ts",
														"qualifiedName": "Partial"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": {
																"packageName": "typescript",
																"packagePath": "lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": {
																		"packageName": "discord-api-types",
																		"packagePath": "rest/common.ts",
																		"qualifiedName": "Locale"
																	},
																	"name": "Locale",
																	"package": "discord-api-types"
																},
																{
																	"type": "intrinsic",
																	"name": "string"
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													],
													"name": "Partial",
													"package": "typescript"
												}
											},
											{
												"id": 985,
												"name": "name",
												"variant": "declaration",
												"kind": 1024,
												"flags": {},
												"sources": [
													{
														"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
														"line": 55,
														"character": 19,
														"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L55"
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 986,
												"name": "value",
												"variant": "declaration",
												"kind": 1024,
												"flags": {},
												"sources": [
													{
														"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
														"line": 55,
														"character": 33,
														"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L55"
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"children": [
													987,
													985,
													986
												]
											}
										],
										"sources": [
											{
												"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
												"line": 55,
												"character": 17,
												"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L55"
											}
										]
									}
								}
							}
						},
						{
							"id": 978,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 49,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L49"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 974,
							"name": "locales",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 48,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L48"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Partial"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/common.ts",
													"qualifiedName": "Locale"
												},
												"name": "Locale",
												"package": "discord-api-types"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 975,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 977,
															"name": "description",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 48,
																	"character": 50,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L48"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 976,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 48,
																	"character": 36,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L48"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																977,
																976
															]
														}
													],
													"sources": [
														{
															"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
															"line": 48,
															"character": 34,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L48"
														}
													]
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Partial",
								"package": "typescript"
							}
						},
						{
							"id": 981,
							"name": "maxLength",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "string only"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 53,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L53"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 982,
							"name": "minLength",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 54,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L54"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 973,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 47,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L47"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 979,
							"name": "required",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 50,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L50"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 972,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 46,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L46"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "string"
									},
									{
										"type": "literal",
										"value": "number"
									},
									{
										"type": "literal",
										"value": "boolean"
									},
									{
										"type": "literal",
										"value": "attachment"
									},
									{
										"type": "literal",
										"value": "channel"
									},
									{
										"type": "literal",
										"value": "integer"
									},
									{
										"type": "literal",
										"value": "mentionable"
									},
									{
										"type": "literal",
										"value": "role"
									},
									{
										"type": "literal",
										"value": "user"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								980,
								983,
								978,
								974,
								981,
								982,
								973,
								979,
								972
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
							"line": 45,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L45"
						}
					]
				},
				{
					"id": 930,
					"name": "XernerxSlashCommandBuilderOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 951,
							"name": "category",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 23,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L23"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 937,
							"name": "contexts",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L10"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "Guild"
										},
										{
											"type": "literal",
											"value": "BotDM"
										},
										{
											"type": "literal",
											"value": "PrivateChannel"
										}
									]
								}
							}
						},
						{
							"id": 952,
							"name": "cooldown",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 24,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L24"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 944,
							"name": "defer",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 19,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L19"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 945,
							"name": "deploy",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 20,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L20"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 946,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 947,
											"name": "global",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 20,
													"character": 12,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L20"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 948,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 20,
													"character": 30,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L20"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												947,
												948
											]
										}
									],
									"sources": [
										{
											"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
											"line": 20,
											"character": 10,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L20"
										}
									]
								}
							}
						},
						{
							"id": 936,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 9,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L9"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 942,
							"name": "groups",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 15,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L15"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 996,
									"name": "XernerxSlashCommandBuilderGroup",
									"package": "xernerx"
								}
							}
						},
						{
							"id": 964,
							"name": "ignore",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 36,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L36"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 965,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 968,
											"name": "channels",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 39,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L39"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 969,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 40,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L40"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 966,
											"name": "owner",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 37,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L37"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 970,
											"name": "types",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 41,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L41"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "payloads/v10/channel.ts",
													"qualifiedName": "ChannelType"
												},
												"name": "ChannelType",
												"package": "discord-api-types"
											}
										},
										{
											"id": 967,
											"name": "users",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 38,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L38"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												968,
												969,
												966,
												970,
												967
											]
										}
									],
									"sources": [
										{
											"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
											"line": 36,
											"character": 10,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L36"
										}
									]
								}
							}
						},
						{
							"id": 949,
							"name": "info",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 21,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L21"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 938,
							"name": "integration",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 11,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L11"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "GuildInstall"
										},
										{
											"type": "literal",
											"value": "UserInstall"
										}
									]
								}
							}
						},
						{
							"id": 932,
							"name": "locales",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L8"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Partial"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/common.ts",
													"qualifiedName": "Locale"
												},
												"name": "Locale",
												"package": "discord-api-types"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 933,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 935,
															"name": "description",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 8,
																	"character": 50,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L8"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 934,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 8,
																	"character": 36,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L8"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																935,
																934
															]
														}
													],
													"sources": [
														{
															"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
															"line": 8,
															"character": 34,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L8"
														}
													]
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Partial",
								"package": "typescript"
							}
						},
						{
							"id": 931,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Discord"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 7,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L7"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 939,
							"name": "nsfw",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 12,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L12"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 940,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 13,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L13"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 971,
									"name": "XernerxSlashCommandBuilderOption",
									"package": "xernerx"
								}
							}
						},
						{
							"id": 953,
							"name": "permissions",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 25,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L25"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 954,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 955,
											"name": "client",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 26,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L26"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													},
													{
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "literal",
																	"value": "CreateInstantInvite"
																},
																{
																	"type": "literal",
																	"value": "KickMembers"
																},
																{
																	"type": "literal",
																	"value": "BanMembers"
																},
																{
																	"type": "literal",
																	"value": "Administrator"
																},
																{
																	"type": "literal",
																	"value": "ManageChannels"
																},
																{
																	"type": "literal",
																	"value": "ManageGuild"
																},
																{
																	"type": "literal",
																	"value": "AddReactions"
																},
																{
																	"type": "literal",
																	"value": "ViewAuditLog"
																},
																{
																	"type": "literal",
																	"value": "PrioritySpeaker"
																},
																{
																	"type": "literal",
																	"value": "Stream"
																},
																{
																	"type": "literal",
																	"value": "ViewChannel"
																},
																{
																	"type": "literal",
																	"value": "SendMessages"
																},
																{
																	"type": "literal",
																	"value": "SendTTSMessages"
																},
																{
																	"type": "literal",
																	"value": "ManageMessages"
																},
																{
																	"type": "literal",
																	"value": "EmbedLinks"
																},
																{
																	"type": "literal",
																	"value": "AttachFiles"
																},
																{
																	"type": "literal",
																	"value": "ReadMessageHistory"
																},
																{
																	"type": "literal",
																	"value": "MentionEveryone"
																},
																{
																	"type": "literal",
																	"value": "UseExternalEmojis"
																},
																{
																	"type": "literal",
																	"value": "ViewGuildInsights"
																},
																{
																	"type": "literal",
																	"value": "Connect"
																},
																{
																	"type": "literal",
																	"value": "Speak"
																},
																{
																	"type": "literal",
																	"value": "MuteMembers"
																},
																{
																	"type": "literal",
																	"value": "DeafenMembers"
																},
																{
																	"type": "literal",
																	"value": "MoveMembers"
																},
																{
																	"type": "literal",
																	"value": "UseVAD"
																},
																{
																	"type": "literal",
																	"value": "ChangeNickname"
																},
																{
																	"type": "literal",
																	"value": "ManageNicknames"
																},
																{
																	"type": "literal",
																	"value": "ManageRoles"
																},
																{
																	"type": "literal",
																	"value": "ManageWebhooks"
																},
																{
																	"type": "literal",
																	"value": "ManageEmojisAndStickers"
																},
																{
																	"type": "literal",
																	"value": "ManageGuildExpressions"
																},
																{
																	"type": "literal",
																	"value": "UseApplicationCommands"
																},
																{
																	"type": "literal",
																	"value": "RequestToSpeak"
																},
																{
																	"type": "literal",
																	"value": "ManageEvents"
																},
																{
																	"type": "literal",
																	"value": "ManageThreads"
																},
																{
																	"type": "literal",
																	"value": "CreatePublicThreads"
																},
																{
																	"type": "literal",
																	"value": "CreatePrivateThreads"
																},
																{
																	"type": "literal",
																	"value": "UseExternalStickers"
																},
																{
																	"type": "literal",
																	"value": "SendMessagesInThreads"
																},
																{
																	"type": "literal",
																	"value": "UseEmbeddedActivities"
																},
																{
																	"type": "literal",
																	"value": "ModerateMembers"
																},
																{
																	"type": "literal",
																	"value": "ViewCreatorMonetizationAnalytics"
																},
																{
																	"type": "literal",
																	"value": "UseSoundboard"
																},
																{
																	"type": "literal",
																	"value": "CreateGuildExpressions"
																},
																{
																	"type": "literal",
																	"value": "CreateEvents"
																},
																{
																	"type": "literal",
																	"value": "UseExternalSounds"
																},
																{
																	"type": "literal",
																	"value": "SendVoiceMessages"
																},
																{
																	"type": "literal",
																	"value": "SendPolls"
																},
																{
																	"type": "literal",
																	"value": "UseExternalApps"
																},
																{
																	"type": "literal",
																	"value": "PinMessages"
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 956,
											"name": "user",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 27,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L27"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													},
													{
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "literal",
																	"value": "CreateInstantInvite"
																},
																{
																	"type": "literal",
																	"value": "KickMembers"
																},
																{
																	"type": "literal",
																	"value": "BanMembers"
																},
																{
																	"type": "literal",
																	"value": "Administrator"
																},
																{
																	"type": "literal",
																	"value": "ManageChannels"
																},
																{
																	"type": "literal",
																	"value": "ManageGuild"
																},
																{
																	"type": "literal",
																	"value": "AddReactions"
																},
																{
																	"type": "literal",
																	"value": "ViewAuditLog"
																},
																{
																	"type": "literal",
																	"value": "PrioritySpeaker"
																},
																{
																	"type": "literal",
																	"value": "Stream"
																},
																{
																	"type": "literal",
																	"value": "ViewChannel"
																},
																{
																	"type": "literal",
																	"value": "SendMessages"
																},
																{
																	"type": "literal",
																	"value": "SendTTSMessages"
																},
																{
																	"type": "literal",
																	"value": "ManageMessages"
																},
																{
																	"type": "literal",
																	"value": "EmbedLinks"
																},
																{
																	"type": "literal",
																	"value": "AttachFiles"
																},
																{
																	"type": "literal",
																	"value": "ReadMessageHistory"
																},
																{
																	"type": "literal",
																	"value": "MentionEveryone"
																},
																{
																	"type": "literal",
																	"value": "UseExternalEmojis"
																},
																{
																	"type": "literal",
																	"value": "ViewGuildInsights"
																},
																{
																	"type": "literal",
																	"value": "Connect"
																},
																{
																	"type": "literal",
																	"value": "Speak"
																},
																{
																	"type": "literal",
																	"value": "MuteMembers"
																},
																{
																	"type": "literal",
																	"value": "DeafenMembers"
																},
																{
																	"type": "literal",
																	"value": "MoveMembers"
																},
																{
																	"type": "literal",
																	"value": "UseVAD"
																},
																{
																	"type": "literal",
																	"value": "ChangeNickname"
																},
																{
																	"type": "literal",
																	"value": "ManageNicknames"
																},
																{
																	"type": "literal",
																	"value": "ManageRoles"
																},
																{
																	"type": "literal",
																	"value": "ManageWebhooks"
																},
																{
																	"type": "literal",
																	"value": "ManageEmojisAndStickers"
																},
																{
																	"type": "literal",
																	"value": "ManageGuildExpressions"
																},
																{
																	"type": "literal",
																	"value": "UseApplicationCommands"
																},
																{
																	"type": "literal",
																	"value": "RequestToSpeak"
																},
																{
																	"type": "literal",
																	"value": "ManageEvents"
																},
																{
																	"type": "literal",
																	"value": "ManageThreads"
																},
																{
																	"type": "literal",
																	"value": "CreatePublicThreads"
																},
																{
																	"type": "literal",
																	"value": "CreatePrivateThreads"
																},
																{
																	"type": "literal",
																	"value": "UseExternalStickers"
																},
																{
																	"type": "literal",
																	"value": "SendMessagesInThreads"
																},
																{
																	"type": "literal",
																	"value": "UseEmbeddedActivities"
																},
																{
																	"type": "literal",
																	"value": "ModerateMembers"
																},
																{
																	"type": "literal",
																	"value": "ViewCreatorMonetizationAnalytics"
																},
																{
																	"type": "literal",
																	"value": "UseSoundboard"
																},
																{
																	"type": "literal",
																	"value": "CreateGuildExpressions"
																},
																{
																	"type": "literal",
																	"value": "CreateEvents"
																},
																{
																	"type": "literal",
																	"value": "UseExternalSounds"
																},
																{
																	"type": "literal",
																	"value": "SendVoiceMessages"
																},
																{
																	"type": "literal",
																	"value": "SendPolls"
																},
																{
																	"type": "literal",
																	"value": "UseExternalApps"
																},
																{
																	"type": "literal",
																	"value": "PinMessages"
																}
															]
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												955,
												956
											]
										}
									],
									"sources": [
										{
											"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
											"line": 25,
											"character": 15,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L25"
										}
									]
								}
							}
						},
						{
							"id": 943,
							"name": "premium",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Xernerx"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 18,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L18"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 957,
							"name": "strict",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 29,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L29"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 958,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 961,
											"name": "channels",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 32,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L32"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 962,
											"name": "guilds",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 33,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L33"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 959,
											"name": "owner",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 30,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L30"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 963,
											"name": "types",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 34,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L34"
												}
											],
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "payloads/v10/channel.ts",
													"qualifiedName": "ChannelType"
												},
												"name": "ChannelType",
												"package": "discord-api-types"
											}
										},
										{
											"id": 960,
											"name": "users",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
													"line": 31,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L31"
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												961,
												962,
												959,
												963,
												960
											]
										}
									],
									"sources": [
										{
											"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
											"line": 29,
											"character": 10,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L29"
										}
									]
								}
							}
						},
						{
							"id": 941,
							"name": "subcommands",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 14,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L14"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 988,
									"name": "XernerxSlashCommandBuilderSubcommand",
									"package": "xernerx"
								}
							}
						},
						{
							"id": 950,
							"name": "usage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 22,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L22"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								951,
								937,
								952,
								944,
								945,
								936,
								942,
								964,
								949,
								938,
								932,
								931,
								939,
								940,
								953,
								943,
								957,
								941,
								950
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
							"line": 5,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L5"
						}
					]
				},
				{
					"id": 988,
					"name": "XernerxSlashCommandBuilderSubcommand",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"children": [
						{
							"id": 990,
							"name": "description",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 60,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L60"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 992,
							"name": "locales",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 62,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L62"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "typescript",
									"packagePath": "lib/lib.es5.d.ts",
									"qualifiedName": "Partial"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/common.ts",
													"qualifiedName": "Locale"
												},
												"name": "Locale",
												"package": "discord-api-types"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 993,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 995,
															"name": "description",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 62,
																	"character": 50,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L62"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 994,
															"name": "name",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
																	"line": 62,
																	"character": 36,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L62"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																995,
																994
															]
														}
													],
													"sources": [
														{
															"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
															"line": 62,
															"character": 34,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L62"
														}
													]
												}
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								],
								"name": "Partial",
								"package": "typescript"
							}
						},
						{
							"id": 989,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 59,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L59"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 991,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
									"line": 61,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L61"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 971,
									"name": "XernerxSlashCommandBuilderOption",
									"package": "xernerx"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								990,
								992,
								989,
								991
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
							"line": 58,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L58"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						996,
						971,
						930,
						988
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandBuilderOptions.ts#L1"
				}
			]
		},
		{
			"id": 1004,
			"name": "interfaces/XernerxSlashCommandHandlerOptions",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1005,
					"name": "XernerxSlashCommandHandlerOptions",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@format",
								"content": []
							}
						]
					},
					"children": [
						{
							"id": 1006,
							"name": "directory",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
									"line": 4,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandHandlerOptions.ts#L4"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1006
							]
						}
					],
					"sources": [
						{
							"fileName": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
							"line": 3,
							"character": 17,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandHandlerOptions.ts#L3"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"children": [
						1005
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/interfaces/XernerxSlashCommandHandlerOptions.ts#L1"
				}
			]
		},
		{
			"id": 1007,
			"name": "model/XernerxGuild",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1008,
					"name": "XernerxGuild",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1009,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxGuild.ts",
									"line": 6,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L6"
								}
							],
							"signatures": [
								{
									"id": 1010,
									"name": "XernerxGuild",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/model/XernerxGuild.ts",
											"line": 6,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L6"
										}
									],
									"parameters": [
										{
											"id": 1011,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Client"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": true
													}
												],
												"name": "Client",
												"package": "discord.js"
											}
										},
										{
											"id": 1012,
											"name": "guild",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "BaseGuild"
												},
												"name": "BaseGuild",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1008,
										"name": "XernerxGuild",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "BaseGuild.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.constructor"
							}
						},
						{
							"id": 1038,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 559,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "Client"
								},
								"typeArguments": [
									{
										"type": "literal",
										"value": true
									}
								],
								"name": "Client",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.client"
							}
						},
						{
							"id": 1021,
							"name": "features",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 687,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "ANIMATED_BANNER"
										},
										{
											"type": "literal",
											"value": "ANIMATED_ICON"
										},
										{
											"type": "literal",
											"value": "APPLICATION_COMMAND_PERMISSIONS_V2"
										},
										{
											"type": "literal",
											"value": "AUTO_MODERATION"
										},
										{
											"type": "literal",
											"value": "BANNER"
										},
										{
											"type": "literal",
											"value": "COMMUNITY"
										},
										{
											"type": "literal",
											"value": "CREATOR_MONETIZABLE_PROVISIONAL"
										},
										{
											"type": "literal",
											"value": "CREATOR_STORE_PAGE"
										},
										{
											"type": "literal",
											"value": "DEVELOPER_SUPPORT_SERVER"
										},
										{
											"type": "literal",
											"value": "DISCOVERABLE"
										},
										{
											"type": "literal",
											"value": "FEATURABLE"
										},
										{
											"type": "literal",
											"value": "HAS_DIRECTORY_ENTRY"
										},
										{
											"type": "literal",
											"value": "HUB"
										},
										{
											"type": "literal",
											"value": "INVITES_DISABLED"
										},
										{
											"type": "literal",
											"value": "INVITE_SPLASH"
										},
										{
											"type": "literal",
											"value": "LINKED_TO_HUB"
										},
										{
											"type": "literal",
											"value": "MEMBER_VERIFICATION_GATE_ENABLED"
										},
										{
											"type": "literal",
											"value": "MORE_SOUNDBOARD"
										},
										{
											"type": "literal",
											"value": "MONETIZATION_ENABLED"
										},
										{
											"type": "literal",
											"value": "MORE_STICKERS"
										},
										{
											"type": "literal",
											"value": "NEWS"
										},
										{
											"type": "literal",
											"value": "PARTNERED"
										},
										{
											"type": "literal",
											"value": "PREVIEW_ENABLED"
										},
										{
											"type": "literal",
											"value": "PRIVATE_THREADS"
										},
										{
											"type": "literal",
											"value": "RAID_ALERTS_DISABLED"
										},
										{
											"type": "literal",
											"value": "RELAY_ENABLED"
										},
										{
											"type": "literal",
											"value": "ROLE_ICONS"
										},
										{
											"type": "literal",
											"value": "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE"
										},
										{
											"type": "literal",
											"value": "ROLE_SUBSCRIPTIONS_ENABLED"
										},
										{
											"type": "literal",
											"value": "SOUNDBOARD"
										},
										{
											"type": "literal",
											"value": "TICKETED_EVENTS_ENABLED"
										},
										{
											"type": "literal",
											"value": "VANITY_URL"
										},
										{
											"type": "literal",
											"value": "VERIFIED"
										},
										{
											"type": "literal",
											"value": "VIP_REGIONS"
										},
										{
											"type": "literal",
											"value": "WELCOME_SCREEN_ENABLED"
										},
										{
											"type": "literal",
											"value": "GUILD_TAGS"
										},
										{
											"type": "literal",
											"value": "ENHANCED_ROLE_COLORS"
										},
										{
											"type": "literal",
											"value": "GUESTS_ENABLED"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.features"
							}
						},
						{
							"id": 1022,
							"name": "icon",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 688,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.icon"
							}
						},
						{
							"id": 1023,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 689,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.id"
							}
						},
						{
							"id": 1024,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 690,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.name"
							}
						},
						{
							"id": 1017,
							"name": "createdAt",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 685,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1018,
								"name": "createdAt",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 685,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"packageName": "typescript",
										"packagePath": "lib/lib.es5.d.ts",
										"qualifiedName": "Date"
									},
									"name": "Date",
									"package": "typescript"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "BaseGuild.createdAt"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.createdAt"
							}
						},
						{
							"id": 1019,
							"name": "createdTimestamp",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 686,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1020,
								"name": "createdTimestamp",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 686,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "number"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "BaseGuild.createdTimestamp"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.createdTimestamp"
							}
						},
						{
							"id": 1025,
							"name": "nameAcronym",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 691,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1026,
								"name": "nameAcronym",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 691,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "BaseGuild.nameAcronym"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.nameAcronym"
							}
						},
						{
							"id": 1027,
							"name": "partnered",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 692,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1028,
								"name": "partnered",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 692,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "BaseGuild.partnered"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.partnered"
							}
						},
						{
							"id": 1029,
							"name": "verified",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 693,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1030,
								"name": "verified",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 693,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "BaseGuild.verified"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.verified"
							}
						},
						{
							"id": 1013,
							"name": "consumeEntitlement",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxGuild.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 1014,
									"name": "consumeEntitlement",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/model/XernerxGuild.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L10"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1015,
							"name": "entitlements",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxGuild.ts",
									"line": 12,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L12"
								}
							],
							"signatures": [
								{
									"id": 1016,
									"name": "entitlements",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/model/XernerxGuild.ts",
											"line": 12,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L12"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1031,
							"name": "fetch",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 694,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1032,
									"name": "fetch",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 694,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Guild"
												},
												"name": "Guild",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "BaseGuild.fetch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.fetch"
							}
						},
						{
							"id": 1033,
							"name": "iconURL",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 695,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1034,
									"name": "iconURL",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 695,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1035,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/rest",
													"packagePath": "dist/index.d.mts",
													"qualifiedName": "ImageURLOptions"
												},
												"name": "ImageURLOptions",
												"package": "@discordjs/rest"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "BaseGuild.iconURL"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.iconURL"
							}
						},
						{
							"id": 1039,
							"name": "toJSON",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 560,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1040,
									"name": "toJSON",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 560,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1041,
											"name": "props",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"packageName": "typescript",
														"packagePath": "lib/lib.es5.d.ts",
														"qualifiedName": "Record"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "boolean"
																}
															]
														}
													],
													"name": "Record",
													"package": "typescript"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "BaseGuild.toJSON"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.toJSON"
							}
						},
						{
							"id": 1036,
							"name": "toString",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 696,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1037,
									"name": "toString",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a string representation of an object."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 696,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "BaseGuild.toString"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.toString"
							}
						},
						{
							"id": 1042,
							"name": "valueOf",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 561,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1043,
									"name": "valueOf",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 561,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "BaseGuild.valueOf"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "BaseGuild.valueOf"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1009
							]
						},
						{
							"title": "Properties",
							"children": [
								1038,
								1021,
								1022,
								1023,
								1024
							]
						},
						{
							"title": "Accessors",
							"children": [
								1017,
								1019,
								1025,
								1027,
								1029
							]
						},
						{
							"title": "Methods",
							"children": [
								1013,
								1015,
								1031,
								1033,
								1039,
								1036,
								1042
							]
						}
					],
					"sources": [
						{
							"fileName": "src/model/XernerxGuild.ts",
							"line": 5,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L5"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "discord.js",
								"packagePath": "typings/index.d.mts",
								"qualifiedName": "BaseGuild"
							},
							"name": "BaseGuild",
							"package": "discord.js"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1008
					]
				}
			],
			"sources": [
				{
					"fileName": "src/model/XernerxGuild.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxGuild.ts#L1"
				}
			]
		},
		{
			"id": 1044,
			"name": "model/XernerxInteractionArguments",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1045,
					"name": "XernerxInteractionArguments",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1046,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxInteractionArguments.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 1047,
									"name": "XernerxInteractionArguments",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/model/XernerxInteractionArguments.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L10"
										}
									],
									"parameters": [
										{
											"id": 1048,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "ChatInputCommandInteraction"
												},
												"name": "ChatInputCommandInteraction",
												"package": "discord.js"
											}
										},
										{
											"id": 1049,
											"name": "command",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 43,
												"name": "XernerxSlashCommandBuilder",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1045,
										"name": "XernerxInteractionArguments",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 1056,
							"name": "group",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxInteractionArguments.ts",
									"line": 85,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L85"
								}
							],
							"signatures": [
								{
									"id": 1057,
									"name": "group",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves the name of the subcommand group from the current interaction.\n\nThis method attempts to extract the subcommand group name from the interaction options.\nIf no subcommand group is present or an error occurs, it returns null."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The name of the subcommand group if available, otherwise null."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxInteractionArguments.ts",
											"line": 85,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L85"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							]
						},
						{
							"id": 1052,
							"name": "options",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxInteractionArguments.ts",
									"line": 25,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L25"
								}
							],
							"signatures": [
								{
									"id": 1053,
									"name": "options",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves the options from the current interaction based on the command structure.\n\nThis method processes the command's groups, subcommands, and options to extract\nthe relevant options from the interaction. It returns a record of option names\nand their corresponding values from the interaction."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A record of option names and values if available, otherwise null."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxInteractionArguments.ts",
											"line": 25,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L25"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										]
									}
								}
							]
						},
						{
							"id": 1054,
							"name": "subcommand",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxInteractionArguments.ts",
									"line": 69,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L69"
								}
							],
							"signatures": [
								{
									"id": 1055,
									"name": "subcommand",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves the name of the subcommand from the current interaction.\n\nThis method attempts to extract the subcommand name from the interaction options.\nIf no subcommand is present or an error occurs, it returns null."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The name of the subcommand if available, otherwise null."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxInteractionArguments.ts",
											"line": 69,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L69"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1046
							]
						},
						{
							"title": "Methods",
							"children": [
								1056,
								1052,
								1054
							]
						}
					],
					"sources": [
						{
							"fileName": "src/model/XernerxInteractionArguments.ts",
							"line": 6,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L6"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1045
					]
				}
			],
			"sources": [
				{
					"fileName": "src/model/XernerxInteractionArguments.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxInteractionArguments.ts#L1"
				}
			]
		},
		{
			"id": 1058,
			"name": "model/XernerxMonitisation",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1059,
					"name": "XernerxMonitisation",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1060,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxMonitisation.ts",
									"line": 9,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L9"
								}
							],
							"signatures": [
								{
									"id": 1061,
									"name": "XernerxMonitisation",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/model/XernerxMonitisation.ts",
											"line": 9,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L9"
										}
									],
									"parameters": [
										{
											"id": 1062,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Client"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": true
													}
												],
												"name": "Client",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1059,
										"name": "XernerxMonitisation",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "MonetizationAPI.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "MonetizationAPI.constructor"
							}
						},
						{
							"id": 1064,
							"name": "consume",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxMonitisation.ts",
									"line": 22,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L22"
								}
							],
							"signatures": [
								{
									"id": 1065,
									"name": "consume",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Consumes an entitlement for the current user."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the entitlement is successfully consumed."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxMonitisation.ts",
											"line": 22,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L22"
										}
									],
									"parameters": [
										{
											"id": 1066,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The unique identifier of the entitlement to be consumed."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1067,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Optional request options specifying authentication or signaling method."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "auth"
															},
															{
																"type": "literal",
																"value": "signal"
															}
														]
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1101,
							"name": "consumeEntitlement",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
									"line": 1528,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1102,
									"name": "consumeEntitlement",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Marks a given entitlement for the user as consumed. Only available for One-Time Purchase consumable SKUs."
											}
										],
										"blockTags": [
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/monetization/entitlements#consume-an-entitlement",
														"target": "https://discord.com/developers/docs/monetization/entitlements#consume-an-entitlement"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
											"line": 1528,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1103,
											"name": "applicationId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The application id to consume the entitlement for"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1104,
											"name": "entitlementId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The entitlement id to consume"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1105,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for consuming the entitlement"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "literal",
														"value": "signal"
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "MonetizationAPI.consumeEntitlement"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "MonetizationAPI.consumeEntitlement"
							}
						},
						{
							"id": 1075,
							"name": "create",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxMonitisation.ts",
									"line": 54,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L54"
								}
							],
							"signatures": [
								{
									"id": 1076,
									"name": "create",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a test entitlement for a specified user and SKU."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves with the created test entitlement, or undefined if the SKU is not found."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxMonitisation.ts",
											"line": 54,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L54"
										}
									],
									"parameters": [
										{
											"id": 1077,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The unique identifier of the SKU for which the entitlement is to be created."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1078,
											"name": "user",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The unique identifier of the user who will own the entitlement."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "typescript",
															"packagePath": "lib/lib.es5.d.ts",
															"qualifiedName": "Partial"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "typescript",
																	"packagePath": "lib/lib.es5.d.ts",
																	"qualifiedName": "Omit"
																},
																"typeArguments": [
																	{
																		"type": "reference",
																		"target": {
																			"packageName": "discord-api-types",
																			"packagePath": "payloads/v10/monetization.ts",
																			"qualifiedName": "APIEntitlement"
																		},
																		"name": "APIEntitlement",
																		"package": "discord-api-types"
																	},
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "literal",
																				"value": "ends_at"
																			},
																			{
																				"type": "literal",
																				"value": "starts_at"
																			}
																		]
																	}
																],
																"name": "Omit",
																"package": "typescript"
															}
														],
														"name": "Partial",
														"package": "typescript"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1091,
							"name": "createTestEntitlement",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
									"line": 1510,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1092,
									"name": "createTestEntitlement",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a test entitlement for an application's SKU."
											}
										],
										"blockTags": [
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/monetization/entitlements#create-test-entitlement",
														"target": "https://discord.com/developers/docs/monetization/entitlements#create-test-entitlement"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
											"line": 1510,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1093,
											"name": "applicationId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The application id to create the entitlement for"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1094,
											"name": "body",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The data for creating the entitlement"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTPostAPIEntitlementJSONBody"
												},
												"name": "RESTPostAPIEntitlementJSONBody",
												"package": "discord-api-types"
											}
										},
										{
											"id": 1095,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for creating the entitlement"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "literal",
														"value": "signal"
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Partial"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "typescript",
															"packagePath": "lib/lib.es5.d.ts",
															"qualifiedName": "Omit"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": {
																	"packageName": "discord-api-types",
																	"packagePath": "payloads/v10/monetization.ts",
																	"qualifiedName": "APIEntitlement"
																},
																"name": "APIEntitlement",
																"package": "discord-api-types"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": "ends_at"
																	},
																	{
																		"type": "literal",
																		"value": "starts_at"
																	}
																]
															}
														],
														"name": "Omit",
														"package": "typescript"
													}
												],
												"name": "Partial",
												"package": "typescript"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "MonetizationAPI.createTestEntitlement"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "MonetizationAPI.createTestEntitlement"
							}
						},
						{
							"id": 1079,
							"name": "delete",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxMonitisation.ts",
									"line": 70,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L70"
								}
							],
							"signatures": [
								{
									"id": 1080,
									"name": "delete",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Deletes a test entitlement for the current user."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the test entitlement is successfully deleted."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxMonitisation.ts",
											"line": 70,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L70"
										}
									],
									"parameters": [
										{
											"id": 1081,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The unique identifier of the test entitlement to be deleted."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1096,
							"name": "deleteTestEntitlement",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
									"line": 1519,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1097,
									"name": "deleteTestEntitlement",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Deletes a test entitlement for an application's SKU."
											}
										],
										"blockTags": [
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/monetization/entitlements#delete-test-entitlement",
														"target": "https://discord.com/developers/docs/monetization/entitlements#delete-test-entitlement"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
											"line": 1519,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1098,
											"name": "applicationId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The application id to delete the entitlement for"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1099,
											"name": "entitlementId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The entitlement id to delete"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1100,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for deleting the entitlement"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "literal",
														"value": "signal"
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "MonetizationAPI.deleteTestEntitlement"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "MonetizationAPI.deleteTestEntitlement"
							}
						},
						{
							"id": 1068,
							"name": "entitlements",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxMonitisation.ts",
									"line": 33,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L33"
								}
							],
							"signatures": [
								{
									"id": 1069,
									"name": "entitlements",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves entitlements for the current user."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves with the entitlements for the current user."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxMonitisation.ts",
											"line": 33,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L33"
										}
									],
									"parameters": [
										{
											"id": 1070,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An optional query object to filter entitlements."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPIEntitlementsQuery"
												},
												"name": "RESTGetAPIEntitlementsQuery",
												"package": "discord-api-types"
											}
										},
										{
											"id": 1071,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Optional request options specifying authentication or signaling method."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "auth"
															},
															{
																"type": "literal",
																"value": "signal"
															}
														]
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPIEntitlementsResult"
												},
												"name": "RESTGetAPIEntitlementsResult",
												"package": "discord-api-types"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1086,
							"name": "getEntitlements",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
									"line": 1501,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1087,
									"name": "getEntitlements",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fetches the entitlements for an application."
											}
										],
										"blockTags": [
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/monetization/entitlements#list-entitlements",
														"target": "https://discord.com/developers/docs/monetization/entitlements#list-entitlements"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
											"line": 1501,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1088,
											"name": "applicationId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The application id to fetch entitlements for"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1089,
											"name": "query",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The query options for fetching entitlements"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPIEntitlementsQuery"
												},
												"name": "RESTGetAPIEntitlementsQuery",
												"package": "discord-api-types"
											}
										},
										{
											"id": 1090,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for fetching entitlements"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "literal",
														"value": "signal"
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPIEntitlementsResult"
												},
												"name": "RESTGetAPIEntitlementsResult",
												"package": "discord-api-types"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "MonetizationAPI.getEntitlements"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "MonetizationAPI.getEntitlements"
							}
						},
						{
							"id": 1082,
							"name": "getSKUs",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
									"line": 1492,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1083,
									"name": "getSKUs",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fetches the SKUs for an application."
											}
										],
										"blockTags": [
											{
												"tag": "@see",
												"content": [
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "https://discord.com/developers/docs/monetization/skus#list-skus",
														"target": "https://discord.com/developers/docs/monetization/skus#list-skus"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@discordjs/core/dist/index.d.mts",
											"line": 1492,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1084,
											"name": "applicationId",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1085,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "literal",
														"value": "signal"
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPISKUsResult"
												},
												"name": "RESTGetAPISKUsResult",
												"package": "discord-api-types"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "MonetizationAPI.getSKUs"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "MonetizationAPI.getSKUs"
							}
						},
						{
							"id": 1072,
							"name": "sku",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxMonitisation.ts",
									"line": 43,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L43"
								}
							],
							"signatures": [
								{
									"id": 1073,
									"name": "sku",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves the Stock Keeping Units (SKUs) for the current user."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves with the SKUs for the current user."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxMonitisation.ts",
											"line": 43,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L43"
										}
									],
									"parameters": [
										{
											"id": 1074,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Optional request options specifying authentication or signaling method."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "typescript",
													"packagePath": "lib/lib.es5.d.ts",
													"qualifiedName": "Pick"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"packageName": "@discordjs/rest",
															"packagePath": "dist/index.d.mts",
															"qualifiedName": "RequestData"
														},
														"name": "RequestData",
														"package": "@discordjs/rest"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "auth"
															},
															{
																"type": "literal",
																"value": "signal"
															}
														]
													}
												],
												"name": "Pick",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord-api-types",
													"packagePath": "rest/v10/monetization.ts",
													"qualifiedName": "RESTGetAPISKUsResult"
												},
												"name": "RESTGetAPISKUsResult",
												"package": "discord-api-types"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1060
							]
						},
						{
							"title": "Methods",
							"children": [
								1064,
								1101,
								1075,
								1091,
								1079,
								1096,
								1068,
								1086,
								1082,
								1072
							]
						}
					],
					"sources": [
						{
							"fileName": "src/model/XernerxMonitisation.ts",
							"line": 6,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L6"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "@discordjs/core",
								"packagePath": "dist/index.d.mts",
								"qualifiedName": "MonetizationAPI"
							},
							"name": "MonetizationAPI",
							"package": "@discordjs/core"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1059
					]
				}
			],
			"sources": [
				{
					"fileName": "src/model/XernerxMonitisation.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxMonitisation.ts#L1"
				}
			]
		},
		{
			"id": 1106,
			"name": "model/XernerxUser",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1107,
					"name": "XernerxUser",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1108,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxUser.ts",
									"line": 11,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L11"
								}
							],
							"signatures": [
								{
									"id": 1109,
									"name": "XernerxUser",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/model/XernerxUser.ts",
											"line": 11,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L11"
										}
									],
									"parameters": [
										{
											"id": 1110,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Client"
														},
														"typeArguments": [
															{
																"type": "literal",
																"value": true
															}
														],
														"name": "Client",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": 107,
														"name": "XernerxClient",
														"package": "xernerx"
													}
												]
											}
										},
										{
											"id": 1111,
											"name": "user",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "User"
												},
												"name": "User",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1107,
										"name": "XernerxUser",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "User.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "User.constructor"
							}
						},
						{
							"id": 1123,
							"name": "accentColor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3840,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.accentColor"
							}
						},
						{
							"id": 1124,
							"name": "avatar",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3841,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.avatar"
							}
						},
						{
							"id": 1125,
							"name": "avatarDecoration",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Use "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "User.avatarDecorationData",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "User.avatarDecorationData"
												}
											},
											{
												"kind": "text",
												"text": " instead"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3843,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.avatarDecoration"
							}
						},
						{
							"id": 1126,
							"name": "avatarDecorationData",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3844,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "AvatarDecorationData"
										},
										"name": "AvatarDecorationData",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.avatarDecorationData"
							}
						},
						{
							"id": 1127,
							"name": "banner",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3845,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.banner"
							}
						},
						{
							"id": 1128,
							"name": "bot",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3846,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.bot"
							}
						},
						{
							"id": 1184,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 559,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "Client"
								},
								"typeArguments": [
									{
										"type": "literal",
										"value": true
									}
								],
								"name": "Client",
								"package": "discord.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.client"
							}
						},
						{
							"id": 1133,
							"name": "collectibles",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3849,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Collectibles"
										},
										"name": "Collectibles",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.collectibles"
							}
						},
						{
							"id": 1134,
							"name": "discriminator",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3850,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.discriminator"
							}
						},
						{
							"id": 1141,
							"name": "flags",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3854,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Readonly"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "UserFlagsBitField"
												},
												"name": "UserFlagsBitField",
												"package": "discord.js"
											}
										],
										"name": "Readonly",
										"package": "typescript"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.flags"
							}
						},
						{
							"id": 1142,
							"name": "globalName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3855,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.globalName"
							}
						},
						{
							"id": 1145,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3857,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.id"
							}
						},
						{
							"id": 1148,
							"name": "primaryGuild",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3859,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "UserPrimaryGuild"
										},
										"name": "UserPrimaryGuild",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.primaryGuild"
							}
						},
						{
							"id": 1149,
							"name": "system",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3860,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.system"
							}
						},
						{
							"id": 1152,
							"name": "username",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3862,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.username"
							}
						},
						{
							"id": 1129,
							"name": "createdAt",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3847,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1130,
								"name": "createdAt",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3847,
										"character": 13
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"packageName": "typescript",
										"packagePath": "lib/lib.es5.d.ts",
										"qualifiedName": "Date"
									},
									"name": "Date",
									"package": "typescript"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.createdAt"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.createdAt"
							}
						},
						{
							"id": 1131,
							"name": "createdTimestamp",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3848,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1132,
								"name": "createdTimestamp",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3848,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "number"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.createdTimestamp"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.createdTimestamp"
							}
						},
						{
							"id": 1137,
							"name": "defaultAvatarURL",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3852,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1138,
								"name": "defaultAvatarURL",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3852,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.defaultAvatarURL"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.defaultAvatarURL"
							}
						},
						{
							"id": 1135,
							"name": "displayName",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3851,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1136,
								"name": "displayName",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3851,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.displayName"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.displayName"
							}
						},
						{
							"id": 1139,
							"name": "dmChannel",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3853,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1140,
								"name": "dmChannel",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3853,
										"character": 13
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": null
										},
										{
											"type": "reference",
											"target": {
												"packageName": "discord.js",
												"packagePath": "typings/index.d.mts",
												"qualifiedName": "DMChannel"
											},
											"name": "DMChannel",
											"package": "discord.js"
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.dmChannel"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.dmChannel"
							}
						},
						{
							"id": 1143,
							"name": "hexAccentColor",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3856,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1144,
								"name": "hexAccentColor",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3856,
										"character": 13
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "literal",
											"value": null
										},
										{
											"type": "templateLiteral",
											"head": "#",
											"tail": [
												[
													{
														"type": "intrinsic",
														"name": "string"
													},
													""
												]
											]
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.hexAccentColor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.hexAccentColor"
							}
						},
						{
							"id": 1146,
							"name": "partial",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3858,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1147,
								"name": "partial",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3858,
										"character": 13
									}
								],
								"type": {
									"type": "literal",
									"value": false
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.partial"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.partial"
							}
						},
						{
							"id": 1150,
							"name": "tag",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3861,
									"character": 13
								}
							],
							"getSignature": {
								"id": 1151,
								"name": "tag",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true,
									"isInherited": true
								},
								"sources": [
									{
										"fileName": "node_modules/discord.js/typings/index.d.mts",
										"line": 3861,
										"character": 13
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "User.tag"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.tag"
							}
						},
						{
							"id": 1156,
							"name": "avatarDecorationURL",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3864,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1157,
									"name": "avatarDecorationURL",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3864,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1158,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/rest",
													"packagePath": "dist/index.d.mts",
													"qualifiedName": "BaseImageURLOptions"
												},
												"name": "BaseImageURLOptions",
												"package": "@discordjs/rest"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.avatarDecorationURL"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.avatarDecorationURL"
							}
						},
						{
							"id": 1153,
							"name": "avatarURL",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3863,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1154,
									"name": "avatarURL",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3863,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1155,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/rest",
													"packagePath": "dist/index.d.mts",
													"qualifiedName": "ImageURLOptions"
												},
												"name": "ImageURLOptions",
												"package": "@discordjs/rest"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.avatarURL"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.avatarURL"
							}
						},
						{
							"id": 1159,
							"name": "bannerURL",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3865,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1160,
									"name": "bannerURL",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3865,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1161,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/rest",
													"packagePath": "dist/index.d.mts",
													"qualifiedName": "ImageURLOptions"
												},
												"name": "ImageURLOptions",
												"package": "@discordjs/rest"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.bannerURL"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.bannerURL"
							}
						},
						{
							"id": 1165,
							"name": "createDM",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3867,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1166,
									"name": "createDM",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3867,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1167,
											"name": "force",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "DMChannel"
												},
												"name": "DMChannel",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.createDM"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.createDM"
							}
						},
						{
							"id": 1168,
							"name": "deleteDM",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3868,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1169,
									"name": "deleteDM",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3868,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "DMChannel"
												},
												"name": "DMChannel",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.deleteDM"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.deleteDM"
							}
						},
						{
							"id": 1170,
							"name": "displayAvatarURL",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3869,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1171,
									"name": "displayAvatarURL",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3869,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1172,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/rest",
													"packagePath": "dist/index.d.mts",
													"qualifiedName": "ImageURLOptions"
												},
												"name": "ImageURLOptions",
												"package": "@discordjs/rest"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.displayAvatarURL"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.displayAvatarURL"
							}
						},
						{
							"id": 1116,
							"name": "entitlements",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxUser.ts",
									"line": 35,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L35"
								}
							],
							"signatures": [
								{
									"id": 1117,
									"name": "entitlements",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Retrieves the entitlements for the user and maps them to their corresponding SKU."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to an array of objects, each containing an entitlement and its associated SKU."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxUser.ts",
											"line": 35,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L35"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reflection",
													"declaration": {
														"id": 1118,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"children": [
															{
																"id": 1119,
																"name": "entitlement",
																"variant": "declaration",
																"kind": 1024,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/model/XernerxUser.ts",
																		"line": 40,
																		"character": 46,
																		"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L40"
																	}
																],
																"type": {
																	"type": "reference",
																	"target": {
																		"packageName": "discord-api-types",
																		"packagePath": "payloads/v10/monetization.ts",
																		"qualifiedName": "APIEntitlement"
																	},
																	"name": "APIEntitlement",
																	"package": "discord-api-types"
																},
																"defaultValue": "entitlement"
															},
															{
																"id": 1120,
																"name": "sku",
																"variant": "declaration",
																"kind": 1024,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/model/XernerxUser.ts",
																		"line": 40,
																		"character": 72,
																		"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L40"
																	}
																],
																"type": {
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "undefined"
																		},
																		{
																			"type": "reference",
																			"target": {
																				"packageName": "discord-api-types",
																				"packagePath": "payloads/v10/monetization.ts",
																				"qualifiedName": "APISKU"
																			},
																			"name": "APISKU",
																			"package": "discord-api-types"
																		}
																	]
																},
																"defaultValue": "..."
															}
														],
														"groups": [
															{
																"title": "Properties",
																"children": [
																	1119,
																	1120
																]
															}
														],
														"sources": [
															{
																"fileName": "src/model/XernerxUser.ts",
																"line": 40,
																"character": 44,
																"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L40"
															}
														]
													}
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1173,
							"name": "equals",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3870,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1174,
									"name": "equals",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3870,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1175,
											"name": "user",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "User"
												},
												"name": "User",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.equals"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.equals"
							}
						},
						{
							"id": 1176,
							"name": "fetch",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3871,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1177,
									"name": "fetch",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3871,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1178,
											"name": "force",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "User"
												},
												"name": "User",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.fetch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.fetch"
							}
						},
						{
							"id": 1179,
							"name": "fetchFlags",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3873,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1180,
									"name": "fetchFlags",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "This method is deprecated and will be removed in the next major version. Flags may still be retrieved via "
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "User.fetch",
														"target": 1176
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3873,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1181,
											"name": "force",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "UserFlagsBitField"
												},
												"name": "UserFlagsBitField",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.fetchFlags"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.fetchFlags"
							}
						},
						{
							"id": 1162,
							"name": "guildTagBadgeURL",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3866,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1163,
									"name": "guildTagBadgeURL",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3866,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1164,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "@discordjs/rest",
													"packagePath": "dist/index.d.mts",
													"qualifiedName": "ImageURLOptions"
												},
												"name": "ImageURLOptions",
												"package": "@discordjs/rest"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.guildTagBadgeURL"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.guildTagBadgeURL"
							}
						},
						{
							"id": 1113,
							"name": "premium",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxUser.ts",
									"line": 23,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L23"
								}
							],
							"signatures": [
								{
									"id": 1114,
									"name": "premium",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Checks if the user has any entitlements, indicating premium status."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to a boolean indicating whether the user has any entitlements (true) or not (false)."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxUser.ts",
											"line": 23,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L23"
										}
									],
									"parameters": [
										{
											"id": 1115,
											"name": "id",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The ID of the user to check for premium entitlements."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1190,
							"name": "send",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 5224,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 1191,
									"name": "send",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 5224,
											"character": 2
										}
									],
									"parameters": [
										{
											"id": 1192,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessageCreateOptions"
														},
														"name": "MessageCreateOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": false
													}
												],
												"name": "Message",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.send"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.send"
							}
						},
						{
							"id": 1121,
							"name": "synchronize",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/model/XernerxUser.ts",
									"line": 49,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L49"
								}
							],
							"signatures": [
								{
									"id": 1122,
									"name": "synchronize",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronizes the user's entitlements with the current SKU data and performs necessary actions\nsuch as consuming, deleting, or creating entitlements based on their type and the client's premium settings."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to an array of error messages, if any occurred during the synchronization process."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/model/XernerxUser.ts",
											"line": 49,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L49"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1185,
							"name": "toJSON",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 560,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1186,
									"name": "toJSON",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 560,
											"character": 9
										}
									],
									"parameters": [
										{
											"id": 1187,
											"name": "props",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"packageName": "typescript",
														"packagePath": "lib/lib.es5.d.ts",
														"qualifiedName": "Record"
													},
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "union",
															"types": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "intrinsic",
																	"name": "boolean"
																}
															]
														}
													],
													"name": "Record",
													"package": "typescript"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "unknown"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.toJSON"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.toJSON"
							}
						},
						{
							"id": 1182,
							"name": "toString",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 3874,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1183,
									"name": "toString",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a string representation of an object."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 3874,
											"character": 9
										}
									],
									"type": {
										"type": "templateLiteral",
										"head": "<@",
										"tail": [
											[
												{
													"type": "intrinsic",
													"name": "string"
												},
												">"
											]
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.toString"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.toString"
							}
						},
						{
							"id": 1188,
							"name": "valueOf",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isExternal": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "node_modules/discord.js/typings/index.d.mts",
									"line": 561,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 1189,
									"name": "valueOf",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true,
										"isInherited": true
									},
									"sources": [
										{
											"fileName": "node_modules/discord.js/typings/index.d.mts",
											"line": 561,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "User.valueOf"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "User.valueOf"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1108
							]
						},
						{
							"title": "Properties",
							"children": [
								1123,
								1124,
								1125,
								1126,
								1127,
								1128,
								1184,
								1133,
								1134,
								1141,
								1142,
								1145,
								1148,
								1149,
								1152
							]
						},
						{
							"title": "Accessors",
							"children": [
								1129,
								1131,
								1137,
								1135,
								1139,
								1143,
								1146,
								1150
							]
						},
						{
							"title": "Methods",
							"children": [
								1156,
								1153,
								1159,
								1165,
								1168,
								1170,
								1116,
								1173,
								1176,
								1179,
								1162,
								1113,
								1190,
								1121,
								1185,
								1182,
								1188
							]
						}
					],
					"sources": [
						{
							"fileName": "src/model/XernerxUser.ts",
							"line": 8,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L8"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"packageName": "discord.js",
								"packagePath": "typings/index.d.mts",
								"qualifiedName": "User"
							},
							"name": "User",
							"package": "discord.js"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1107
					]
				}
			],
			"sources": [
				{
					"fileName": "src/model/XernerxUser.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/model/XernerxUser.ts#L1"
				}
			]
		},
		{
			"id": 1193,
			"name": "tools/XernerxBase",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1194,
					"name": "XernerxBase",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1195,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L8"
								}
							],
							"signatures": [
								{
									"id": 1196,
									"name": "XernerxBase",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 8,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L8"
										}
									],
									"type": {
										"type": "reference",
										"target": 1194,
										"name": "XernerxBase",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 1197,
							"name": "base",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 6,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1198,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 6,
											"character": 31,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
										}
									],
									"signatures": [
										{
											"id": 1199,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/tools/XernerxBase.ts",
													"line": 6,
													"character": 31,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1195
							]
						},
						{
							"title": "Properties",
							"children": [
								1197
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tools/XernerxBase.ts",
							"line": 5,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L5"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 1201,
							"name": "XernerxError"
						},
						{
							"type": "reference",
							"target": 1210,
							"name": "XernerxInfo"
						},
						{
							"type": "reference",
							"target": 1218,
							"name": "XernerxInitial"
						},
						{
							"type": "reference",
							"target": 1226,
							"name": "XernerxSuccess"
						},
						{
							"type": "reference",
							"target": 1234,
							"name": "XernerxWarn"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1194
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxBase.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L1"
				}
			]
		},
		{
			"id": 1200,
			"name": "tools/XernerxError",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1201,
					"name": "XernerxError",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1202,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/tools/XernerxError.ts",
									"line": 9,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxError.ts#L9"
								}
							],
							"signatures": [
								{
									"id": 1203,
									"name": "XernerxError",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxError.ts",
											"line": 9,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxError.ts#L9"
										}
									],
									"parameters": [
										{
											"id": 1204,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1205,
											"name": "exit",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"target": 1201,
										"name": "XernerxError",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1196,
										"name": "XernerxBase.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1195,
								"name": "XernerxBase.constructor"
							}
						},
						{
							"id": 1206,
							"name": "base",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 6,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1207,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 6,
											"character": 31,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
										}
									],
									"signatures": [
										{
											"id": 1208,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/tools/XernerxBase.ts",
													"line": 6,
													"character": 31,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1197,
								"name": "XernerxBase.base"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1202
							]
						},
						{
							"title": "Properties",
							"children": [
								1206
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tools/XernerxError.ts",
							"line": 8,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxError.ts#L8"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1194,
							"name": "XernerxBase",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1201
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxError.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxError.ts#L1"
				}
			]
		},
		{
			"id": 1209,
			"name": "tools/XernerxInfo",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1210,
					"name": "XernerxInfo",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1211,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/tools/XernerxInfo.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInfo.ts#L8"
								}
							],
							"signatures": [
								{
									"id": 1212,
									"name": "XernerxInfo",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxInfo.ts",
											"line": 8,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInfo.ts#L8"
										}
									],
									"parameters": [
										{
											"id": 1213,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1210,
										"name": "XernerxInfo",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1196,
										"name": "XernerxBase.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1195,
								"name": "XernerxBase.constructor"
							}
						},
						{
							"id": 1214,
							"name": "base",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 6,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1215,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 6,
											"character": 31,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
										}
									],
									"signatures": [
										{
											"id": 1216,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/tools/XernerxBase.ts",
													"line": 6,
													"character": 31,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1197,
								"name": "XernerxBase.base"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1211
							]
						},
						{
							"title": "Properties",
							"children": [
								1214
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tools/XernerxInfo.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInfo.ts#L7"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1194,
							"name": "XernerxBase",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1210
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxInfo.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInfo.ts#L1"
				}
			]
		},
		{
			"id": 1217,
			"name": "tools/XernerxInitial",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1218,
					"name": "XernerxInitial",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1219,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/tools/XernerxInitial.ts",
									"line": 10,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInitial.ts#L10"
								}
							],
							"signatures": [
								{
									"id": 1220,
									"name": "XernerxInitial",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxInitial.ts",
											"line": 10,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInitial.ts#L10"
										}
									],
									"parameters": [
										{
											"id": 1221,
											"name": "type",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "Client"
													},
													{
														"type": "literal",
														"value": "ShardClient"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1218,
										"name": "XernerxInitial",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1196,
										"name": "XernerxBase.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1195,
								"name": "XernerxBase.constructor"
							}
						},
						{
							"id": 1222,
							"name": "base",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 6,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1223,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 6,
											"character": 31,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
										}
									],
									"signatures": [
										{
											"id": 1224,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/tools/XernerxBase.ts",
													"line": 6,
													"character": 31,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1197,
								"name": "XernerxBase.base"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1219
							]
						},
						{
							"title": "Properties",
							"children": [
								1222
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tools/XernerxInitial.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInitial.ts#L9"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1194,
							"name": "XernerxBase",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1218
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxInitial.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxInitial.ts#L1"
				}
			]
		},
		{
			"id": 1225,
			"name": "tools/XernerxSuccess",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1226,
					"name": "XernerxSuccess",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1227,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/tools/XernerxSuccess.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxSuccess.ts#L8"
								}
							],
							"signatures": [
								{
									"id": 1228,
									"name": "XernerxSuccess",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxSuccess.ts",
											"line": 8,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxSuccess.ts#L8"
										}
									],
									"parameters": [
										{
											"id": 1229,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1226,
										"name": "XernerxSuccess",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1196,
										"name": "XernerxBase.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1195,
								"name": "XernerxBase.constructor"
							}
						},
						{
							"id": 1230,
							"name": "base",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 6,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1231,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 6,
											"character": 31,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
										}
									],
									"signatures": [
										{
											"id": 1232,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/tools/XernerxBase.ts",
													"line": 6,
													"character": 31,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1197,
								"name": "XernerxBase.base"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1227
							]
						},
						{
							"title": "Properties",
							"children": [
								1230
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tools/XernerxSuccess.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxSuccess.ts#L7"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1194,
							"name": "XernerxBase",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1226
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxSuccess.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxSuccess.ts#L1"
				}
			]
		},
		{
			"id": 1233,
			"name": "tools/XernerxWarn",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1234,
					"name": "XernerxWarn",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1235,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/tools/XernerxWarn.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxWarn.ts#L8"
								}
							],
							"signatures": [
								{
									"id": 1236,
									"name": "XernerxWarn",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxWarn.ts",
											"line": 8,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxWarn.ts#L8"
										}
									],
									"parameters": [
										{
											"id": 1237,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1234,
										"name": "XernerxWarn",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1196,
										"name": "XernerxBase.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1195,
								"name": "XernerxBase.constructor"
							}
						},
						{
							"id": 1238,
							"name": "base",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/tools/XernerxBase.ts",
									"line": 6,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1239,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/tools/XernerxBase.ts",
											"line": 6,
											"character": 31,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
										}
									],
									"signatures": [
										{
											"id": 1240,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/tools/XernerxBase.ts",
													"line": 6,
													"character": 31,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxBase.ts#L6"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1197,
								"name": "XernerxBase.base"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1235
							]
						},
						{
							"title": "Properties",
							"children": [
								1238
							]
						}
					],
					"sources": [
						{
							"fileName": "src/tools/XernerxWarn.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxWarn.ts#L7"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1194,
							"name": "XernerxBase",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1234
					]
				}
			],
			"sources": [
				{
					"fileName": "src/tools/XernerxWarn.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/tools/XernerxWarn.ts#L1"
				}
			]
		},
		{
			"id": 1241,
			"name": "types/Events",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"sources": [
				{
					"fileName": "src/types/Events.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/types/Events.d.ts#L1"
				}
			]
		},
		{
			"id": 1242,
			"name": "types/Interaction",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"sources": [
				{
					"fileName": "src/types/Interaction.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/types/Interaction.d.ts#L1"
				}
			]
		},
		{
			"id": 1243,
			"name": "types/Message",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"sources": [
				{
					"fileName": "src/types/Message.d.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/types/Message.d.ts#L1"
				}
			]
		},
		{
			"id": 1244,
			"name": "util/XernerxInteractionUtil",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1245,
					"name": "XernerxInteractionUtil",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1246,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 25,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L25"
								}
							],
							"signatures": [
								{
									"id": 1247,
									"name": "XernerxInteractionUtil",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/util/XernerxInteractionUtil.ts",
											"line": 25,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L25"
										}
									],
									"parameters": [
										{
											"id": 1248,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 107,
														"name": "XernerxClient",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Client"
														},
														"typeArguments": [
															{
																"type": "literal",
																"value": true
															}
														],
														"name": "Client",
														"package": "discord.js"
													}
												]
											}
										},
										{
											"id": 1249,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Interaction"
												},
												"name": "Interaction",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1245,
										"name": "XernerxInteractionUtil",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1306,
										"name": "XernerxBaseUtil.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1305,
								"name": "XernerxBaseUtil.constructor"
							}
						},
						{
							"id": 1252,
							"name": "args",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 23,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L23"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1251,
							"name": "cache",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 22,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L22"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@discordjs/collection",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "Collection"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Collection",
								"package": "@discordjs/collection"
							}
						},
						{
							"id": 1265,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L8"
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": 107,
										"name": "XernerxClient",
										"package": "xernerx"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Client"
										},
										"typeArguments": [
											{
												"type": "literal",
												"value": true
											}
										],
										"name": "Client",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1309,
								"name": "XernerxBaseUtil.client"
							}
						},
						{
							"id": 1250,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 21,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L21"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "RepliableInteraction"
								},
								"name": "RepliableInteraction",
								"package": "discord.js"
							},
							"overwrites": {
								"type": "reference",
								"target": 1316,
								"name": "XernerxBaseUtil.interaction"
							}
						},
						{
							"id": 1266,
							"name": "parsed",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 9,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L9"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1267,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 1269,
											"name": "alias",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 11,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L11"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1268,
											"name": "command",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 10,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L10"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1270,
											"name": "mention",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 12,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L12"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 1271,
											"name": "prefix",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 13,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L13"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												1269,
												1268,
												1270,
												1271
											]
										}
									],
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 9,
											"character": 33,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L9"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1310,
								"name": "XernerxBaseUtil.parsed"
							}
						},
						{
							"id": 1256,
							"name": "reply",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 53,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L53"
								}
							],
							"signatures": [
								{
									"id": 1257,
									"name": "reply",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Replies to the interaction with the provided options."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the sent message or the edited reply."
													}
												]
											},
											{
												"tag": "@throws",
												"content": [
													{
														"kind": "text",
														"text": "Throws an error if the options parameter is not provided."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxInteractionUtil.ts",
											"line": 53,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L53"
										}
									],
									"parameters": [
										{
											"id": 1258,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The content or options for the reply. It can be a string, MessagePayload, or InteractionEditReplyOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "InteractionEditReplyOptions"
														},
														"name": "InteractionEditReplyOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "InteractionResponse"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "InteractionResponse",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1262,
							"name": "reply2",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 77,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L77"
								}
							],
							"signatures": [
								{
									"id": 1263,
									"name": "reply2",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Replies to the interaction with the provided options, using the componentsV2 flag."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the sent message or the edited reply."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxInteractionUtil.ts",
											"line": 77,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L77"
										}
									],
									"parameters": [
										{
											"id": 1264,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for the reply, including content and other message properties."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "InteractionEditReplyOptions"
												},
												"name": "InteractionEditReplyOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "InteractionResponse"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "InteractionResponse",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1253,
							"name": "send",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 40,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L40"
								}
							],
							"signatures": [
								{
									"id": 1254,
									"name": "send",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message to the channel associated with the interaction."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the sent message."
													}
												]
											},
											{
												"tag": "@throws",
												"content": [
													{
														"kind": "text",
														"text": "Throws an error if the options parameter is not provided."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxInteractionUtil.ts",
											"line": 40,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L40"
										}
									],
									"parameters": [
										{
											"id": 1255,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The content or options for the message to be sent. It can be a string, MessagePayload, or MessageCreateOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessageCreateOptions"
														},
														"name": "MessageCreateOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": true
													}
												],
												"name": "Message",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1259,
							"name": "send2",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxInteractionUtil.ts",
									"line": 65,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L65"
								}
							],
							"signatures": [
								{
									"id": 1260,
									"name": "send2",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message to the channel associated with the interaction with componentsV2 flag."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the sent message."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxInteractionUtil.ts",
											"line": 65,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L65"
										}
									],
									"parameters": [
										{
											"id": 1261,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The options for the message to be sent, including content and other message properties."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "MessageCreateOptions"
												},
												"name": "MessageCreateOptions",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": true
													}
												],
												"name": "Message",
												"package": "discord.js"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1272,
							"name": "webhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 31,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L31"
								}
							],
							"signatures": [
								{
									"id": 1273,
									"name": "webhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message using a webhook in the current interaction's channel."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the message sent by the webhook."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L31"
										}
									],
									"parameters": [
										{
											"id": 1274,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The message content or options to send via the webhook. This can be a string, MessagePayload, or WebhookMessageCreateOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "WebhookMessageCreateOptions"
														},
														"name": "WebhookMessageCreateOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1318,
										"name": "XernerxBaseUtil.webhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1317,
								"name": "XernerxBaseUtil.webhook"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1246
							]
						},
						{
							"title": "Properties",
							"children": [
								1252,
								1251,
								1265,
								1250,
								1266
							]
						},
						{
							"title": "Methods",
							"children": [
								1256,
								1262,
								1253,
								1259,
								1272
							]
						}
					],
					"sources": [
						{
							"fileName": "src/util/XernerxInteractionUtil.ts",
							"line": 20,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L20"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1304,
							"name": "XernerxBaseUtil",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1245
					]
				}
			],
			"sources": [
				{
					"fileName": "src/util/XernerxInteractionUtil.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxInteractionUtil.ts#L1"
				}
			]
		},
		{
			"id": 1275,
			"name": "util/XernerxMessageUtil",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1276,
					"name": "XernerxMessageUtil",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1277,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/XernerxMessageUtil.ts",
									"line": 13,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L13"
								}
							],
							"signatures": [
								{
									"id": 1278,
									"name": "XernerxMessageUtil",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/util/XernerxMessageUtil.ts",
											"line": 13,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L13"
										}
									],
									"parameters": [
										{
											"id": 1279,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 107,
														"name": "XernerxClient",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Client"
														},
														"typeArguments": [
															{
																"type": "literal",
																"value": true
															}
														],
														"name": "Client",
														"package": "discord.js"
													}
												]
											}
										},
										{
											"id": 1280,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"packageName": "discord.js",
													"packagePath": "typings/index.d.mts",
													"qualifiedName": "Message"
												},
												"name": "Message",
												"package": "discord.js"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1276,
										"name": "XernerxMessageUtil",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1306,
										"name": "XernerxBaseUtil.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1305,
								"name": "XernerxBaseUtil.constructor"
							}
						},
						{
							"id": 1283,
							"name": "args",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxMessageUtil.ts",
									"line": 11,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L11"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1282,
							"name": "cache",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxMessageUtil.ts",
									"line": 10,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L10"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "@discordjs/collection",
									"packagePath": "dist/index.d.ts",
									"qualifiedName": "Collection"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Collection",
								"package": "@discordjs/collection"
							}
						},
						{
							"id": 1292,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L8"
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": 107,
										"name": "XernerxClient",
										"package": "xernerx"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Client"
										},
										"typeArguments": [
											{
												"type": "literal",
												"value": true
											}
										],
										"name": "Client",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1309,
								"name": "XernerxBaseUtil.client"
							}
						},
						{
							"id": 1299,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 15,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L15"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Interaction"
										},
										"name": "Interaction",
										"package": "discord.js"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Message"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Message",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1316,
								"name": "XernerxBaseUtil.interaction"
							}
						},
						{
							"id": 1281,
							"name": "message",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxMessageUtil.ts",
									"line": 9,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L9"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"packageName": "discord.js",
									"packagePath": "typings/index.d.mts",
									"qualifiedName": "Message"
								},
								"name": "Message",
								"package": "discord.js"
							}
						},
						{
							"id": 1293,
							"name": "parsed",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 9,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L9"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1294,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 1296,
											"name": "alias",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 11,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L11"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1295,
											"name": "command",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 10,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L10"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1297,
											"name": "mention",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 12,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L12"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 1298,
											"name": "prefix",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 13,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L13"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												1296,
												1295,
												1297,
												1298
											]
										}
									],
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 9,
											"character": 33,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L9"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1310,
								"name": "XernerxBaseUtil.parsed"
							}
						},
						{
							"id": 1289,
							"name": "reply",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/XernerxMessageUtil.ts",
									"line": 86,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L86"
								}
							],
							"signatures": [
								{
									"id": 1290,
									"name": "reply",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Replies to the current message or edits an existing reply if applicable."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The sent or edited message, or null if the message ID is not found in the cache."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxMessageUtil.ts",
											"line": 86,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L86"
										}
									],
									"parameters": [
										{
											"id": 1291,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The content or options for the reply message.\n                 It can be a string, MessagePayload, or MessageReplyOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessageReplyOptions"
														},
														"name": "MessageReplyOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1286,
							"name": "send",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/XernerxMessageUtil.ts",
									"line": 60,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L60"
								}
							],
							"signatures": [
								{
									"id": 1287,
									"name": "send",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message to the channel or edits an existing message if applicable."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "The sent or edited message, or null if the message ID is not found in the cache."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxMessageUtil.ts",
											"line": 60,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L60"
										}
									],
									"parameters": [
										{
											"id": 1288,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The content or options for the message to be sent or edited.\n                 It can be a string, MessagePayload, MessageCreateOptions, or MessageEditOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessageCreateOptions"
														},
														"name": "MessageCreateOptions",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessageEditOptions"
														},
														"name": "MessageEditOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1300,
							"name": "webhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 31,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L31"
								}
							],
							"signatures": [
								{
									"id": 1301,
									"name": "webhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message using a webhook in the current interaction's channel."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the message sent by the webhook."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L31"
										}
									],
									"parameters": [
										{
											"id": 1302,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The message content or options to send via the webhook. This can be a string, MessagePayload, or WebhookMessageCreateOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "WebhookMessageCreateOptions"
														},
														"name": "WebhookMessageCreateOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1318,
										"name": "XernerxBaseUtil.webhook"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1317,
								"name": "XernerxBaseUtil.webhook"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1277
							]
						},
						{
							"title": "Properties",
							"children": [
								1283,
								1282,
								1292,
								1299,
								1281,
								1293
							]
						},
						{
							"title": "Methods",
							"children": [
								1289,
								1286,
								1300
							]
						}
					],
					"sources": [
						{
							"fileName": "src/util/XernerxMessageUtil.ts",
							"line": 8,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L8"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1304,
							"name": "XernerxBaseUtil",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1276
					]
				}
			],
			"sources": [
				{
					"fileName": "src/util/XernerxMessageUtil.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxMessageUtil.ts#L1"
				}
			]
		},
		{
			"id": 1303,
			"name": "util/XernerxUtil",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1304,
					"name": "XernerxBaseUtil",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1305,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 17,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L17"
								}
							],
							"signatures": [
								{
									"id": 1306,
									"name": "XernerxBaseUtil",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 17,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L17"
										}
									],
									"parameters": [
										{
											"id": 1307,
											"name": "client",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 107,
														"name": "XernerxClient",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Client"
														},
														"typeArguments": [
															{
																"type": "literal",
																"value": true
															}
														],
														"name": "Client",
														"package": "discord.js"
													}
												]
											}
										},
										{
											"id": 1308,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Interaction"
														},
														"name": "Interaction",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1304,
										"name": "XernerxBaseUtil",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 1309,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 8,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L8"
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": 107,
										"name": "XernerxClient",
										"package": "xernerx"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Client"
										},
										"typeArguments": [
											{
												"type": "literal",
												"value": true
											}
										],
										"name": "Client",
										"package": "discord.js"
									}
								]
							}
						},
						{
							"id": 1316,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 15,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L15"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Interaction"
										},
										"name": "Interaction",
										"package": "discord.js"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Message"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Message",
										"package": "discord.js"
									}
								]
							}
						},
						{
							"id": 1310,
							"name": "parsed",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 9,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L9"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1311,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 1313,
											"name": "alias",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 11,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L11"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1312,
											"name": "command",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 10,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L10"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1314,
											"name": "mention",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 12,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L12"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 1315,
											"name": "prefix",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/util/XernerxUtil.ts",
													"line": 13,
													"character": 2,
													"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L13"
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												1313,
												1312,
												1314,
												1315
											]
										}
									],
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 9,
											"character": 33,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L9"
										}
									]
								}
							}
						},
						{
							"id": 1317,
							"name": "webhook",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/util/XernerxUtil.ts",
									"line": 31,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L31"
								}
							],
							"signatures": [
								{
									"id": 1318,
									"name": "webhook",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Sends a message using a webhook in the current interaction's channel."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to the message sent by the webhook."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/util/XernerxUtil.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L31"
										}
									],
									"parameters": [
										{
											"id": 1319,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The message content or options to send via the webhook. This can be a string, MessagePayload, or WebhookMessageCreateOptions."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "MessagePayload"
														},
														"name": "MessagePayload",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "WebhookMessageCreateOptions"
														},
														"name": "WebhookMessageCreateOptions",
														"package": "discord.js"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1305
							]
						},
						{
							"title": "Properties",
							"children": [
								1309,
								1316,
								1310
							]
						},
						{
							"title": "Methods",
							"children": [
								1317
							]
						}
					],
					"sources": [
						{
							"fileName": "src/util/XernerxUtil.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L7"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 1245,
							"name": "XernerxInteractionUtil"
						},
						{
							"type": "reference",
							"target": 1276,
							"name": "XernerxMessageUtil"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1304
					]
				}
			],
			"sources": [
				{
					"fileName": "src/util/XernerxUtil.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/util/XernerxUtil.ts#L1"
				}
			]
		},
		{
			"id": 1320,
			"name": "validators/XernerxBaseValidator",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1321,
					"name": "XernerxBaseValidator",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1322,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 15,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L15"
								}
							],
							"signatures": [
								{
									"id": 1323,
									"name": "XernerxBaseValidator",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 15,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L15"
										}
									],
									"parameters": [
										{
											"id": 1324,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Interaction"
														},
														"name": "Interaction",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										},
										{
											"id": 1325,
											"name": "command",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": 26,
														"name": "XernerxMessageCommandBuilder",
														"package": "xernerx"
													},
													{
														"type": "reference",
														"target": 43,
														"name": "XernerxSlashCommandBuilder",
														"package": "xernerx"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1321,
										"name": "XernerxBaseValidator",
										"package": "xernerx"
									}
								}
							]
						},
						{
							"id": 1326,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 10,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L10"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							}
						},
						{
							"id": 1328,
							"name": "command",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 26,
										"name": "XernerxMessageCommandBuilder",
										"package": "xernerx"
									},
									{
										"type": "reference",
										"target": 43,
										"name": "XernerxSlashCommandBuilder",
										"package": "xernerx"
									}
								]
							}
						},
						{
							"id": 1327,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L11"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Interaction"
										},
										"name": "Interaction",
										"package": "discord.js"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Message"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Message",
										"package": "discord.js"
									}
								]
							}
						},
						{
							"id": 1329,
							"name": "satisified",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 13,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1334,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 66,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
								}
							],
							"signatures": [
								{
									"id": 1335,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Emits an error event related to command execution."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the error event has been emitted."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 66,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
										}
									],
									"parameters": [
										{
											"id": 1336,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An object containing details about the error."
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1337,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 1340,
															"name": "data",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Optional additional data related to the error."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/validators/XernerxBaseValidator.ts",
																	"line": 66,
																	"character": 52,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 1339,
															"name": "message",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "A descriptive message about the error."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/validators/XernerxBaseValidator.ts",
																	"line": 66,
																	"character": 35,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1338,
															"name": "type",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The type of error that occurred."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/validators/XernerxBaseValidator.ts",
																	"line": 66,
																	"character": 21,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																1340,
																1339,
																1338
															]
														}
													],
													"sources": [
														{
															"fileName": "src/validators/XernerxBaseValidator.ts",
															"line": 66,
															"character": 19,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1332,
							"name": "global",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 47,
									"character": 8,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L47"
								}
							],
							"signatures": [
								{
									"id": 1333,
									"name": "global",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Checks if the command is globally available or restricted to specific guilds.\nIf the command is not available in the current guild, it emits an error and sets the validation status to false."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 47,
											"character": 8,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L47"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1330,
							"name": "premium",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 31,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L31"
								}
							],
							"signatures": [
								{
									"id": 1331,
									"name": "premium",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Checks if the command requires a premium subscription and validates the user's premium status.\nIf the user does not have a premium subscription, it emits an error and sets the validation status to false."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the premium check is complete."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L31"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						},
						{
							"id": 1341,
							"name": "validate",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 75,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L75"
								}
							],
							"signatures": [
								{
									"id": 1342,
									"name": "validate",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Validates the command by checking its global availability and premium status."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to a boolean indicating whether all validation checks are satisfied."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 75,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L75"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1322
							]
						},
						{
							"title": "Properties",
							"children": [
								1326,
								1328,
								1327,
								1329
							]
						},
						{
							"title": "Methods",
							"children": [
								1334,
								1332,
								1330,
								1341
							]
						}
					],
					"sources": [
						{
							"fileName": "src/validators/XernerxBaseValidator.ts",
							"line": 9,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L9"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"target": 1344,
							"name": "XernerxSlashCommandValidator"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1321
					]
				}
			],
			"sources": [
				{
					"fileName": "src/validators/XernerxBaseValidator.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L1"
				}
			]
		},
		{
			"id": 1343,
			"name": "validators/XernerxSlashCommandValidator",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1344,
					"name": "XernerxSlashCommandValidator",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"children": [
						{
							"id": 1345,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/validators/XernerxSlashCommandValidator.ts",
									"line": 8,
									"character": 1,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxSlashCommandValidator.ts#L8"
								}
							],
							"signatures": [
								{
									"id": 1346,
									"name": "XernerxSlashCommandValidator",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"sources": [
										{
											"fileName": "src/validators/XernerxSlashCommandValidator.ts",
											"line": 8,
											"character": 1,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxSlashCommandValidator.ts#L8"
										}
									],
									"parameters": [
										{
											"id": 1347,
											"name": "interaction",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Interaction"
														},
														"name": "Interaction",
														"package": "discord.js"
													},
													{
														"type": "reference",
														"target": {
															"packageName": "discord.js",
															"packagePath": "typings/index.d.mts",
															"qualifiedName": "Message"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														],
														"name": "Message",
														"package": "discord.js"
													}
												]
											}
										},
										{
											"id": 1348,
											"name": "command",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 43,
												"name": "XernerxSlashCommandBuilder",
												"package": "xernerx"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 1344,
										"name": "XernerxSlashCommandValidator",
										"package": "xernerx"
									},
									"overwrites": {
										"type": "reference",
										"target": 1323,
										"name": "XernerxBaseValidator.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": 1322,
								"name": "XernerxBaseValidator.constructor"
							}
						},
						{
							"id": 1349,
							"name": "client",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 10,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L10"
								}
							],
							"type": {
								"type": "reference",
								"target": 107,
								"name": "XernerxClient",
								"package": "xernerx"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1326,
								"name": "XernerxBaseValidator.client"
							}
						},
						{
							"id": 1351,
							"name": "command",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 12,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L12"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": 26,
										"name": "XernerxMessageCommandBuilder",
										"package": "xernerx"
									},
									{
										"type": "reference",
										"target": 43,
										"name": "XernerxSlashCommandBuilder",
										"package": "xernerx"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1328,
								"name": "XernerxBaseValidator.command"
							}
						},
						{
							"id": 1350,
							"name": "interaction",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isReadonly": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 11,
									"character": 25,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L11"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Interaction"
										},
										"name": "Interaction",
										"package": "discord.js"
									},
									{
										"type": "reference",
										"target": {
											"packageName": "discord.js",
											"packagePath": "typings/index.d.mts",
											"qualifiedName": "Message"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Message",
										"package": "discord.js"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1327,
								"name": "XernerxBaseValidator.interaction"
							}
						},
						{
							"id": 1352,
							"name": "satisified",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 13,
									"character": 16,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L13"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": 1329,
								"name": "XernerxBaseValidator.satisified"
							}
						},
						{
							"id": 1357,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 66,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
								}
							],
							"signatures": [
								{
									"id": 1358,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Emits an error event related to command execution."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the error event has been emitted."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 66,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
										}
									],
									"parameters": [
										{
											"id": 1359,
											"name": "error",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "An object containing details about the error."
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1360,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 1363,
															"name": "data",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "Optional additional data related to the error."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/validators/XernerxBaseValidator.ts",
																	"line": 66,
																	"character": 52,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														},
														{
															"id": 1362,
															"name": "message",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "A descriptive message about the error."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/validators/XernerxBaseValidator.ts",
																	"line": 66,
																	"character": 35,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1361,
															"name": "type",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The type of error that occurred."
																	}
																]
															},
															"sources": [
																{
																	"fileName": "src/validators/XernerxBaseValidator.ts",
																	"line": 66,
																	"character": 21,
																	"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																1363,
																1362,
																1361
															]
														}
													],
													"sources": [
														{
															"fileName": "src/validators/XernerxBaseValidator.ts",
															"line": 66,
															"character": 19,
															"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L66"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1335,
										"name": "XernerxBaseValidator.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1334,
								"name": "XernerxBaseValidator.emit"
							}
						},
						{
							"id": 1355,
							"name": "global",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 47,
									"character": 8,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L47"
								}
							],
							"signatures": [
								{
									"id": 1356,
									"name": "global",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Checks if the command is globally available or restricted to specific guilds.\nIf the command is not available in the current guild, it emits an error and sets the validation status to false."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 47,
											"character": 8,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L47"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1333,
										"name": "XernerxBaseValidator.global"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1332,
								"name": "XernerxBaseValidator.global"
							}
						},
						{
							"id": 1353,
							"name": "premium",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isPublic": true,
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 31,
									"character": 14,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L31"
								}
							],
							"signatures": [
								{
									"id": 1354,
									"name": "premium",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Checks if the command requires a premium subscription and validates the user's premium status.\nIf the user does not have a premium subscription, it emits an error and sets the validation status to false."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves when the premium check is complete."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 31,
											"character": 14,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L31"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1331,
										"name": "XernerxBaseValidator.premium"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1330,
								"name": "XernerxBaseValidator.premium"
							}
						},
						{
							"id": 1364,
							"name": "validate",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isInherited": true
							},
							"sources": [
								{
									"fileName": "src/validators/XernerxBaseValidator.ts",
									"line": 75,
									"character": 7,
									"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L75"
								}
							],
							"signatures": [
								{
									"id": 1365,
									"name": "validate",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isInherited": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Validates the command by checking its global availability and premium status."
											}
										],
										"blockTags": [
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "A promise that resolves to a boolean indicating whether all validation checks are satisfied."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "src/validators/XernerxBaseValidator.ts",
											"line": 75,
											"character": 7,
											"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxBaseValidator.ts#L75"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"packageName": "typescript",
											"packagePath": "lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": 1342,
										"name": "XernerxBaseValidator.validate"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": 1341,
								"name": "XernerxBaseValidator.validate"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								1345
							]
						},
						{
							"title": "Properties",
							"children": [
								1349,
								1351,
								1350,
								1352
							]
						},
						{
							"title": "Methods",
							"children": [
								1357,
								1355,
								1353,
								1364
							]
						}
					],
					"sources": [
						{
							"fileName": "src/validators/XernerxSlashCommandValidator.ts",
							"line": 7,
							"character": 13,
							"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxSlashCommandValidator.ts#L7"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": 1321,
							"name": "XernerxBaseValidator",
							"package": "xernerx"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1344
					]
				}
			],
			"sources": [
				{
					"fileName": "src/validators/XernerxSlashCommandValidator.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/Xernerx/xernerx/blob/8ac414baf1dc1e7e5c210cb3662efdba546e0526/src/validators/XernerxSlashCommandValidator.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				1,
				9,
				25,
				42,
				106,
				377,
				676,
				697,
				713,
				727,
				741,
				755,
				770,
				784,
				817,
				843,
				861,
				872,
				886,
				892,
				898,
				911,
				914,
				929,
				1004,
				1007,
				1044,
				1058,
				1106,
				1193,
				1200,
				1209,
				1217,
				1225,
				1233,
				1241,
				1242,
				1243,
				1244,
				1275,
				1303,
				1320,
				1343
			]
		}
	],
	"packageName": "xernerx",
	"packageVersion": "0.1.120-beta.23",
	"readme": [
		{
			"kind": "text",
			"text": "<!-- @format -->\n\n<center>\n\n![ICON](https://dummi.me/icons/XernerxLogoPurple.png)\n\n[![]("
		},
		{
			"kind": "relative-link",
			"text": "./docs/icons/Xernerx%20-%20Logo%20-%20Purple.png"
		},
		{
			"kind": "text",
			"text": ")](https://xernerx.github.io/xernerx)\n\n[![Discord](https://img.shields.io/discord/784094726432489522?logo=discord)](https://discord.gg/teNWyb69dq)\n![npm](https://img.shields.io/npm/dw/xernerx)\n![npm](https://img.shields.io/npm/dt/xernerx)\n![Read the Docs](https://img.shields.io/readthedocs/node)\n![npm type definitions](https://img.shields.io/npm/types/xernerx)\n![node-current](https://img.shields.io/npm/v/discord.js)\n[![wakatime](https://wakatime.com/badge/user/0eeef1b5-98a7-4ec0-ab4c-db00536d5ed1/project/23ab34b7-623b-45e8-b8db-e9f1910589f7.svg)](https://wakatime.com/badge/user/0eeef1b5-98a7-4ec0-ab4c-db00536d5ed1/project/23ab34b7-623b-45e8-b8db-e9f1910589f7)\n![node-current](https://img.shields.io/node/v/xernerx)\n![GitHub commit activity (branch)](https://img.shields.io/github/commit-activity/t/xernerx/xernerx)\n\n</center>\n\n# About\n\ne\nXernerx is a class based discord.js framework. \n\nIt can be customized to be a lightweight handler or a heavy customizable framework that does all the hard work for you.\n\n## Features\n\n> - [x] Slash command handler\n> - [x] Message command handler\n> - [x] Context command handler\n> - [x] Event handler (with custom Events)\n> - [x] Inhibitor handler\n> - [x] Extension handler\n> - [x] Client Utilities\n> - [x] Message Utilities\n> - [x] Interaction Utilities\n> - [x] Message command handles\n> - [x] Extension support\n> - [x] ShardClient\n\n## Links\n\n> - [Documentation](https://app.xernerx.com/docs)\n\n## Notes\n\n> - [x] CJS\n> - [x] ESM\n> - [x] TypeScript Types"
		}
	],
	"symbolIdMap": {
		"1": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": ""
		},
		"2": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder"
		},
		"3": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.__constructor"
		},
		"4": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder"
		},
		"5": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "id"
		},
		"6": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "options"
		},
		"7": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"8": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"9": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": ""
		},
		"10": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder"
		},
		"11": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.__constructor"
		},
		"12": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder"
		},
		"13": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "id"
		},
		"14": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "options"
		},
		"15": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"16": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"17": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"18": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"19": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"20": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.run"
		},
		"21": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.run"
		},
		"22": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "args"
		},
		"23": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"24": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"25": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": ""
		},
		"26": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder"
		},
		"27": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.__constructor"
		},
		"28": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder"
		},
		"29": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "id"
		},
		"30": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "options"
		},
		"31": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.filetype"
		},
		"32": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.name"
		},
		"33": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.description"
		},
		"34": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.alias"
		},
		"35": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.prefix"
		},
		"36": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.premium"
		},
		"37": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.exec"
		},
		"38": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "XernerxMessageCommandBuilder.exec"
		},
		"39": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxMessageCommandBuilder.ts",
			"qualifiedName": "args"
		},
		"40": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"41": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"42": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": ""
		},
		"43": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder"
		},
		"44": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.__constructor"
		},
		"45": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder"
		},
		"46": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "id"
		},
		"47": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "options"
		},
		"48": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.name"
		},
		"49": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.description"
		},
		"50": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.integration"
		},
		"51": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.data"
		},
		"52": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.options"
		},
		"53": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.subcommands"
		},
		"54": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.groups"
		},
		"55": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.premium"
		},
		"56": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.defer"
		},
		"57": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.deploy"
		},
		"58": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type"
		},
		"59": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.global"
		},
		"60": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.guilds"
		},
		"61": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.info"
		},
		"62": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.usage"
		},
		"63": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.category"
		},
		"64": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.cooldown"
		},
		"65": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.permissions"
		},
		"66": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type"
		},
		"67": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.client"
		},
		"68": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.user"
		},
		"69": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.strict"
		},
		"70": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type"
		},
		"71": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.owner"
		},
		"72": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.users"
		},
		"73": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.channels"
		},
		"74": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.guilds"
		},
		"75": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.types"
		},
		"76": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.ignore"
		},
		"77": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type"
		},
		"78": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.owner"
		},
		"79": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.users"
		},
		"80": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.channels"
		},
		"81": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.guilds"
		},
		"82": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "__type.types"
		},
		"83": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.filetype"
		},
		"84": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.autocomplete"
		},
		"85": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.autocomplete"
		},
		"86": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "args"
		},
		"87": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.conditions"
		},
		"88": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.conditions"
		},
		"89": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "args"
		},
		"90": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.exec"
		},
		"91": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "XernerxSlashCommandBuilder.exec"
		},
		"92": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxSlashCommandBuilder.ts",
			"qualifiedName": "args"
		},
		"104": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"105": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"106": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": ""
		},
		"107": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient"
		},
		"108": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"109": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"110": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Emitter"
		},
		"111": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"112": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "eventEmitter"
		},
		"113": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "eventName"
		},
		"114": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"115": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"116": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type.signal"
		},
		"117": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"118": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"119": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Emitter"
		},
		"120": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"121": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "eventEmitter"
		},
		"122": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "eventName"
		},
		"123": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"124": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"125": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type.signal"
		},
		"126": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"127": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"128": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"129": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"130": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"131": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"132": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"133": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "name"
		},
		"134": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"135": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"136": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"137": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"138": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"139": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "n"
		},
		"140": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"141": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"142": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"143": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "signal"
		},
		"144": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "resource"
		},
		"145": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"146": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"147": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "event"
		},
		"148": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"149": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"150": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"151": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"152": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.__constructor"
		},
		"153": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient"
		},
		"154": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "options"
		},
		"155": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.token"
		},
		"156": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.sharded"
		},
		"157": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.settings"
		},
		"158": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.premium"
		},
		"159": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"160": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.owners"
		},
		"161": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.consume"
		},
		"162": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.synchronize"
		},
		"163": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.monitisation"
		},
		"164": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"165": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.skus"
		},
		"166": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.stats"
		},
		"167": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.cluster"
		},
		"168": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.cache"
		},
		"169": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"170": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.messages"
		},
		"171": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.slash"
		},
		"172": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.handler"
		},
		"173": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"174": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.message"
		},
		"175": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.slash"
		},
		"176": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.commands"
		},
		"177": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"178": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.message"
		},
		"179": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.slash"
		},
		"180": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.events"
		},
		"181": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.modules"
		},
		"182": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type"
		},
		"183": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.eventHandler"
		},
		"184": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "__type.commandHandler"
		},
		"185": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.connect"
		},
		"186": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxClient.ts",
			"qualifiedName": "XernerxClient.connect"
		},
		"189": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.application"
		},
		"190": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.channels"
		},
		"191": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.emojis"
		},
		"192": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.emojis"
		},
		"193": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.guilds"
		},
		"194": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.options"
		},
		"195": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"196": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type.intents"
		},
		"197": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.readyAt"
		},
		"198": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.readyAt"
		},
		"199": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.readyTimestamp"
		},
		"200": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.sweepers"
		},
		"201": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.shard"
		},
		"202": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.uptime"
		},
		"203": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.uptime"
		},
		"204": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.user"
		},
		"205": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.users"
		},
		"206": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.voice"
		},
		"207": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.ws"
		},
		"208": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.destroy"
		},
		"209": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.destroy"
		},
		"210": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.deleteWebhook"
		},
		"211": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.deleteWebhook"
		},
		"212": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "id"
		},
		"213": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"214": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildPreview"
		},
		"215": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildPreview"
		},
		"216": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "guild"
		},
		"217": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchInvite"
		},
		"218": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchInvite"
		},
		"219": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "invite"
		},
		"220": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"221": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildTemplate"
		},
		"222": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildTemplate"
		},
		"223": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "template"
		},
		"224": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchVoiceRegions"
		},
		"225": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchVoiceRegions"
		},
		"226": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchSticker"
		},
		"227": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchSticker"
		},
		"228": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "id"
		},
		"229": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"230": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"231": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"232": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"233": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type.packId"
		},
		"234": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchStickerPacks"
		},
		"235": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"236": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchPremiumStickerPacks"
		},
		"237": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchPremiumStickerPacks"
		},
		"238": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchWebhook"
		},
		"239": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchWebhook"
		},
		"240": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "id"
		},
		"241": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "token"
		},
		"242": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildWidget"
		},
		"243": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.fetchGuildWidget"
		},
		"244": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "guild"
		},
		"245": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.generateInvite"
		},
		"246": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.generateInvite"
		},
		"247": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"248": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.login"
		},
		"249": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.login"
		},
		"250": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "token"
		},
		"251": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.isReady"
		},
		"252": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.isReady"
		},
		"253": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.toJSON"
		},
		"254": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.toJSON"
		},
		"255": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"256": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"257": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"258": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"259": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"260": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"261": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"262": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"263": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.on"
		},
		"264": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"265": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"266": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"267": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"268": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"269": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"270": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"271": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"272": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"273": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"274": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"275": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"276": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"277": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"278": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.once"
		},
		"279": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"280": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"281": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"282": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"283": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"284": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"285": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"286": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"287": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"288": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"289": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"290": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.emit"
		},
		"291": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"292": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"293": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"294": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"295": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"296": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"297": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"298": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"299": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"300": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"301": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"302": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.off"
		},
		"303": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"304": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"305": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "listener"
		},
		"306": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"307": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "__type"
		},
		"308": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "args"
		},
		"309": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"310": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"311": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"312": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"313": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Client.removeAllListeners"
		},
		"314": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Event"
		},
		"315": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "event"
		},
		"316": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseClient.rest"
		},
		"317": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseClient.[asyncDispose]"
		},
		"318": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseClient.[asyncDispose]"
		},
		"319": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"320": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"321": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"322": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "error"
		},
		"323": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "event"
		},
		"324": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"325": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"326": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"327": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"328": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"329": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"330": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"331": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"332": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"333": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"334": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"335": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"336": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"337": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"338": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"339": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"340": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"341": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"342": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"343": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "n"
		},
		"344": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"345": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"346": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"347": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"348": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"349": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"350": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"351": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"352": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"353": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"354": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"355": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"356": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"357": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"358": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"359": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"360": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"361": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"362": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"363": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"364": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"365": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"366": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"367": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"368": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"369": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"370": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"371": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"372": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"373": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"374": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"375": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"376": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"377": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": ""
		},
		"378": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "XernerxShardClient"
		},
		"379": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"380": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"381": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"382": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"383": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "options"
		},
		"384": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"385": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"386": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"387": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "options"
		},
		"388": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"389": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"390": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"391": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"392": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "options"
		},
		"393": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"394": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"395": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"396": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "options"
		},
		"397": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"398": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"399": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"400": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"401": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"402": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"403": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"404": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "name"
		},
		"405": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"406": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"407": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "emitter"
		},
		"408": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"409": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"410": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "n"
		},
		"411": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"412": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"413": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"414": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "signal"
		},
		"415": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "resource"
		},
		"416": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"417": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"418": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "event"
		},
		"419": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"420": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"421": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"422": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"423": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "XernerxShardClient.__constructor"
		},
		"424": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "XernerxShardClient"
		},
		"425": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "options"
		},
		"426": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "XernerxShardClient.onlineShards"
		},
		"427": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "XernerxShardClient.stats"
		},
		"428": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type"
		},
		"429": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type.onlineSince"
		},
		"430": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type.guildCount"
		},
		"431": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type.userCount"
		},
		"432": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type.shardCount"
		},
		"433": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type.voteCount"
		},
		"434": {
			"packageName": "xernerx",
			"packagePath": "src/client/XernerxShardClient.ts",
			"qualifiedName": "__type.shards"
		},
		"437": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.respawn"
		},
		"438": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.restarts"
		},
		"439": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.clusterData"
		},
		"440": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.clusterOptions"
		},
		"441": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"442": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.file"
		},
		"443": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.totalShards"
		},
		"444": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.totalClusters"
		},
		"445": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.shardsPerClusters"
		},
		"446": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.mode"
		},
		"447": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.shardArgs"
		},
		"448": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.execArgv"
		},
		"449": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.shardList"
		},
		"450": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.token"
		},
		"451": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.clusters"
		},
		"452": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.shardClusterList"
		},
		"453": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.clusterList"
		},
		"454": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.spawnOptions"
		},
		"455": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.queue"
		},
		"456": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.promise"
		},
		"457": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.heartbeat"
		},
		"458": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.recluster"
		},
		"459": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.hooks"
		},
		"460": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.spawn"
		},
		"461": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.spawn"
		},
		"462": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__0"
		},
		"463": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcast"
		},
		"464": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcast"
		},
		"465": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "message"
		},
		"466": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.createCluster"
		},
		"467": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.createCluster"
		},
		"468": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "id"
		},
		"469": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "shardsToSpawn"
		},
		"470": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "totalShards"
		},
		"471": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "recluster"
		},
		"472": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"473": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"474": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "script"
		},
		"475": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"476": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "script"
		},
		"477": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "options"
		},
		"478": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"479": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "T"
		},
		"480": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "fn"
		},
		"481": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"482": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"483": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "client"
		},
		"484": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"485": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "T"
		},
		"486": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "fn"
		},
		"487": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"488": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"489": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "client"
		},
		"490": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "options"
		},
		"491": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"492": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.cluster"
		},
		"493": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.timeout"
		},
		"494": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"495": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "T"
		},
		"496": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "P"
		},
		"497": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "fn"
		},
		"498": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"499": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"500": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "client"
		},
		"501": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "context"
		},
		"502": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "options"
		},
		"503": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.broadcastEval"
		},
		"504": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "T"
		},
		"505": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "P"
		},
		"506": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "fn"
		},
		"507": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"508": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"509": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "client"
		},
		"510": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "context"
		},
		"511": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "options"
		},
		"512": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.fetchClientValues"
		},
		"513": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.fetchClientValues"
		},
		"514": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "prop"
		},
		"515": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "cluster"
		},
		"516": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.respawnAll"
		},
		"517": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.respawnAll"
		},
		"518": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__0"
		},
		"519": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"520": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.clusterDelay"
		},
		"521": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.respawnDelay"
		},
		"522": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.timeout"
		},
		"523": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.evalOnManager"
		},
		"524": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.evalOnManager"
		},
		"525": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "script"
		},
		"526": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"527": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type._result"
		},
		"528": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type._error"
		},
		"529": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"530": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.name"
		},
		"531": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.message"
		},
		"532": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type.stack"
		},
		"537": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.extend"
		},
		"538": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.extend"
		},
		"539": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "plugins"
		},
		"540": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.triggerMaintenance"
		},
		"541": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.triggerMaintenance"
		},
		"542": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "reason"
		},
		"543": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager._debug"
		},
		"544": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager._debug"
		},
		"545": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "message"
		},
		"546": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "cluster"
		},
		"547": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.emit"
		},
		"548": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"549": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"550": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "K"
		},
		"551": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"552": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"553": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"554": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"555": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "S"
		},
		"556": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"557": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"558": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.off"
		},
		"559": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"560": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"561": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "K"
		},
		"562": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"563": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "listener"
		},
		"564": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"565": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"566": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"567": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"568": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"569": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "S"
		},
		"570": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"571": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "listener"
		},
		"572": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"573": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"574": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"575": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.on"
		},
		"576": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"577": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"578": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "K"
		},
		"579": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"580": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "listener"
		},
		"581": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"582": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"583": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"584": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"585": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"586": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "S"
		},
		"587": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"588": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "listener"
		},
		"589": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"590": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"591": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"592": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.once"
		},
		"593": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"594": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"595": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "K"
		},
		"596": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"597": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "listener"
		},
		"598": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"599": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"600": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"601": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"602": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"603": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "S"
		},
		"604": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"605": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "listener"
		},
		"606": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"607": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"608": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "args"
		},
		"609": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "ClusterManager.removeAllListeners"
		},
		"610": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"611": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"612": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "K"
		},
		"613": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"614": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"615": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "__type"
		},
		"616": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "S"
		},
		"617": {
			"packageName": "discord-hybrid-sharding",
			"packagePath": "src/Core/ClusterManager.ts",
			"qualifiedName": "event"
		},
		"618": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"619": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "EventEmitter.[captureRejectionSymbol]"
		},
		"620": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"621": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "error"
		},
		"622": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "event"
		},
		"623": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"624": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"625": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"626": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"627": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"628": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"629": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"630": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"631": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"632": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"633": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"634": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"635": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"636": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"637": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"638": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"639": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"640": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"641": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"642": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "n"
		},
		"643": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"644": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"645": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"646": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"647": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"648": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"649": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"650": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"651": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"652": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"653": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"654": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"655": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"656": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"657": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"658": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"659": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"660": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"661": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"662": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"663": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"664": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"665": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"666": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"667": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"668": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "K"
		},
		"669": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "eventName"
		},
		"670": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "listener"
		},
		"671": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"672": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__type"
		},
		"673": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "args"
		},
		"674": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"675": {
			"packageName": "@types/node",
			"packagePath": "events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"676": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": ""
		},
		"677": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent"
		},
		"678": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent.__constructor"
		},
		"679": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent"
		},
		"684": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent.run"
		},
		"685": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent.run"
		},
		"686": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "client"
		},
		"687": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent.put"
		},
		"688": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "XernerxClientReadyEvent.put"
		},
		"689": {
			"packageName": "xernerx",
			"packagePath": "src/events/clientReady.ts",
			"qualifiedName": "client"
		},
		"690": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"691": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"692": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"693": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"694": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"695": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"696": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"697": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": ""
		},
		"698": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "XernerxEntitlementCreateEvent"
		},
		"699": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "XernerxEntitlementCreateEvent.__constructor"
		},
		"700": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "XernerxEntitlementCreateEvent"
		},
		"701": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "XernerxEntitlementCreateEvent.run"
		},
		"702": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "XernerxEntitlementCreateEvent.run"
		},
		"703": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "a"
		},
		"704": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "b"
		},
		"705": {
			"packageName": "xernerx",
			"packagePath": "src/events/entitlementCreate.ts",
			"qualifiedName": "c"
		},
		"706": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"707": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"708": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"709": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"710": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"711": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"712": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"713": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": ""
		},
		"714": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": "XernerxInteractionCreateEvent"
		},
		"715": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": "XernerxInteractionCreateEvent.__constructor"
		},
		"716": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": "XernerxInteractionCreateEvent"
		},
		"717": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": "XernerxInteractionCreateEvent.run"
		},
		"718": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": "XernerxInteractionCreateEvent.run"
		},
		"719": {
			"packageName": "xernerx",
			"packagePath": "src/events/interactionCreate.ts",
			"qualifiedName": "interaction"
		},
		"720": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"721": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"722": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"723": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"724": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"725": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"726": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"727": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": ""
		},
		"728": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": "XernerxMessageCreateEvent"
		},
		"729": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": "XernerxMessageCreateEvent.__constructor"
		},
		"730": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": "XernerxMessageCreateEvent"
		},
		"731": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": "XernerxMessageCreateEvent.run"
		},
		"732": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": "XernerxMessageCreateEvent.run"
		},
		"733": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageCreate.ts",
			"qualifiedName": "message"
		},
		"734": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"735": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"736": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"737": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"738": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"739": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"740": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"741": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": ""
		},
		"742": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": "XernerxMessageDeleteEvent"
		},
		"743": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": "XernerxMessageDeleteEvent.__constructor"
		},
		"744": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": "XernerxMessageDeleteEvent"
		},
		"745": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": "XernerxMessageDeleteEvent.run"
		},
		"746": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": "XernerxMessageDeleteEvent.run"
		},
		"747": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageDelete.ts",
			"qualifiedName": "message"
		},
		"748": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"749": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"750": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"751": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"752": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"753": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"754": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"755": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": ""
		},
		"756": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "XernerxMessageUpdateEvent"
		},
		"757": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "XernerxMessageUpdateEvent.__constructor"
		},
		"758": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "XernerxMessageUpdateEvent"
		},
		"759": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "XernerxMessageUpdateEvent.run"
		},
		"760": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "XernerxMessageUpdateEvent.run"
		},
		"761": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "oldMessage"
		},
		"762": {
			"packageName": "xernerx",
			"packagePath": "src/events/messageUpdate.ts",
			"qualifiedName": "message"
		},
		"763": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"764": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"765": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"766": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"767": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"768": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"769": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"770": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": ""
		},
		"771": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": "XernerxSlashCommandInteractionEvent"
		},
		"772": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": "XernerxSlashCommandInteractionEvent.__constructor"
		},
		"773": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": "XernerxSlashCommandInteractionEvent"
		},
		"774": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": "XernerxSlashCommandInteractionEvent.run"
		},
		"775": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": "XernerxSlashCommandInteractionEvent.run"
		},
		"776": {
			"packageName": "xernerx",
			"packagePath": "src/events/slashCommandInteraction.ts",
			"qualifiedName": "interaction"
		},
		"777": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.filetype"
		},
		"778": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.name"
		},
		"779": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"780": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.emitter"
		},
		"781": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxEventBuilder.ts",
			"qualifiedName": "XernerxEventBuilder.once"
		},
		"782": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.id"
		},
		"783": {
			"packageName": "xernerx",
			"packagePath": "src/build/XernerxBaseBuilder.ts",
			"qualifiedName": "XernerxBaseBuilder.client"
		},
		"784": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": ""
		},
		"785": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler"
		},
		"786": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.__constructor"
		},
		"787": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler"
		},
		"788": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "client"
		},
		"789": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadMessageCommand"
		},
		"790": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadMessageCommand"
		},
		"791": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "file"
		},
		"792": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadMessageCommands"
		},
		"793": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadMessageCommands"
		},
		"794": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "options"
		},
		"795": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadSlashCommand"
		},
		"796": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadSlashCommand"
		},
		"797": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "file"
		},
		"798": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadSlashCommands"
		},
		"799": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "CommandHandler.loadSlashCommands"
		},
		"800": {
			"packageName": "xernerx",
			"packagePath": "src/handler/CommandHandler.ts",
			"qualifiedName": "options"
		},
		"804": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.client"
		},
		"805": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFiles"
		},
		"806": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFiles"
		},
		"807": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "dir"
		},
		"808": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFile"
		},
		"809": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFile"
		},
		"810": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "file"
		},
		"811": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.importFile"
		},
		"812": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.importFile"
		},
		"813": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "builder"
		},
		"814": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "filename"
		},
		"815": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.__index"
		},
		"817": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": ""
		},
		"818": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler"
		},
		"819": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler.__constructor"
		},
		"820": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler"
		},
		"821": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "client"
		},
		"822": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler.loadEvent"
		},
		"823": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler.loadEvent"
		},
		"824": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "file"
		},
		"825": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler.loadEvents"
		},
		"826": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "EventHandler.loadEvents"
		},
		"827": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "options"
		},
		"828": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "__type"
		},
		"829": {
			"packageName": "xernerx",
			"packagePath": "src/handler/EventHandler.ts",
			"qualifiedName": "__type.directory"
		},
		"830": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.client"
		},
		"831": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFiles"
		},
		"832": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFiles"
		},
		"833": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "dir"
		},
		"834": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFile"
		},
		"835": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFile"
		},
		"836": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "file"
		},
		"837": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.importFile"
		},
		"838": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.importFile"
		},
		"839": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "builder"
		},
		"840": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "filename"
		},
		"841": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.__index"
		},
		"843": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": ""
		},
		"844": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler"
		},
		"845": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.__constructor"
		},
		"846": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler"
		},
		"847": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "client"
		},
		"848": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.client"
		},
		"849": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFiles"
		},
		"850": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFiles"
		},
		"851": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "dir"
		},
		"852": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFile"
		},
		"853": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.loadFile"
		},
		"854": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "file"
		},
		"855": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.importFile"
		},
		"856": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.importFile"
		},
		"857": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "builder"
		},
		"858": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "filename"
		},
		"859": {
			"packageName": "xernerx",
			"packagePath": "src/handler/Handler.ts",
			"qualifiedName": "Handler.__index"
		},
		"861": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": ""
		},
		"862": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "XernerxClientOptions"
		},
		"863": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "XernerxClientOptions.token"
		},
		"864": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "XernerxClientOptions.global"
		},
		"865": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "XernerxClientOptions.guildId"
		},
		"866": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "XernerxClientOptions.owners"
		},
		"867": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "XernerxClientOptions.premium"
		},
		"868": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "__type"
		},
		"869": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "__type.owners"
		},
		"870": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "__type.consume"
		},
		"871": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientOptions.ts",
			"qualifiedName": "__type.synchronize"
		},
		"872": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": ""
		},
		"873": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats"
		},
		"874": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.onlineSince"
		},
		"875": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.guildCount"
		},
		"876": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.userCount"
		},
		"877": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.shardCount"
		},
		"878": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.voteCount"
		},
		"879": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.shard"
		},
		"880": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "__type"
		},
		"881": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "__type.shardId"
		},
		"882": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "__type.onlineSince"
		},
		"883": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "__type.guildCount"
		},
		"884": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "__type.userCount"
		},
		"885": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxClientStats.ts",
			"qualifiedName": "XernerxClientStats.shards"
		},
		"886": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxEventBuilderOptions.ts",
			"qualifiedName": ""
		},
		"887": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxEventBuilderOptions.ts",
			"qualifiedName": "XernerxEventBuilderOptions"
		},
		"888": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxEventBuilderOptions.ts",
			"qualifiedName": "XernerxEventBuilderOptions.name"
		},
		"889": {
			"packageName": "xernerx",
			"packagePath": "",
			"qualifiedName": "__type"
		},
		"890": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxEventBuilderOptions.ts",
			"qualifiedName": "XernerxEventBuilderOptions.emitter"
		},
		"891": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxEventBuilderOptions.ts",
			"qualifiedName": "XernerxEventBuilderOptions.once"
		},
		"892": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"qualifiedName": ""
		},
		"893": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"qualifiedName": "XernerxMessageCommandBuilderOptions"
		},
		"894": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"qualifiedName": "XernerxMessageCommandBuilderOptions.name"
		},
		"895": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"qualifiedName": "XernerxMessageCommandBuilderOptions.alias"
		},
		"896": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"qualifiedName": "XernerxMessageCommandBuilderOptions.prefix"
		},
		"897": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"qualifiedName": "XernerxMessageCommandBuilderOptions.premium"
		},
		"898": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": ""
		},
		"899": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions"
		},
		"900": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.directory"
		},
		"901": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.prefix"
		},
		"902": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.mention"
		},
		"903": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.seperator"
		},
		"904": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.handleEdits"
		},
		"905": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.handleDeletions"
		},
		"906": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "XernerxMessageCommandHandlerOptions.ignore"
		},
		"907": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "__type"
		},
		"908": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "__type.system"
		},
		"909": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "__type.bots"
		},
		"910": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"qualifiedName": "__type.self"
		},
		"911": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxShardClientOptions.ts",
			"qualifiedName": ""
		},
		"912": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxShardClientOptions.ts",
			"qualifiedName": "XernerxShardClientOptions"
		},
		"913": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxShardClientOptions.ts",
			"qualifiedName": "XernerxShardClientOptions.file"
		},
		"914": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": ""
		},
		"915": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand"
		},
		"916": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.interaction"
		},
		"917": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.options"
		},
		"918": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "__type"
		},
		"919": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "__type.name"
		},
		"920": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "__type.type"
		},
		"921": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "__type.value"
		},
		"922": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.subcommand"
		},
		"923": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.group"
		},
		"924": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommand.command"
		},
		"925": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommandAutocomplete"
		},
		"926": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommandAutocomplete.interaction"
		},
		"927": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommandAutocomplete.focused"
		},
		"928": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommand.ts",
			"qualifiedName": "XernerxSlashCommandAutocomplete.options"
		},
		"929": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": ""
		},
		"930": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions"
		},
		"931": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.name"
		},
		"932": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.locales"
		},
		"933": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"934": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.name"
		},
		"935": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.description"
		},
		"936": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.description"
		},
		"937": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.contexts"
		},
		"938": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.integration"
		},
		"939": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.nsfw"
		},
		"940": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.options"
		},
		"941": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.subcommands"
		},
		"942": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.groups"
		},
		"943": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.premium"
		},
		"944": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.defer"
		},
		"945": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.deploy"
		},
		"946": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"947": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.global"
		},
		"948": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.guilds"
		},
		"949": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.info"
		},
		"950": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.usage"
		},
		"951": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.category"
		},
		"952": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.cooldown"
		},
		"953": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.permissions"
		},
		"954": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"955": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.client"
		},
		"956": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.user"
		},
		"957": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.strict"
		},
		"958": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"959": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.owner"
		},
		"960": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.users"
		},
		"961": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.channels"
		},
		"962": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.guilds"
		},
		"963": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.types"
		},
		"964": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOptions.ignore"
		},
		"965": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"966": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.owner"
		},
		"967": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.users"
		},
		"968": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.channels"
		},
		"969": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.guilds"
		},
		"970": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.types"
		},
		"971": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption"
		},
		"972": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.type"
		},
		"973": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.name"
		},
		"974": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.locales"
		},
		"975": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"976": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.name"
		},
		"977": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.description"
		},
		"978": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.description"
		},
		"979": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.required"
		},
		"980": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.autocomplete"
		},
		"981": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.maxLength"
		},
		"982": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.minLength"
		},
		"983": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderOption.choices"
		},
		"984": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"985": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.name"
		},
		"986": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.value"
		},
		"987": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.locales"
		},
		"988": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderSubcommand"
		},
		"989": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderSubcommand.name"
		},
		"990": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderSubcommand.description"
		},
		"991": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderSubcommand.options"
		},
		"992": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderSubcommand.locales"
		},
		"993": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"994": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.name"
		},
		"995": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.description"
		},
		"996": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderGroup"
		},
		"997": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderGroup.name"
		},
		"998": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderGroup.description"
		},
		"999": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderGroup.subcommands"
		},
		"1000": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "XernerxSlashCommandBuilderGroup.locales"
		},
		"1001": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type"
		},
		"1002": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.name"
		},
		"1003": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"qualifiedName": "__type.description"
		},
		"1004": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
			"qualifiedName": ""
		},
		"1005": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
			"qualifiedName": "XernerxSlashCommandHandlerOptions"
		},
		"1006": {
			"packageName": "xernerx",
			"packagePath": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
			"qualifiedName": "XernerxSlashCommandHandlerOptions.directory"
		},
		"1007": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": ""
		},
		"1008": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild"
		},
		"1009": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild.__constructor"
		},
		"1010": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild"
		},
		"1011": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "client"
		},
		"1012": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "guild"
		},
		"1013": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild.consumeEntitlement"
		},
		"1014": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild.consumeEntitlement"
		},
		"1015": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild.entitlements"
		},
		"1016": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxGuild.ts",
			"qualifiedName": "XernerxGuild.entitlements"
		},
		"1017": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.createdAt"
		},
		"1018": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.createdAt"
		},
		"1019": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.createdTimestamp"
		},
		"1020": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.createdTimestamp"
		},
		"1021": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.features"
		},
		"1022": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.icon"
		},
		"1023": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.id"
		},
		"1024": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.name"
		},
		"1025": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.nameAcronym"
		},
		"1026": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.nameAcronym"
		},
		"1027": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.partnered"
		},
		"1028": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.partnered"
		},
		"1029": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.verified"
		},
		"1030": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.verified"
		},
		"1031": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.fetch"
		},
		"1032": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.fetch"
		},
		"1033": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.iconURL"
		},
		"1034": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.iconURL"
		},
		"1035": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1036": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.toString"
		},
		"1037": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "BaseGuild.toString"
		},
		"1038": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.client"
		},
		"1039": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.toJSON"
		},
		"1040": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.toJSON"
		},
		"1041": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "props"
		},
		"1042": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.valueOf"
		},
		"1043": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.valueOf"
		},
		"1044": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": ""
		},
		"1045": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments"
		},
		"1046": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.__constructor"
		},
		"1047": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments"
		},
		"1048": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "interaction"
		},
		"1049": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "command"
		},
		"1052": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.options"
		},
		"1053": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.options"
		},
		"1054": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.subcommand"
		},
		"1055": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.subcommand"
		},
		"1056": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.group"
		},
		"1057": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxInteractionArguments.ts",
			"qualifiedName": "XernerxInteractionArguments.group"
		},
		"1058": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": ""
		},
		"1059": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation"
		},
		"1060": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.__constructor"
		},
		"1061": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation"
		},
		"1062": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "client"
		},
		"1064": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.consume"
		},
		"1065": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.consume"
		},
		"1066": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "id"
		},
		"1067": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "options"
		},
		"1068": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.entitlements"
		},
		"1069": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.entitlements"
		},
		"1070": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "id"
		},
		"1071": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "options"
		},
		"1072": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.sku"
		},
		"1073": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.sku"
		},
		"1074": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "options"
		},
		"1075": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.create"
		},
		"1076": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.create"
		},
		"1077": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "id"
		},
		"1078": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "user"
		},
		"1079": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.delete"
		},
		"1080": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "XernerxMonitisation.delete"
		},
		"1081": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxMonitisation.ts",
			"qualifiedName": "id"
		},
		"1082": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.getSKUs"
		},
		"1083": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.getSKUs"
		},
		"1084": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "applicationId"
		},
		"1085": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "__1"
		},
		"1086": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.getEntitlements"
		},
		"1087": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.getEntitlements"
		},
		"1088": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "applicationId"
		},
		"1089": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "query"
		},
		"1090": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "__2"
		},
		"1091": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.createTestEntitlement"
		},
		"1092": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.createTestEntitlement"
		},
		"1093": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "applicationId"
		},
		"1094": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "body"
		},
		"1095": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "__2"
		},
		"1096": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.deleteTestEntitlement"
		},
		"1097": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.deleteTestEntitlement"
		},
		"1098": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "applicationId"
		},
		"1099": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "entitlementId"
		},
		"1100": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "__2"
		},
		"1101": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.consumeEntitlement"
		},
		"1102": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "MonetizationAPI.consumeEntitlement"
		},
		"1103": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "applicationId"
		},
		"1104": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "entitlementId"
		},
		"1105": {
			"packageName": "@discordjs/core",
			"packagePath": "dist/index.d.mts",
			"qualifiedName": "__2"
		},
		"1106": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": ""
		},
		"1107": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser"
		},
		"1108": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.__constructor"
		},
		"1109": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser"
		},
		"1110": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "client"
		},
		"1111": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "user"
		},
		"1113": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.premium"
		},
		"1114": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.premium"
		},
		"1115": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "id"
		},
		"1116": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.entitlements"
		},
		"1117": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.entitlements"
		},
		"1118": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "__object"
		},
		"1119": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "__object.entitlement"
		},
		"1120": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "__object.sku"
		},
		"1121": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.synchronize"
		},
		"1122": {
			"packageName": "xernerx",
			"packagePath": "src/model/XernerxUser.ts",
			"qualifiedName": "XernerxUser.synchronize"
		},
		"1123": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.accentColor"
		},
		"1124": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatar"
		},
		"1125": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatarDecoration"
		},
		"1126": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatarDecorationData"
		},
		"1127": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.banner"
		},
		"1128": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.bot"
		},
		"1129": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.createdAt"
		},
		"1130": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.createdAt"
		},
		"1131": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.createdTimestamp"
		},
		"1132": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.createdTimestamp"
		},
		"1133": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.collectibles"
		},
		"1134": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.discriminator"
		},
		"1135": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.displayName"
		},
		"1136": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.displayName"
		},
		"1137": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.defaultAvatarURL"
		},
		"1138": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.defaultAvatarURL"
		},
		"1139": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.dmChannel"
		},
		"1140": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.dmChannel"
		},
		"1141": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.flags"
		},
		"1142": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.globalName"
		},
		"1143": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.hexAccentColor"
		},
		"1144": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.hexAccentColor"
		},
		"1145": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.id"
		},
		"1146": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.partial"
		},
		"1147": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.partial"
		},
		"1148": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.primaryGuild"
		},
		"1149": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.system"
		},
		"1150": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.tag"
		},
		"1151": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.tag"
		},
		"1152": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.username"
		},
		"1153": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatarURL"
		},
		"1154": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatarURL"
		},
		"1155": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1156": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatarDecorationURL"
		},
		"1157": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.avatarDecorationURL"
		},
		"1158": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1159": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.bannerURL"
		},
		"1160": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.bannerURL"
		},
		"1161": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1162": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.guildTagBadgeURL"
		},
		"1163": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.guildTagBadgeURL"
		},
		"1164": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1165": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.createDM"
		},
		"1166": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.createDM"
		},
		"1167": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "force"
		},
		"1168": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.deleteDM"
		},
		"1169": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.deleteDM"
		},
		"1170": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.displayAvatarURL"
		},
		"1171": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.displayAvatarURL"
		},
		"1172": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1173": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.equals"
		},
		"1174": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.equals"
		},
		"1175": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "user"
		},
		"1176": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.fetch"
		},
		"1177": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.fetch"
		},
		"1178": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "force"
		},
		"1179": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.fetchFlags"
		},
		"1180": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.fetchFlags"
		},
		"1181": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "force"
		},
		"1182": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.toString"
		},
		"1183": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "User.toString"
		},
		"1184": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.client"
		},
		"1185": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.toJSON"
		},
		"1186": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.toJSON"
		},
		"1187": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "props"
		},
		"1188": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.valueOf"
		},
		"1189": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "Base.valueOf"
		},
		"1190": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "PartialTextBasedChannelFields.send"
		},
		"1191": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "PartialTextBasedChannelFields.send"
		},
		"1192": {
			"packageName": "discord.js",
			"packagePath": "typings/index.d.mts",
			"qualifiedName": "options"
		},
		"1193": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": ""
		},
		"1194": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase"
		},
		"1195": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.__constructor"
		},
		"1196": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase"
		},
		"1197": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.base"
		},
		"1198": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1199": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1200": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxError.ts",
			"qualifiedName": ""
		},
		"1201": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxError.ts",
			"qualifiedName": "XernerxError"
		},
		"1202": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxError.ts",
			"qualifiedName": "XernerxError.__constructor"
		},
		"1203": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxError.ts",
			"qualifiedName": "XernerxError"
		},
		"1204": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxError.ts",
			"qualifiedName": "message"
		},
		"1205": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxError.ts",
			"qualifiedName": "exit"
		},
		"1206": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.base"
		},
		"1207": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1208": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1209": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInfo.ts",
			"qualifiedName": ""
		},
		"1210": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInfo.ts",
			"qualifiedName": "XernerxInfo"
		},
		"1211": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInfo.ts",
			"qualifiedName": "XernerxInfo.__constructor"
		},
		"1212": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInfo.ts",
			"qualifiedName": "XernerxInfo"
		},
		"1213": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInfo.ts",
			"qualifiedName": "message"
		},
		"1214": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.base"
		},
		"1215": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1216": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1217": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInitial.ts",
			"qualifiedName": ""
		},
		"1218": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInitial.ts",
			"qualifiedName": "XernerxInitial"
		},
		"1219": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInitial.ts",
			"qualifiedName": "XernerxInitial.__constructor"
		},
		"1220": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInitial.ts",
			"qualifiedName": "XernerxInitial"
		},
		"1221": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxInitial.ts",
			"qualifiedName": "type"
		},
		"1222": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.base"
		},
		"1223": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1224": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1225": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxSuccess.ts",
			"qualifiedName": ""
		},
		"1226": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxSuccess.ts",
			"qualifiedName": "XernerxSuccess"
		},
		"1227": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxSuccess.ts",
			"qualifiedName": "XernerxSuccess.__constructor"
		},
		"1228": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxSuccess.ts",
			"qualifiedName": "XernerxSuccess"
		},
		"1229": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxSuccess.ts",
			"qualifiedName": "message"
		},
		"1230": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.base"
		},
		"1231": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1232": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1233": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxWarn.ts",
			"qualifiedName": ""
		},
		"1234": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxWarn.ts",
			"qualifiedName": "XernerxWarn"
		},
		"1235": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxWarn.ts",
			"qualifiedName": "XernerxWarn.__constructor"
		},
		"1236": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxWarn.ts",
			"qualifiedName": "XernerxWarn"
		},
		"1237": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxWarn.ts",
			"qualifiedName": "message"
		},
		"1238": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "XernerxBase.base"
		},
		"1239": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1240": {
			"packageName": "xernerx",
			"packagePath": "src/tools/XernerxBase.ts",
			"qualifiedName": "__type"
		},
		"1241": {
			"packageName": "xernerx",
			"packagePath": "src/types/Events.d.ts",
			"qualifiedName": ""
		},
		"1242": {
			"packageName": "xernerx",
			"packagePath": "src/types/Interaction.d.ts",
			"qualifiedName": ""
		},
		"1243": {
			"packageName": "xernerx",
			"packagePath": "src/types/Message.d.ts",
			"qualifiedName": ""
		},
		"1244": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": ""
		},
		"1245": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil"
		},
		"1246": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.__constructor"
		},
		"1247": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil"
		},
		"1248": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "client"
		},
		"1249": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "interaction"
		},
		"1250": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.interaction"
		},
		"1251": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.cache"
		},
		"1252": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.args"
		},
		"1253": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.send"
		},
		"1254": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.send"
		},
		"1255": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "options"
		},
		"1256": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.reply"
		},
		"1257": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.reply"
		},
		"1258": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "options"
		},
		"1259": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.send2"
		},
		"1260": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.send2"
		},
		"1261": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "options"
		},
		"1262": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.reply2"
		},
		"1263": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "XernerxInteractionUtil.reply2"
		},
		"1264": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxInteractionUtil.ts",
			"qualifiedName": "options"
		},
		"1265": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.client"
		},
		"1266": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.parsed"
		},
		"1267": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type"
		},
		"1268": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.command"
		},
		"1269": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.alias"
		},
		"1270": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.mention"
		},
		"1271": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.prefix"
		},
		"1272": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.webhook"
		},
		"1273": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.webhook"
		},
		"1274": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "options"
		},
		"1275": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": ""
		},
		"1276": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil"
		},
		"1277": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.__constructor"
		},
		"1278": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil"
		},
		"1279": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "client"
		},
		"1280": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "message"
		},
		"1281": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.message"
		},
		"1282": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.cache"
		},
		"1283": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.args"
		},
		"1286": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.send"
		},
		"1287": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.send"
		},
		"1288": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "options"
		},
		"1289": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.reply"
		},
		"1290": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "XernerxMessageUtil.reply"
		},
		"1291": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxMessageUtil.ts",
			"qualifiedName": "options"
		},
		"1292": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.client"
		},
		"1293": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.parsed"
		},
		"1294": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type"
		},
		"1295": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.command"
		},
		"1296": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.alias"
		},
		"1297": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.mention"
		},
		"1298": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.prefix"
		},
		"1299": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.interaction"
		},
		"1300": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.webhook"
		},
		"1301": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.webhook"
		},
		"1302": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "options"
		},
		"1303": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": ""
		},
		"1304": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil"
		},
		"1305": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.__constructor"
		},
		"1306": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil"
		},
		"1307": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "client"
		},
		"1308": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "interaction"
		},
		"1309": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.client"
		},
		"1310": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.parsed"
		},
		"1311": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type"
		},
		"1312": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.command"
		},
		"1313": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.alias"
		},
		"1314": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.mention"
		},
		"1315": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "__type.prefix"
		},
		"1316": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.interaction"
		},
		"1317": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.webhook"
		},
		"1318": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "XernerxBaseUtil.webhook"
		},
		"1319": {
			"packageName": "xernerx",
			"packagePath": "src/util/XernerxUtil.ts",
			"qualifiedName": "options"
		},
		"1320": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": ""
		},
		"1321": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator"
		},
		"1322": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.__constructor"
		},
		"1323": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator"
		},
		"1324": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "interaction"
		},
		"1325": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "command"
		},
		"1326": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.client"
		},
		"1327": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.interaction"
		},
		"1328": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.command"
		},
		"1329": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.satisified"
		},
		"1330": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.premium"
		},
		"1331": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.premium"
		},
		"1332": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.global"
		},
		"1333": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.global"
		},
		"1334": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.emit"
		},
		"1335": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.emit"
		},
		"1336": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "error"
		},
		"1337": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type"
		},
		"1338": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type.type"
		},
		"1339": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type.message"
		},
		"1340": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type.data"
		},
		"1341": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.validate"
		},
		"1342": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.validate"
		},
		"1343": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxSlashCommandValidator.ts",
			"qualifiedName": ""
		},
		"1344": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxSlashCommandValidator.ts",
			"qualifiedName": "XernerxSlashCommandValidator"
		},
		"1345": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxSlashCommandValidator.ts",
			"qualifiedName": "XernerxSlashCommandValidator.__constructor"
		},
		"1346": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxSlashCommandValidator.ts",
			"qualifiedName": "XernerxSlashCommandValidator"
		},
		"1347": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxSlashCommandValidator.ts",
			"qualifiedName": "interaction"
		},
		"1348": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxSlashCommandValidator.ts",
			"qualifiedName": "command"
		},
		"1349": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.client"
		},
		"1350": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.interaction"
		},
		"1351": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.command"
		},
		"1352": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.satisified"
		},
		"1353": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.premium"
		},
		"1354": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.premium"
		},
		"1355": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.global"
		},
		"1356": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.global"
		},
		"1357": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.emit"
		},
		"1358": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.emit"
		},
		"1359": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "error"
		},
		"1360": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type"
		},
		"1361": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type.type"
		},
		"1362": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type.message"
		},
		"1363": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "__type.data"
		},
		"1364": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.validate"
		},
		"1365": {
			"packageName": "xernerx",
			"packagePath": "src/validators/XernerxBaseValidator.ts",
			"qualifiedName": "XernerxBaseValidator.validate"
		}
	},
	"files": {
		"entries": {
			"1": "src/build/XernerxBaseBuilder.ts",
			"2": "src/build/XernerxEventBuilder.ts",
			"3": "src/build/XernerxMessageCommandBuilder.ts",
			"4": "src/build/XernerxSlashCommandBuilder.ts",
			"5": "src/client/XernerxClient.ts",
			"6": "src/client/XernerxShardClient.ts",
			"7": "src/events/clientReady.ts",
			"8": "src/events/entitlementCreate.ts",
			"9": "src/events/interactionCreate.ts",
			"10": "src/events/messageCreate.ts",
			"11": "src/events/messageDelete.ts",
			"12": "src/events/messageUpdate.ts",
			"13": "src/events/slashCommandInteraction.ts",
			"14": "src/handler/CommandHandler.ts",
			"15": "src/handler/EventHandler.ts",
			"16": "src/handler/Handler.ts",
			"17": "src/interfaces/XernerxClientOptions.ts",
			"18": "src/interfaces/XernerxClientStats.ts",
			"19": "src/interfaces/XernerxEventBuilderOptions.ts",
			"20": "src/interfaces/XernerxMessageCommandBuilderOptions.ts",
			"21": "src/interfaces/XernerxMessageCommandHandlerOptions.ts",
			"22": "src/interfaces/XernerxShardClientOptions.ts",
			"23": "src/interfaces/XernerxSlashCommand.ts",
			"24": "src/interfaces/XernerxSlashCommandBuilderOptions.ts",
			"25": "src/interfaces/XernerxSlashCommandHandlerOptions.ts",
			"26": "src/model/XernerxGuild.ts",
			"27": "src/model/XernerxInteractionArguments.ts",
			"28": "src/model/XernerxMonitisation.ts",
			"29": "src/model/XernerxUser.ts",
			"30": "src/tools/XernerxBase.ts",
			"31": "src/tools/XernerxError.ts",
			"32": "src/tools/XernerxInfo.ts",
			"33": "src/tools/XernerxInitial.ts",
			"34": "src/tools/XernerxSuccess.ts",
			"35": "src/tools/XernerxWarn.ts",
			"36": "src/types/Events.d.ts",
			"37": "src/types/Interaction.d.ts",
			"38": "src/types/Message.d.ts",
			"39": "src/util/XernerxInteractionUtil.ts",
			"40": "src/util/XernerxMessageUtil.ts",
			"41": "src/util/XernerxUtil.ts",
			"42": "src/validators/XernerxBaseValidator.ts",
			"43": "src/validators/XernerxSlashCommandValidator.ts",
			"44": "README.md",
			"45": ""
		},
		"reflections": {
			"1": 1,
			"2": 9,
			"3": 25,
			"4": 42,
			"5": 106,
			"6": 377,
			"7": 676,
			"8": 697,
			"9": 713,
			"10": 727,
			"11": 741,
			"12": 755,
			"13": 770,
			"14": 784,
			"15": 817,
			"16": 843,
			"17": 861,
			"18": 872,
			"19": 886,
			"20": 892,
			"21": 898,
			"22": 911,
			"23": 914,
			"24": 929,
			"25": 1004,
			"26": 1007,
			"27": 1044,
			"28": 1058,
			"29": 1106,
			"30": 1193,
			"31": 1200,
			"32": 1209,
			"33": 1217,
			"34": 1225,
			"35": 1233,
			"36": 1241,
			"37": 1242,
			"38": 1243,
			"39": 1244,
			"40": 1275,
			"41": 1303,
			"42": 1320,
			"43": 1343,
			"44": 0,
			"45": 0
		}
	}
}
